# Name: BrokerSnapin
# Version: 7.15.0.86
# CreatedOn: 2019-01-10 15:10:56Z

Add-Type -IgnoreWarnings -TypeDefinition @'
namespace Citrix.Broker.Admin.SDK
{
    public class AccessPolicyRule
    {
        // Constructor
        public AccessPolicyRule(System.String val) { }
        public AccessPolicyRule(System.Int32 val) { }
        public AccessPolicyRule(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Boolean AllowRestart { get; set; }
        public Citrix.Broker.Admin.SDK.AllowedConnection AllowedConnections { get; set; }
        public System.String[] AllowedProtocols { get; set; }
        public Citrix.Broker.Admin.SDK.AllowedUser AllowedUsers { get; set; }
        public System.String Description { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Boolean ExcludedClientIPFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.IPAddressRange[] ExcludedClientIPs { get; set; }
        public System.Boolean ExcludedClientNameFilterEnabled { get; set; }
        public System.String[] ExcludedClientNames { get; set; }
        public System.Boolean ExcludedSmartAccessFilterEnabled { get; set; }
        public System.String[] ExcludedSmartAccessTags { get; set; }
        public System.Boolean ExcludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] ExcludedUsers { get; set; }
        public System.Boolean HdxSslEnabled { get; set; }
        public System.Boolean IncludedClientIPFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.IPAddressRange[] IncludedClientIPs { get; set; }
        public System.Boolean IncludedClientNameFilterEnabled { get; set; }
        public System.String[] IncludedClientNames { get; set; }
        public System.Boolean IncludedSmartAccessFilterEnabled { get; set; }
        public System.String[] IncludedSmartAccessTags { get; set; }
        public System.Boolean IncludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] IncludedUsers { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private AccessPolicyRule() { }
        public static AccessPolicyRule CreateTypeInstance()
        {
            return new AccessPolicyRule();
        }
    }
    
    public class AdminFolder
    {
        // Constructor
        public AdminFolder(System.String val) { }
        public AdminFolder(System.Int32 val) { }
        public AdminFolder(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Int32 DirectChildAdminFolders { get; set; }
        public System.Int32 DirectChildApplications { get; set; }
        public System.String FolderName { get; set; }
        public System.Guid LastChangeId { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Int32 ParentAdminFolderUid { get; set; }
        public System.Int32 TotalChildApplications { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private AdminFolder() { }
        public static AdminFolder CreateTypeInstance()
        {
            return new AdminFolder();
        }
    }
    
    public enum AlertMetric : int
    {
        Cpu = 0,
        Memory = 1,
        Network = 2,
        Disk = 3,
    }
    
    public enum AlertSeverity : int
    {
        Red = 0,
        Yellow = 1,
    }
    
    public enum AllocationType : int
    {
        Permanent = 0,
        Static = 0,
        Random = 1,
    }
    
    public enum AllowedConnection : int
    {
        Filtered = 0,
        NotViaAG = 1,
        ViaAG = 2,
        AnyViaAG = 3,
    }
    
    public enum AllowedUser : int
    {
        Filtered = 0,
        AnyAuthenticated = 1,
        Any = 2,
        AnonymousOnly = 3,
        FilteredOrAnonymous = 4,
    }
    
    public class AnalysisReport
    {
        // Constructor
        public AnalysisReport() { }
        
        // Property
        public System.String[] Base64FileContents { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.String[] ReportLocations { get; set; }
        
    }
    
    public class AppAssignmentPolicyRule
    {
        // Constructor
        public AppAssignmentPolicyRule(System.String val) { }
        public AppAssignmentPolicyRule(System.Int32 val) { }
        public AppAssignmentPolicyRule(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Description { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Boolean ExcludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] ExcludedUsers { get; set; }
        public System.Boolean IncludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] IncludedUsers { get; set; }
        public System.String Name { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private AppAssignmentPolicyRule() { }
        public static AppAssignmentPolicyRule CreateTypeInstance()
        {
            return new AppAssignmentPolicyRule();
        }
    }
    
    public enum AppDnaAnalysisState : int
    {
        None = 0,
        Unknown = 1,
        Unsupported = 2,
        Capturing = 3,
        Canceled = 4,
        Analyzing = 5,
        Ready = 6,
        Failed = 7,
        Importing = 8,
    }
    
    public enum AppDnaCompatibility : int
    {
        None = 0,
        Unsupported = 1,
        Unknown = 2,
        Compatible = 3,
        ProblemsDetected = 4,
    }
    
    public class AppEntitlementPolicyRule
    {
        // Constructor
        public AppEntitlementPolicyRule(System.String val) { }
        public AppEntitlementPolicyRule(System.Int32 val) { }
        public AppEntitlementPolicyRule(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Description { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Boolean ExcludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] ExcludedUsers { get; set; }
        public System.Boolean IncludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] IncludedUsers { get; set; }
        public Citrix.Broker.Admin.SDK.LeasingBehavior LeasingBehavior { get; set; }
        public System.String Name { get; set; }
        public Citrix.Broker.Admin.SDK.SessionReconnection SessionReconnection { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private AppEntitlementPolicyRule() { }
        public static AppEntitlementPolicyRule CreateTypeInstance()
        {
            return new AppEntitlementPolicyRule();
        }
    }
    
    public class Application
    {
        // Constructor
        public Application(System.String val) { }
        public Application(System.Int32 val) { }
        public Application(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String AdminFolderName { get; set; }
        public System.Int32 AdminFolderUid { get; set; }
        public System.Guid[] AllAssociatedDesktopGroupUUIDs { get; set; }
        public System.Int32[] AllAssociatedDesktopGroupUids { get; set; }
        public System.String ApplicationName { get; set; }
        public Citrix.Broker.Admin.SDK.ApplicationType ApplicationType { get; set; }
        public System.Guid[] AssociatedApplicationGroupUUIDs { get; set; }
        public System.Int32[] AssociatedApplicationGroupUids { get; set; }
        public System.Int32[] AssociatedDesktopGroupPriorities { get; set; }
        public System.Guid[] AssociatedDesktopGroupUUIDs { get; set; }
        public System.Int32[] AssociatedDesktopGroupUids { get; set; }
        public System.String[] AssociatedUserFullNames { get; set; }
        public System.String[] AssociatedUserNames { get; set; }
        public System.String[] AssociatedUserUPNs { get; set; }
        public System.String BrowserName { get; set; }
        public System.String ClientFolder { get; set; }
        public System.String CommandLineArguments { get; set; }
        public System.String CommandLineExecutable { get; set; }
        public System.Int32[] ConfigurationSlotUids { get; set; }
        public Citrix.Broker.Admin.SDK.CpuPriorityLevel CpuPriorityLevel { get; set; }
        public System.String Description { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.String HomeZoneName { get; set; }
        public System.Boolean HomeZoneOnly { get; set; }
        public System.Nullable<System.Guid> HomeZoneUid { get; set; }
        public System.Boolean IconFromClient { get; set; }
        public System.Nullable<System.Int32> IconUid { get; set; }
        public System.Boolean IgnoreUserHomeZone { get; set; }
        public System.String[] MachineConfigurationNames { get; set; }
        public System.Int32[] MachineConfigurationUids { get; set; }
        public System.Int32 MaxPerUserInstances { get; set; }
        public System.Int32 MaxTotalInstances { get; set; }
        public System.String[] MetadataKeys { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.String PublishedName { get; set; }
        public System.Boolean SecureCmdLineArgumentsEnabled { get; set; }
        public System.Boolean ShortcutAddedToDesktop { get; set; }
        public System.Boolean ShortcutAddedToStartMenu { get; set; }
        public System.String StartMenuFolder { get; set; }
        public System.String[] Tags { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Boolean UserFilterEnabled { get; set; }
        public System.Boolean Visible { get; set; }
        public System.Boolean WaitForPrinterCreation { get; set; }
        public System.String WorkingDirectory { get; set; }
        
        // Fabricated constructor
        private Application() { }
        public static Application CreateTypeInstance()
        {
            return new Application();
        }
    }
    
    public class ApplicationGroup
    {
        // Constructor
        public ApplicationGroup(System.String val) { }
        public ApplicationGroup(System.Int32 val) { }
        public ApplicationGroup(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Int32[] AssociatedDesktopGroupPriorities { get; set; }
        public System.Guid[] AssociatedDesktopGroupUUIDs { get; set; }
        public System.Int32[] AssociatedDesktopGroupUids { get; set; }
        public System.String[] AssociatedUserFullNames { get; set; }
        public System.String[] AssociatedUserNames { get; set; }
        public System.String[] AssociatedUserUPNs { get; set; }
        public System.String Description { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.String RestrictToTag { get; set; }
        public Citrix.Broker.Admin.SDK.ScopeReference[] Scopes { get; set; }
        public System.Boolean SessionSharingEnabled { get; set; }
        public System.Boolean SingleAppPerSession { get; set; }
        public System.String[] Tags { get; set; }
        public System.Nullable<System.Guid> TenantId { get; set; }
        public System.Int32 TotalApplications { get; set; }
        public System.Int32 TotalMachines { get; set; }
        public System.Int32 TotalMachinesWithTagRestriction { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Boolean UserFilterEnabled { get; set; }
        
        // Fabricated constructor
        private ApplicationGroup() { }
        public static ApplicationGroup CreateTypeInstance()
        {
            return new ApplicationGroup();
        }
    }
    
    public class ApplicationInstance
    {
        // Constructor
        public ApplicationInstance(System.Int64 val) { }
        public ApplicationInstance(System.Int32 val) { }
        public ApplicationInstance(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String ApplicationName { get; set; }
        public System.Guid ApplicationUUID { get; set; }
        public System.Int32 ApplicationUid { get; set; }
        public System.Int32 Instances { get; set; }
        public System.String MachineName { get; set; }
        public System.Int32 MachineUid { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.Guid SessionKey { get; set; }
        public System.Int64 SessionUid { get; set; }
        public System.Int64 Uid { get; set; }
        public System.String UserName { get; set; }
        
        // Fabricated constructor
        private ApplicationInstance() { }
        public static ApplicationInstance CreateTypeInstance()
        {
            return new ApplicationInstance();
        }
    }
    
    public enum ApplicationType : int
    {
        HostedOnDesktop = 0,
        InstalledOnClient = 1,
        SessionPreLauncher = 2,
        PublishedContent = 3,
    }
    
    public class AssignmentPolicyRule
    {
        // Constructor
        public AssignmentPolicyRule(System.String val) { }
        public AssignmentPolicyRule(System.Int32 val) { }
        public AssignmentPolicyRule(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Nullable<Citrix.Broker.Admin.SDK.ColorDepth> ColorDepth { get; set; }
        public System.String Description { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Boolean ExcludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] ExcludedUsers { get; set; }
        public System.Nullable<System.Int32> IconUid { get; set; }
        public System.Boolean IncludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] IncludedUsers { get; set; }
        public System.Int32 MaxDesktops { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.String PublishedName { get; set; }
        public System.Nullable<System.Boolean> SecureIcaRequired { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private AssignmentPolicyRule() { }
        public static AssignmentPolicyRule CreateTypeInstance()
        {
            return new AssignmentPolicyRule();
        }
    }
    
    public enum BrokerLeaseType : int
    {
        Enumeration = 0,
        Launch = 1,
    }
    
    public class Catalog
    {
        // Constructor
        public Catalog(System.String val) { }
        public Catalog(System.Int32 val) { }
        public Catalog(System.Management.Automation.PSObject obj) { }
        
        // Property
        public Citrix.Broker.Admin.SDK.AllocationType AllocationType { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.AppDnaAnalysisState> AppDnaAnalysisState { get; set; }
        public System.Int32 AssignedCount { get; set; }
        public System.Int32 AvailableAssignedCount { get; set; }
        public System.Int32 AvailableCount { get; set; }
        public System.Int32 AvailableUnassignedCount { get; set; }
        public System.String Description { get; set; }
        public System.Nullable<System.Int32> HypervisorConnectionUid { get; set; }
        public System.Boolean IsRemotePC { get; set; }
        public System.Boolean MachinesArePhysical { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public Citrix.Broker.Admin.SDK.FunctionalLevel MinimumFunctionalLevel { get; set; }
        public System.String Name { get; set; }
        public Citrix.Broker.Admin.SDK.PersistUserChanges PersistUserChanges { get; set; }
        public System.Nullable<System.Guid> ProvisioningSchemeId { get; set; }
        public Citrix.Broker.Admin.SDK.ProvisioningType ProvisioningType { get; set; }
        public System.String PvsAddress { get; set; }
        public System.String PvsDomain { get; set; }
        public System.Int32[] RemotePCDesktopGroupPriorities { get; set; }
        public System.Int32[] RemotePCDesktopGroupUids { get; set; }
        public System.Nullable<System.Int32> RemotePCHypervisorConnectionUid { get; set; }
        public Citrix.Broker.Admin.SDK.ScopeReference[] Scopes { get; set; }
        public Citrix.Broker.Admin.SDK.SessionSupport SessionSupport { get; set; }
        public System.Nullable<System.Guid> TenantId { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Int32 UnassignedCount { get; set; }
        public System.Int32 UsedCount { get; set; }
        public System.String ZoneName { get; set; }
        public System.Guid ZoneUid { get; set; }
        
        // Fabricated constructor
        private Catalog() { }
        public static Catalog CreateTypeInstance()
        {
            return new Catalog();
        }
    }
    
    public enum CatalogKind : int
    {
        ThinCloned = 0,
        SingleImage = 1,
        PowerManaged = 2,
        Unmanaged = 3,
        Pvs = 4,
        Pvd = 5,
        PvsPvd = 6,
    }
    
    public enum CBPVersion : int
    {
        Unknown = 0,
        v1_0 = 100,
        v1_5 = 150,
    }
    
    public enum ColorDepth : int
    {
        FourBit = 0,
        EightBit = 1,
        SixteenBit = 2,
        TwentyFourBit = 3,
    }
    
    public class ConfigurationSlot
    {
        // Constructor
        public ConfigurationSlot(System.String val) { }
        public ConfigurationSlot(System.Int32 val) { }
        public ConfigurationSlot(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Description { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.String SettingsGroup { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private ConfigurationSlot() { }
        public static ConfigurationSlot CreateTypeInstance()
        {
            return new ConfigurationSlot();
        }
    }
    
    public class ConfiguredFTA
    {
        // Constructor
        public ConfiguredFTA(System.Int32 val) { }
        public ConfiguredFTA(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Int32 ApplicationUid { get; set; }
        public System.String ContentType { get; set; }
        public System.String ExtensionName { get; set; }
        public System.String HandlerDescription { get; set; }
        public System.String HandlerName { get; set; }
        public System.String HandlerOpenArguments { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private ConfiguredFTA() { }
        public static ConfiguredFTA CreateTypeInstance()
        {
            return new ConfiguredFTA();
        }
    }
    
    public enum ConnectionFailureReason : int
    {
        None = 0,
        SessionPreparation = 1,
        RegistrationTimeout = 2,
        ConnectionTimeout = 3,
        Licensing = 4,
        Ticketing = 5,
        SessionLimitReached = 6,
        Other = 100,
    }
    
    public class ConnectionLog
    {
        // Constructor
        public ConnectionLog(System.String val) { }
        public ConnectionLog(System.Int64 val) { }
        public ConnectionLog(System.Int32 val) { }
        public ConnectionLog(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.DateTime BrokeringTime { get; set; }
        public System.String BrokeringUserName { get; set; }
        public System.String BrokeringUserUPN { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.ConnectionFailureReason> ConnectionFailureReason { get; set; }
        public System.Nullable<System.Boolean> Disconnected { get; set; }
        public System.Nullable<System.DateTime> EndTime { get; set; }
        public System.Nullable<System.DateTime> EstablishmentTime { get; set; }
        public System.String MachineDNSName { get; set; }
        public System.String MachineName { get; set; }
        public System.Int32 MachineUid { get; set; }
        public System.Int64 Uid { get; set; }
        
        // Fabricated constructor
        private ConnectionLog() { }
        public static ConnectionLog CreateTypeInstance()
        {
            return new ConnectionLog();
        }
    }
    
    public enum ConnectionMode : int
    {
        Brokered = 0,
        Unbrokered = 1,
        ThirdPartyBroker = 2,
        ThirdPartyBrokerWithLicensing = 3,
        LeasedConnection = 4,
        VdaHighAvailabilityMode = 5,
        Undefined = -1,
    }
    
    public class Controller
    {
        // Constructor
        public Controller(System.String val) { }
        public Controller(System.Int32 val) { }
        public Controller(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String[] ActiveSiteServices { get; set; }
        public System.Int32[] AssociatedHypervisorConnectionUids { get; set; }
        public System.String ControllerVersion { get; set; }
        public System.String DNSName { get; set; }
        public System.Int32 DesktopsRegistered { get; set; }
        public System.Nullable<System.DateTime> LastActivityTime { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.LicensingServerEvent> LastLicensingServerEvent { get; set; }
        public System.String[] LastLicensingServerEventDetails { get; set; }
        public System.Nullable<System.DateTime> LastLicensingServerEventTime { get; set; }
        public System.Nullable<System.DateTime> LastStartTime { get; set; }
        public Citrix.Broker.Admin.SDK.LicensingGracePeriodReason[] LicensingGracePeriodReasons { get; set; }
        public System.TimeSpan[] LicensingGracePeriodTimesRemaining { get; set; }
        public Citrix.Broker.Admin.SDK.LicensingGraceState LicensingGraceState { get; set; }
        public Citrix.Broker.Admin.SDK.LicensingServerState LicensingServerState { get; set; }
        public System.String MachineName { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String OSType { get; set; }
        public System.String OSVersion { get; set; }
        public System.String SID { get; set; }
        public Citrix.Broker.Admin.SDK.ControllerState State { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private Controller() { }
        public static Controller CreateTypeInstance()
        {
            return new Controller();
        }
    }
    
    public enum ControllerState : int
    {
        Off = 0,
        Transitioning = 1,
        Active = 2,
        Failed = -1,
    }
    
    public enum CpuPriorityLevel : int
    {
        Low = 0,
        BelowNormal = 1,
        Normal = 2,
        AboveNormal = 3,
        High = 4,
    }
    
    public class DelayedHostingPowerAction
    {
        // Constructor
        public DelayedHostingPowerAction(System.String val) { }
        public DelayedHostingPowerAction(System.Int64 val) { }
        public DelayedHostingPowerAction(System.Int32 val) { }
        public DelayedHostingPowerAction(System.Management.Automation.PSObject obj) { }
        
        // Property
        public Citrix.Broker.Admin.SDK.PowerManagementAction Action { get; set; }
        public System.DateTime ActionDueTime { get; set; }
        public System.String DNSName { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.Int32 HypervisorConnectionUid { get; set; }
        public System.String MachineName { get; set; }
        public System.Int64 Uid { get; set; }
        
        // Fabricated constructor
        private DelayedHostingPowerAction() { }
        public static DelayedHostingPowerAction CreateTypeInstance()
        {
            return new DelayedHostingPowerAction();
        }
    }
    
    public enum DeliveryType : int
    {
        DesktopsOnly = 0,
        AppsOnly = 1,
        DesktopsAndApps = 2,
    }
    
    public enum DeregistrationReason : int
    {
        AgentShutdown = 0,
        AgentSuspended = 1,
        AgentRequested = 2,
        IncompatibleVersion = 100,
        AgentAddressResolutionFailed = 101,
        AgentNotContactable = 102,
        AgentWrongActiveDirectoryOU = 103,
        EmptyRegistrationRequest = 104,
        MissingRegistrationCapabilities = 105,
        MissingAgentVersion = 106,
        InconsistentRegistrationCapabilities = 107,
        NotLicensedForFeature = 108,
        UnsupportedCredentialSecurityVersion = 109,
        InvalidRegistrationRequest = 110,
        SingleMultiSessionMismatch = 111,
        FunctionalLevelTooLowForCatalog = 112,
        FunctionalLevelTooLowForDesktopGroup = 113,
        PowerOff = 200,
        DesktopRestart = 201,
        DesktopRemoved = 202,
        AgentRejectedSettingsUpdate = 203,
        SendSettingsFailure = 204,
        SessionAuditFailure = 205,
        SessionPrepareFailure = 206,
        ContactLost = 207,
        SettingsCreationFailure = 208,
        UnknownError = 300,
        BrokerRegistrationLimitReached = 301,
        RegistrationStateMismatch = 302,
    }
    
    public class Desktop
    {
        // Constructor
        public Desktop(System.String val) { }
        public Desktop(System.Int32 val) { }
        public Desktop(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String AgentVersion { get; set; }
        public System.String[] ApplicationsInUse { get; set; }
        public System.String AssignedClientName { get; set; }
        public System.String AssignedIPAddress { get; set; }
        public System.String[] AssociatedUserFullNames { get; set; }
        public System.String[] AssociatedUserNames { get; set; }
        public System.String[] AssociatedUserUPNs { get; set; }
        public System.Nullable<System.Boolean> AutonomouslyBrokered { get; set; }
        public System.String CatalogName { get; set; }
        public System.Int32 CatalogUid { get; set; }
        public System.String ClientAddress { get; set; }
        public System.String ClientName { get; set; }
        public System.String ClientVersion { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.ColorDepth> ColorDepth { get; set; }
        public System.String ConnectedViaHostName { get; set; }
        public System.String ConnectedViaIP { get; set; }
        public System.String ControllerDNSName { get; set; }
        public System.String DNSName { get; set; }
        public Citrix.Broker.Admin.SDK.DeliveryType DeliveryType { get; set; }
        public System.String Description { get; set; }
        public System.String[] DesktopConditions { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public Citrix.Broker.Admin.SDK.DesktopKind DesktopKind { get; set; }
        public System.String DeviceId { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.FunctionalLevel> FunctionalLevel { get; set; }
        public System.String HardwareId { get; set; }
        public System.String HostedMachineId { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.String HostingServerName { get; set; }
        public System.String HypervisorConnectionName { get; set; }
        public System.Nullable<System.Int32> HypervisorConnectionUid { get; set; }
        public System.String IPAddress { get; set; }
        public System.Nullable<System.Int32> IconUid { get; set; }
        public System.Nullable<System.Boolean> ImageOutOfDate { get; set; }
        public System.Boolean InMaintenanceMode { get; set; }
        public System.Boolean IsAssigned { get; set; }
        public System.Boolean IsPhysical { get; set; }
        public Citrix.Broker.Admin.SDK.ConnectionFailureReason LastConnectionFailure { get; set; }
        public System.Nullable<System.DateTime> LastConnectionTime { get; set; }
        public System.String LastConnectionUser { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.DeregistrationReason> LastDeregistrationReason { get; set; }
        public System.Nullable<System.DateTime> LastDeregistrationTime { get; set; }
        public System.String LastErrorReason { get; set; }
        public System.Nullable<System.DateTime> LastErrorTime { get; set; }
        public System.Nullable<System.DateTime> LastHostingUpdateTime { get; set; }
        public System.String LaunchedViaHostName { get; set; }
        public System.String LaunchedViaIP { get; set; }
        public Citrix.Broker.Admin.SDK.MachineInternalState MachineInternalState { get; set; }
        public System.String MachineName { get; set; }
        public System.Int32 MachineUid { get; set; }
        public System.String OSType { get; set; }
        public System.String OSVersion { get; set; }
        public Citrix.Broker.Admin.SDK.PersistUserChanges PersistUserChanges { get; set; }
        public System.Boolean PowerActionPending { get; set; }
        public Citrix.Broker.Admin.SDK.PowerState PowerState { get; set; }
        public System.String Protocol { get; set; }
        public Citrix.Broker.Admin.SDK.ProvisioningType ProvisioningType { get; set; }
        public System.String[] PublishedApplications { get; set; }
        public System.String PublishedName { get; set; }
        public Citrix.Broker.Admin.SDK.PvdStage PvdStage { get; set; }
        public Citrix.Broker.Admin.SDK.RegistrationState RegistrationState { get; set; }
        public System.String SID { get; set; }
        public System.Nullable<System.Boolean> SecureIcaActive { get; set; }
        public System.Nullable<System.Boolean> SecureIcaRequired { get; set; }
        public System.Nullable<System.Boolean> SessionHidden { get; set; }
        public System.Nullable<System.Int32> SessionId { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.SessionState> SessionState { get; set; }
        public System.Nullable<System.DateTime> SessionStateChangeTime { get; set; }
        public System.Nullable<System.Int64> SessionUid { get; set; }
        public System.String SessionUserName { get; set; }
        public System.String SessionUserSID { get; set; }
        public System.String[] SmartAccessTags { get; set; }
        public System.Nullable<System.DateTime> StartTime { get; set; }
        public Citrix.Broker.Admin.SDK.DesktopSummaryState SummaryState { get; set; }
        public System.String[] Tags { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Boolean WillShutdownAfterUse { get; set; }
        
        // Fabricated constructor
        private Desktop() { }
        public static Desktop CreateTypeInstance()
        {
            return new Desktop();
        }
    }
    
    public class DesktopGroup
    {
        // Constructor
        public DesktopGroup(System.String val) { }
        public DesktopGroup(System.Int32 val) { }
        public DesktopGroup(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Guid[] AppDisks { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.AppDnaAnalysisState> AppDnaAnalysisState { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.AppDnaCompatibility> AppDnaCompatibility { get; set; }
        public System.Boolean AutomaticPowerOnForAssigned { get; set; }
        public System.Boolean AutomaticPowerOnForAssignedDuringPeak { get; set; }
        public Citrix.Broker.Admin.SDK.ColorDepth ColorDepth { get; set; }
        public System.Int32[] ConfigurationSlotUids { get; set; }
        public Citrix.Broker.Admin.SDK.DeliveryType DeliveryType { get; set; }
        public System.String Description { get; set; }
        public Citrix.Broker.Admin.SDK.DesktopKind DesktopKind { get; set; }
        public System.Int32 DesktopsAvailable { get; set; }
        public System.Int32 DesktopsDisconnected { get; set; }
        public System.Int32 DesktopsFaulted { get; set; }
        public System.Int32 DesktopsInUse { get; set; }
        public System.Int32 DesktopsNeverRegistered { get; set; }
        public System.Int32 DesktopsPreparing { get; set; }
        public System.Int32 DesktopsUnregistered { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Int32 IconUid { get; set; }
        public System.Boolean InMaintenanceMode { get; set; }
        public System.Boolean IsRemotePC { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.LicenseModel> LicenseModel { get; set; }
        public System.String[] MachineConfigurationNames { get; set; }
        public System.Int32[] MachineConfigurationUids { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public Citrix.Broker.Admin.SDK.FunctionalLevel MinimumFunctionalLevel { get; set; }
        public System.String Name { get; set; }
        public System.Int32 OffPeakBufferSizePercent { get; set; }
        public Citrix.Broker.Admin.SDK.SessionChangeHostingAction OffPeakDisconnectAction { get; set; }
        public System.Int32 OffPeakDisconnectTimeout { get; set; }
        public Citrix.Broker.Admin.SDK.SessionChangeHostingAction OffPeakExtendedDisconnectAction { get; set; }
        public System.Int32 OffPeakExtendedDisconnectTimeout { get; set; }
        public Citrix.Broker.Admin.SDK.SessionChangeHostingAction OffPeakLogOffAction { get; set; }
        public System.Int32 OffPeakLogOffTimeout { get; set; }
        public System.Int32 PeakBufferSizePercent { get; set; }
        public Citrix.Broker.Admin.SDK.SessionChangeHostingAction PeakDisconnectAction { get; set; }
        public System.Int32 PeakDisconnectTimeout { get; set; }
        public Citrix.Broker.Admin.SDK.SessionChangeHostingAction PeakExtendedDisconnectAction { get; set; }
        public System.Int32 PeakExtendedDisconnectTimeout { get; set; }
        public Citrix.Broker.Admin.SDK.SessionChangeHostingAction PeakLogOffAction { get; set; }
        public System.Int32 PeakLogOffTimeout { get; set; }
        public System.String ProductCode { get; set; }
        public System.String[] ProtocolPriority { get; set; }
        public System.String PublishedName { get; set; }
        public System.Boolean ReuseMachinesWithoutShutdownInOutage { get; set; }
        public Citrix.Broker.Admin.SDK.ScopeReference[] Scopes { get; set; }
        public System.Boolean SecureIcaRequired { get; set; }
        public Citrix.Broker.Admin.SDK.SessionSupport SessionSupport { get; set; }
        public System.Int32 Sessions { get; set; }
        public System.TimeSpan SettlementPeriodBeforeAutoShutdown { get; set; }
        public System.TimeSpan SettlementPeriodBeforeUse { get; set; }
        public System.Boolean ShutdownDesktopsAfterUse { get; set; }
        public System.String[] Tags { get; set; }
        public System.Nullable<System.Guid> TenantId { get; set; }
        public System.String TimeZone { get; set; }
        public System.Int32 TotalApplicationGroups { get; set; }
        public System.Int32 TotalApplications { get; set; }
        public System.Int32 TotalDesktops { get; set; }
        public System.Boolean TurnOnAddedMachine { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        public Citrix.Broker.Admin.SDK.ZonePreference[] ZonePreferences { get; set; }
        
        // Fabricated constructor
        private DesktopGroup() { }
        public static DesktopGroup CreateTypeInstance()
        {
            return new DesktopGroup();
        }
    }
    
    public class DesktopGroupAppDisk
    {
        // Constructor
        public DesktopGroupAppDisk() { }
        
        // Property
        public System.Guid AppDiskUid { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.AppDnaCompatibility> AppDnaCompatibility { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        
    }
    
    public class DesktopGroupWebhook
    {
        // Constructor
        public DesktopGroupWebhook(System.Int32 val) { }
        public DesktopGroupWebhook(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Address { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public Citrix.Broker.Admin.SDK.WebhookTrigger OnEvent { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private DesktopGroupWebhook() { }
        public static DesktopGroupWebhook CreateTypeInstance()
        {
            return new DesktopGroupWebhook();
        }
    }
    
    public enum DesktopKind : int
    {
        Private = 0,
        Shared = 1,
    }
    
    public enum DesktopSummaryState : int
    {
        Off = 0,
        Unregistered = 1,
        Available = 2,
        Disconnected = 3,
        InUse = 4,
        Preparing = 5,
    }
    
    public class DesktopUsage
    {
        // Constructor
        public DesktopUsage() { }
        
        // Property
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Int32 InUse { get; set; }
        public System.DateTime Timestamp { get; set; }
        
    }
    
    public class EntitlementPolicyRule
    {
        // Constructor
        public EntitlementPolicyRule(System.String val) { }
        public EntitlementPolicyRule(System.Int32 val) { }
        public EntitlementPolicyRule(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String BrowserName { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.ColorDepth> ColorDepth { get; set; }
        public System.String Description { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Boolean ExcludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] ExcludedUsers { get; set; }
        public System.Nullable<System.Int32> IconUid { get; set; }
        public System.Boolean IncludedUserFilterEnabled { get; set; }
        public Citrix.Broker.Admin.SDK.User[] IncludedUsers { get; set; }
        public Citrix.Broker.Admin.SDK.LeasingBehavior LeasingBehavior { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.String PublishedName { get; set; }
        public System.String RestrictToTag { get; set; }
        public System.Nullable<System.Boolean> SecureIcaRequired { get; set; }
        public Citrix.Broker.Admin.SDK.SessionReconnection SessionReconnection { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private EntitlementPolicyRule() { }
        public static EntitlementPolicyRule CreateTypeInstance()
        {
            return new EntitlementPolicyRule();
        }
    }
    
    public enum FunctionalLevel : int
    {
        L5 = 0,
        LMIN = 0,
        L7 = 1,
        L7_6 = 2,
        L7_7 = 3,
        L7_8 = 4,
        L7_9 = 5,
        LMAX = 5,
    }
    
    public class GroupInfo
    {
        // Constructor
        public GroupInfo() { }
        
        // Property
        public System.Int32 Count { get; set; }
        public System.String Name { get; set; }
        
    }
    
    public class HostingPowerAction
    {
        // Constructor
        public HostingPowerAction(System.String val) { }
        public HostingPowerAction(System.Int64 val) { }
        public HostingPowerAction(System.Int32 val) { }
        public HostingPowerAction(System.Management.Automation.PSObject obj) { }
        
        // Property
        public Citrix.Broker.Admin.SDK.PowerManagementAction Action { get; set; }
        public System.Nullable<System.DateTime> ActionCompletionTime { get; set; }
        public System.Nullable<System.DateTime> ActionStartTime { get; set; }
        public System.Int32 ActualPriority { get; set; }
        public System.Int32 BasePriority { get; set; }
        public System.String DNSName { get; set; }
        public System.String FailureReason { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.Int32 HypervisorConnectionUid { get; set; }
        public System.String MachineName { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.DateTime RequestTime { get; set; }
        public Citrix.Broker.Admin.SDK.PowerActionState State { get; set; }
        public System.Int64 Uid { get; set; }
        
        // Fabricated constructor
        private HostingPowerAction() { }
        public static HostingPowerAction CreateTypeInstance()
        {
            return new HostingPowerAction();
        }
    }
    
    public class HypervisorAlert
    {
        // Constructor
        public HypervisorAlert(System.Int64 val) { }
        public HypervisorAlert(System.Int32 val) { }
        public HypervisorAlert(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String HostingServerName { get; set; }
        public System.Int32 HypervisorConnectionUid { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public Citrix.Broker.Admin.SDK.AlertMetric Metric { get; set; }
        public Citrix.Broker.Admin.SDK.AlertSeverity Severity { get; set; }
        public System.DateTime Time { get; set; }
        public System.Nullable<System.TimeSpan> TriggerInterval { get; set; }
        public System.Nullable<System.Double> TriggerLevel { get; set; }
        public System.Nullable<System.TimeSpan> TriggerPeriod { get; set; }
        public System.Nullable<System.Double> TriggerValue { get; set; }
        public System.Int64 Uid { get; set; }
        
        // Fabricated constructor
        private HypervisorAlert() { }
        public static HypervisorAlert CreateTypeInstance()
        {
            return new HypervisorAlert();
        }
    }
    
    public class HypervisorConnection
    {
        // Constructor
        public HypervisorConnection(System.String val) { }
        public HypervisorConnection(System.Int32 val) { }
        public HypervisorConnection(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String[] Capabilities { get; set; }
        public System.Nullable<System.Boolean> ExplicitPreferredController { get; set; }
        public System.Guid HypHypervisorConnectionUid { get; set; }
        public System.Boolean IsReady { get; set; }
        public System.Int32 MachineCount { get; set; }
        public System.Nullable<System.Int32> MaxAbsoluteActiveActions { get; set; }
        public System.Nullable<System.Int32> MaxAbsoluteNewActionsPerMinute { get; set; }
        public System.Nullable<System.Int32> MaxAbsolutePvdPowerActions { get; set; }
        public System.Nullable<System.Int32> MaxPercentageActiveActions { get; set; }
        public System.Nullable<System.Int32> MaxPvdPowerActionsPercentageOfDesktops { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.String PreferredController { get; set; }
        public Citrix.Broker.Admin.SDK.HypervisorConnectionState State { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private HypervisorConnection() { }
        public static HypervisorConnection CreateTypeInstance()
        {
            return new HypervisorConnection();
        }
    }
    
    public enum HypervisorConnectionState : int
    {
        InMaintenanceMode = 0,
        On = 1,
        Unavailable = -1,
    }
    
    public class Icon
    {
        // Constructor
        public Icon(System.Int32 val) { }
        public Icon(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String EncodedIconData { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private Icon() { }
        public static Icon CreateTypeInstance()
        {
            return new Icon();
        }
    }
    
    public class ImportedFTA
    {
        // Constructor
        public ImportedFTA(System.String val) { }
        public ImportedFTA(System.Int32 val) { }
        public ImportedFTA(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String ContentType { get; set; }
        public System.String Description { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.String Edit { get; set; }
        public System.String EditArguments { get; set; }
        public System.String EditExecutableName { get; set; }
        public System.String ExtensionName { get; set; }
        public System.String HandlerName { get; set; }
        public System.String Open { get; set; }
        public System.String OpenArguments { get; set; }
        public System.String OpenExecutableName { get; set; }
        public System.String PerceivedType { get; set; }
        public System.String Print { get; set; }
        public System.String PrintTo { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private ImportedFTA() { }
        public static ImportedFTA CreateTypeInstance()
        {
            return new ImportedFTA();
        }
    }
    
    public class IPAddressRange
    {
        // Constructor
        public IPAddressRange() { }
        public IPAddressRange(System.String ipAddressWithMask) { }
        
        // Property
        public System.String IP { get; set; }
        public System.Int32 SubnetMask { get; set; }
        
    }
    
    public class Lease
    {
        // Constructor
        public Lease(System.String val) { }
        public Lease(System.Int64 val) { }
        public Lease(System.Int32 val) { }
        public Lease(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.DateTime Expiration { get; set; }
        public System.String Key { get; set; }
        public System.DateTime LastModified { get; set; }
        public Citrix.Broker.Admin.SDK.BrokerLeaseType LeaseType { get; set; }
        public System.String OwnerSAMName { get; set; }
        public System.String OwnerSID { get; set; }
        public System.String OwnerUPN { get; set; }
        public System.Int64 Uid { get; set; }
        public System.String Value { get; set; }
        public System.String ZoneName { get; set; }
        public System.Nullable<System.Guid> ZoneUid { get; set; }
        
        // Fabricated constructor
        private Lease() { }
        public static Lease CreateTypeInstance()
        {
            return new Lease();
        }
    }
    
    public enum LeasingBehavior : int
    {
        Allowed = 0,
        Disallowed = 1,
    }
    
    public enum LicenseModel : int
    {
        Concurrent = 0,
        UserDevice = 1,
    }
    
    public enum LicensingGracePeriodReason : int
    {
        OutOfBox = 0,
        ServerUnavailable = 1,
        LicensesExhausted = 2,
        Unknown = -1,
    }
    
    public enum LicensingGraceState : int
    {
        NotActive = 0,
        Active = 1,
        Expired = 2,
    }
    
    public enum LicensingServerEvent : int
    {
        ServerOK = 0,
        IncompleteConfiguration = 1,
        ServerIncompatible = 2,
        StartupLicenseNotInstalled = 3,
        ProductLicenseNotInstalled = 4,
        OverdraftGranted = 5,
        LicenseExpired = 6,
        OutOfBoxGracePeriodEntered = 7,
        SupplementalGracePeriodEntered = 8,
        EmergencyGracePeriodEntered = 9,
        OutOfBoxGracePeriodExpired = 10,
        SupplementalGracePeriodExpired = 11,
        EmergencyGracePeriodExpired = 12,
        InitializationError = 13,
        ReinitializationError = 14,
        ShutdownError = 15,
        LicenseAvailabilityCheckError = 16,
        NotificationProfileReadError = 17,
        NoLicenseAvailable = 18,
        CheckoutFailed = 19,
        CheckinFailed = 20,
    }
    
    public enum LicensingServerState : int
    {
        IncompleteConfiguration = 0,
        NotConnected = 1,
        OK = 2,
        StartupLicenseNotInstalled = 3,
        Incompatible = 4,
        Failed = 5,
    }
    
    public class Machine
    {
        // Constructor
        public Machine(System.String val) { }
        public Machine(System.Int32 val) { }
        public Machine(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String AgentVersion { get; set; }
        public Citrix.Broker.Admin.SDK.AllocationType AllocationType { get; set; }
        public System.String[] ApplicationsInUse { get; set; }
        public System.String AssignedClientName { get; set; }
        public System.String AssignedIPAddress { get; set; }
        public System.String[] AssignedUserSIDs { get; set; }
        public System.Nullable<System.Guid> AssociatedTenantId { get; set; }
        public System.String[] AssociatedUserFullNames { get; set; }
        public System.String[] AssociatedUserNames { get; set; }
        public System.String[] AssociatedUserSIDs { get; set; }
        public System.String[] AssociatedUserUPNs { get; set; }
        public System.String BrowserName { get; set; }
        public System.String[] Capabilities { get; set; }
        public System.String CatalogName { get; set; }
        public System.Guid CatalogUUID { get; set; }
        public System.Int32 CatalogUid { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.CBPVersion> CbpVersion { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.ColorDepth> ColorDepth { get; set; }
        public System.String ControllerDNSName { get; set; }
        public System.String DNSName { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.DeliveryType> DeliveryType { get; set; }
        public System.String Description { get; set; }
        public System.String[] DesktopConditions { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Nullable<System.Guid> DesktopGroupUUID { get; set; }
        public System.Nullable<System.Int32> DesktopGroupUid { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.DesktopKind> DesktopKind { get; set; }
        public System.Nullable<System.Int32> DesktopUid { get; set; }
        public Citrix.Broker.Admin.SDK.MachineFaultState FaultState { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.FunctionalLevel> FunctionalLevel { get; set; }
        public System.String HostedMachineId { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.String HostingServerName { get; set; }
        public System.Nullable<System.Guid> HypHypervisorConnectionUid { get; set; }
        public System.String HypervisorConnectionName { get; set; }
        public System.Nullable<System.Int32> HypervisorConnectionUid { get; set; }
        public System.String IPAddress { get; set; }
        public System.Nullable<System.Int32> IconUid { get; set; }
        public System.Nullable<System.Boolean> ImageOutOfDate { get; set; }
        public System.Boolean InMaintenanceMode { get; set; }
        public System.Boolean IsAssigned { get; set; }
        public System.Boolean IsPhysical { get; set; }
        public System.Boolean IsReserved { get; set; }
        public Citrix.Broker.Admin.SDK.ConnectionFailureReason LastConnectionFailure { get; set; }
        public System.Nullable<System.DateTime> LastConnectionTime { get; set; }
        public System.String LastConnectionUser { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.DeregistrationReason> LastDeregistrationReason { get; set; }
        public System.Nullable<System.DateTime> LastDeregistrationTime { get; set; }
        public System.String LastErrorReason { get; set; }
        public System.Nullable<System.DateTime> LastErrorTime { get; set; }
        public System.Nullable<System.DateTime> LastHostingUpdateTime { get; set; }
        public System.String LastPvdErrorReason { get; set; }
        public System.Nullable<System.DateTime> LastPvdErrorTime { get; set; }
        public System.Nullable<System.Int32> LoadIndex { get; set; }
        public System.String[] LoadIndexes { get; set; }
        public Citrix.Broker.Admin.SDK.MachineInternalState MachineInternalState { get; set; }
        public System.String MachineName { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String OSType { get; set; }
        public System.String OSVersion { get; set; }
        public Citrix.Broker.Admin.SDK.PersistUserChanges PersistUserChanges { get; set; }
        public System.Boolean PowerActionPending { get; set; }
        public Citrix.Broker.Admin.SDK.PowerState PowerState { get; set; }
        public Citrix.Broker.Admin.SDK.ProvisioningType ProvisioningType { get; set; }
        public System.String[] PublishedApplications { get; set; }
        public System.String PublishedName { get; set; }
        public System.Nullable<System.DateTime> PvdEstimatedCompletionTime { get; set; }
        public System.Nullable<System.Int32> PvdPercentDone { get; set; }
        public Citrix.Broker.Admin.SDK.PvdStage PvdStage { get; set; }
        public System.Nullable<System.DateTime> PvdUpdateStartTime { get; set; }
        public Citrix.Broker.Admin.SDK.RegistrationState RegistrationState { get; set; }
        public System.String SID { get; set; }
        public Citrix.Broker.Admin.SDK.ScheduledReboot ScheduledReboot { get; set; }
        public System.Nullable<System.Boolean> SecureIcaRequired { get; set; }
        public System.Nullable<System.Boolean> SessionAutonomouslyBrokered { get; set; }
        public System.String SessionClientAddress { get; set; }
        public System.String SessionClientName { get; set; }
        public System.String SessionClientVersion { get; set; }
        public System.String SessionConnectedViaHostName { get; set; }
        public System.String SessionConnectedViaIP { get; set; }
        public System.Int32 SessionCount { get; set; }
        public System.String SessionDeviceId { get; set; }
        public System.String SessionHardwareId { get; set; }
        public System.Nullable<System.Boolean> SessionHidden { get; set; }
        public System.Nullable<System.Guid> SessionKey { get; set; }
        public System.String SessionLaunchedViaHostName { get; set; }
        public System.String SessionLaunchedViaIP { get; set; }
        public System.String SessionProtocol { get; set; }
        public System.Nullable<System.Boolean> SessionSecureIcaActive { get; set; }
        public System.String[] SessionSmartAccessTags { get; set; }
        public System.Nullable<System.DateTime> SessionStartTime { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.SessionState> SessionState { get; set; }
        public System.Nullable<System.DateTime> SessionStateChangeTime { get; set; }
        public Citrix.Broker.Admin.SDK.SessionSupport SessionSupport { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.SessionType> SessionType { get; set; }
        public System.Nullable<System.Int64> SessionUid { get; set; }
        public System.String SessionUserName { get; set; }
        public System.String SessionUserSID { get; set; }
        public System.Int32 SessionsEstablished { get; set; }
        public System.Int32 SessionsPending { get; set; }
        public Citrix.Broker.Admin.SDK.DesktopSummaryState SummaryState { get; set; }
        public System.String[] SupportedPowerActions { get; set; }
        public System.String[] Tags { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        public Citrix.Broker.Admin.SDK.VMToolsState VMToolsState { get; set; }
        public System.Boolean WillShutdownAfterUse { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.WindowsConnectionSetting> WindowsConnectionSetting { get; set; }
        public System.String ZoneName { get; set; }
        public System.Guid ZoneUid { get; set; }
        
        // Fabricated constructor
        private Machine() { }
        public static Machine CreateTypeInstance()
        {
            return new Machine();
        }
    }
    
    public class MachineCommand
    {
        // Constructor
        public MachineCommand(System.Int64 val) { }
        public MachineCommand(System.Int32 val) { }
        public MachineCommand(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Category { get; set; }
        public System.Byte[] CommandData { get; set; }
        public System.String CommandName { get; set; }
        public System.Nullable<System.DateTime> CompletionTime { get; set; }
        public System.String[] DesktopGroupNames { get; set; }
        public System.String MachineName { get; set; }
        public System.Nullable<System.Int32> MachineUid { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.DateTime RequestTime { get; set; }
        public System.TimeSpan SendDeadline { get; set; }
        public System.Nullable<System.DateTime> SendDeadlineTime { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.MachineCommandTrigger> SendTrigger { get; set; }
        public System.Nullable<System.Int64> SessionUid { get; set; }
        public Citrix.Broker.Admin.SDK.MachineCommandState State { get; set; }
        public System.Boolean Synchronous { get; set; }
        public System.Int64 Uid { get; set; }
        public System.String User { get; set; }
        
        // Fabricated constructor
        private MachineCommand() { }
        public static MachineCommand CreateTypeInstance()
        {
            return new MachineCommand();
        }
    }
    
    public enum MachineCommandState : int
    {
        Pending = 0,
        Sent = 1,
        Failed = 2,
        Canceled = 3,
        Expired = 4,
    }
    
    public enum MachineCommandTrigger : int
    {
        NextContact = 0,
        Broker = 1,
        LogOn = 2,
        Logoff = 3,
        Disconnect = 4,
        Reconnect = 5,
    }
    
    public class MachineConfiguration
    {
        // Constructor
        public MachineConfiguration(System.String val) { }
        public MachineConfiguration(System.Int32 val) { }
        public MachineConfiguration(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Int32[] ApplicationUids { get; set; }
        public System.Int32 ConfigurationSlotUid { get; set; }
        public System.String Description { get; set; }
        public System.Int32[] DesktopGroupUids { get; set; }
        public System.String LeafName { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Byte[] Policy { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private MachineConfiguration() { }
        public static MachineConfiguration CreateTypeInstance()
        {
            return new MachineConfiguration();
        }
    }
    
    public enum MachineFaultState : int
    {
        None = 0,
        FailedToStart = 1,
        StuckOnBoot = 2,
        Unregistered = 3,
        MaxCapacity = 4,
    }
    
    public enum MachineInternalState : int
    {
        Available = 0,
        Unavailable = 1,
        FullCapacity = 2,
        Pending = 3,
        Unregistered = -3,
        SoftRegistered = -2,
        Unknown = -1,
    }
    
    public class Metadata
    {
        public bool IsSecondaryStubType = true;
        
        public Metadata() { }
    }
    
    public class NameAvailability
    {
        // Constructor
        public NameAvailability() { }
        
        // Property
        public System.String Name { get; set; }
        public System.Boolean Available { get; set; }
        
    }
    
    public enum PersistUserChanges : int
    {
        OnLocal = 0,
        Discard = 1,
        OnPvd = 2,
    }
    
    public enum PowerActionState : int
    {
        Pending = 0,
        Started = 1,
        Completed = 2,
        Failed = 3,
        Canceled = 4,
        Deleted = 5,
        Lost = 6,
    }
    
    public enum PowerManagementAction : int
    {
        TurnOn = 0,
        TurnOff = 1,
        Shutdown = 2,
        Reset = 3,
        Restart = 4,
        Suspend = 5,
        Resume = 6,
    }
    
    public enum PowerState : int
    {
        Unmanaged = 0,
        Unknown = 1,
        Unavailable = 2,
        Off = 3,
        On = 4,
        Suspended = 5,
        TurningOn = 6,
        TurningOff = 7,
        Suspending = 8,
        Resuming = 9,
        NotSupported = 10,
    }
    
    public class PowerTimeScheme
    {
        // Constructor
        public PowerTimeScheme(System.String val) { }
        public PowerTimeScheme(System.Int32 val) { }
        public PowerTimeScheme(System.Management.Automation.PSObject obj) { }
        
        // Property
        public Citrix.Broker.Admin.SDK.TimeSchemeDays DaysOfWeek { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.String DisplayName { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Boolean[] PeakHours { get; set; }
        public System.Int32[] PoolSize { get; set; }
        public System.Nullable<System.Boolean> PoolUsingPercentage { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private PowerTimeScheme() { }
        public static PowerTimeScheme CreateTypeInstance()
        {
            return new PowerTimeScheme();
        }
    }
    
    public class PrivateDesktop
    {
        // Constructor
        public PrivateDesktop(System.String val) { }
        public PrivateDesktop(System.Int32 val) { }
        public PrivateDesktop(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String AgentVersion { get; set; }
        public System.String AssignedClientName { get; set; }
        public System.String AssignedIPAddress { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.ColorDepth> ColorDepth { get; set; }
        public System.String ControllerDNSName { get; set; }
        public System.String DNSName { get; set; }
        public System.String Description { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.String HostedMachineId { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.String HostingServerName { get; set; }
        public System.Nullable<System.Int32> HypervisorConnectionUid { get; set; }
        public System.String IPAddress { get; set; }
        public System.Nullable<System.Int32> IconUid { get; set; }
        public System.Boolean InMaintenanceMode { get; set; }
        public System.Boolean IsAssigned { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.DeregistrationReason> LastDeregistrationReason { get; set; }
        public System.Nullable<System.DateTime> LastDeregistrationTime { get; set; }
        public System.Nullable<System.DateTime> LastHostingUpdateTime { get; set; }
        public System.String MachineName { get; set; }
        public System.String OSType { get; set; }
        public System.String OSVersion { get; set; }
        public Citrix.Broker.Admin.SDK.PowerState PowerState { get; set; }
        public System.String PublishedName { get; set; }
        public Citrix.Broker.Admin.SDK.RegistrationState RegistrationState { get; set; }
        public System.String SID { get; set; }
        public System.Nullable<System.Boolean> SecureIcaRequired { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Boolean WillShutdownAfterUse { get; set; }
        
        // Fabricated constructor
        private PrivateDesktop() { }
        public static PrivateDesktop CreateTypeInstance()
        {
            return new PrivateDesktop();
        }
    }
    
    public enum ProvisioningType : int
    {
        Manual = 0,
        PVS = 1,
        MCS = 2,
    }
    
    public enum PvdStage : int
    {
        None = 0,
        Requested = 1,
        Starting = 2,
        Working = 3,
        Failed = -1,
    }
    
    public class RebootCycle
    {
        // Constructor
        public RebootCycle(System.Int64 val) { }
        public RebootCycle(System.Int32 val) { }
        public RebootCycle(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String CatalogName { get; set; }
        public System.Nullable<System.Int32> CatalogUid { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Nullable<System.DateTime> EndTime { get; set; }
        public System.Int32 MachinesCompleted { get; set; }
        public System.Int32 MachinesFailed { get; set; }
        public System.Int32 MachinesInProgress { get; set; }
        public System.Int32 MachinesPending { get; set; }
        public System.Int32 MachinesSkipped { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.Int32 RebootDuration { get; set; }
        public System.String RebootScheduleName { get; set; }
        public System.Nullable<System.Int32> RebootScheduleUid { get; set; }
        public System.String RestrictToTag { get; set; }
        public System.DateTime StartTime { get; set; }
        public Citrix.Broker.Admin.SDK.RebootCycleState State { get; set; }
        public System.Int64 Uid { get; set; }
        public System.Int32 WarningDuration { get; set; }
        public System.String WarningMessage { get; set; }
        public System.Int32 WarningRepeatInterval { get; set; }
        public System.String WarningTitle { get; set; }
        
        // Fabricated constructor
        private RebootCycle() { }
        public static RebootCycle CreateTypeInstance()
        {
            return new RebootCycle();
        }
    }
    
    public enum RebootCycleState : int
    {
        Initializing = 0,
        Active = 1,
        Completed = 2,
        PendingCancel = 3,
        Canceled = 4,
        Abandoned = 5,
    }
    
    public class RebootSchedule
    {
        // Constructor
        public RebootSchedule(System.String val) { }
        public RebootSchedule(System.Int32 val) { }
        public RebootSchedule(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Boolean Active { get; set; }
        public Citrix.Broker.Admin.SDK.RebootScheduleDays Day { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public Citrix.Broker.Admin.SDK.RebootScheduleFrequency Frequency { get; set; }
        public System.Int32 RebootDuration { get; set; }
        public System.TimeSpan StartTime { get; set; }
        public System.Int32 WarningDuration { get; set; }
        public System.String WarningMessage { get; set; }
        public System.Int32 WarningRepeatInterval { get; set; }
        public System.String WarningTitle { get; set; }
        
        // Fabricated constructor
        private RebootSchedule() { }
        public static RebootSchedule CreateTypeInstance()
        {
            return new RebootSchedule();
        }
    }
    
    [System.Flags]
    public enum RebootScheduleDays : int
    {
        Sunday = 1,
        Monday = 2,
        Tuesday = 4,
        Wednesday = 8,
        Thursday = 16,
        Friday = 32,
        Saturday = 64,
    }
    
    public enum RebootScheduleFrequency : int
    {
        Daily = 0,
        Weekly = 1,
    }
    
    public class RebootScheduleV2
    {
        // Constructor
        public RebootScheduleV2(System.String val) { }
        public RebootScheduleV2(System.Int32 val) { }
        public RebootScheduleV2(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Boolean Active { get; set; }
        public Citrix.Broker.Admin.SDK.RebootScheduleDays Day { get; set; }
        public System.String Description { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public Citrix.Broker.Admin.SDK.RebootScheduleFrequency Frequency { get; set; }
        public System.String[] MetadataKeys { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Int32 RebootDuration { get; set; }
        public System.String RestrictToTag { get; set; }
        public System.TimeSpan StartTime { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Int32 WarningDuration { get; set; }
        public System.String WarningMessage { get; set; }
        public System.Int32 WarningRepeatInterval { get; set; }
        public System.String WarningTitle { get; set; }
        
        // Fabricated constructor
        private RebootScheduleV2() { }
        public static RebootScheduleV2 CreateTypeInstance()
        {
            return new RebootScheduleV2();
        }
    }
    
    public enum RegistrationState : int
    {
        Unregistered = 0,
        Initializing = 1,
        Registered = 2,
        AgentError = 3,
    }
    
    public class RemotePCAccount
    {
        // Constructor
        public RemotePCAccount(System.Int32 val) { }
        public RemotePCAccount(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.Boolean AllowSubfolderMatches { get; set; }
        public System.Int32 CatalogUid { get; set; }
        public System.String[] MachinesExcluded { get; set; }
        public System.String[] MachinesIncluded { get; set; }
        public System.String OU { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private RemotePCAccount() { }
        public static RemotePCAccount CreateTypeInstance()
        {
            return new RemotePCAccount();
        }
    }
    
    public enum ScheduledReboot : int
    {
        None = 0,
        Pending = 1,
        Draining = 2,
        InProgress = 3,
        Natural = 4,
    }
    
    public class Scope
    {
        // Constructor
        public Scope(System.String val) { }
        public Scope(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String ScopeNameOrId { get; set; }
        
        // Fabricated constructor
        private Scope() { }
        public static Scope CreateTypeInstance()
        {
            return new Scope();
        }
    }
    
    public class ScopedObject
    {
        // Constructor
        public ScopedObject(System.Nullable<System.Guid> val) { }
        public ScopedObject(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Description { get; set; }
        public System.String ObjectId { get; set; }
        public System.String ObjectName { get; set; }
        public Citrix.Broker.Admin.SDK.ScopedObjectType ObjectType { get; set; }
        public System.Nullable<System.Guid> ScopeId { get; set; }
        public System.String ScopeName { get; set; }
        
        // Fabricated constructor
        private ScopedObject() { }
        public static ScopedObject CreateTypeInstance()
        {
            return new ScopedObject();
        }
    }
    
    public enum ScopedObjectType : int
    {
        DesktopGroup = 0,
        Catalog = 1,
        ApplicationGroup = 2,
    }
    
    public class ScopeReference
    {
        public bool IsSecondaryStubType = true;
        
        public ScopeReference() { }
    }
    
    public enum SendMessageStyle : int
    {
        Critical = 0,
        Question = 1,
        Exclamation = 2,
        Information = 3,
    }
    
    public class ServiceInstance
    {
        // Constructor
        public ServiceInstance() { }
        
        // Property
        public System.String Address { get; set; }
        public System.String Binding { get; set; }
        public System.String InterfaceType { get; set; }
        public Citrix.Broker.Admin.SDK.Metadata[] Metadata { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String ServiceAccount { get; set; }
        public System.String ServiceAccountSid { get; set; }
        public System.String ServiceGroupName { get; set; }
        public System.Guid ServiceGroupUid { get; set; }
        public System.Guid ServiceInstanceUid { get; set; }
        public System.String ServiceType { get; set; }
        public System.Int32 Version { get; set; }
        
    }
    
    public class Session
    {
        // Constructor
        public Session(System.Guid val) { }
        public Session(System.Int64 val) { }
        public Session(System.Int32 val) { }
        public Session(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String AgentVersion { get; set; }
        public System.String AnonymousUserId { get; set; }
        public Citrix.Broker.Admin.SDK.SessionAppState AppState { get; set; }
        public System.Nullable<System.DateTime> AppStateLastChangeTime { get; set; }
        public System.String[] ApplicationsInUse { get; set; }
        public System.Boolean AutonomouslyBrokered { get; set; }
        public System.Nullable<System.Int32> BrokeringDuration { get; set; }
        public System.Nullable<System.DateTime> BrokeringTime { get; set; }
        public System.String BrokeringUserName { get; set; }
        public System.String BrokeringUserSID { get; set; }
        public System.String CatalogName { get; set; }
        public System.String ClientAddress { get; set; }
        public System.String ClientName { get; set; }
        public System.String ClientPlatform { get; set; }
        public System.Nullable<System.Int32> ClientProductId { get; set; }
        public System.String ClientVersion { get; set; }
        public System.String ConnectedViaHostName { get; set; }
        public System.String ConnectedViaIP { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.ConnectionMode> ConnectionMode { get; set; }
        public System.String ControllerDNSName { get; set; }
        public System.String DNSName { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public Citrix.Broker.Admin.SDK.DesktopKind DesktopKind { get; set; }
        public System.String DesktopSID { get; set; }
        public System.Int32 DesktopUid { get; set; }
        public System.String DeviceId { get; set; }
        public System.Nullable<System.Int32> EntitlementPolicyRuleUid { get; set; }
        public System.Nullable<System.Int32> EstablishmentDuration { get; set; }
        public System.Nullable<System.DateTime> EstablishmentTime { get; set; }
        public System.String HardwareId { get; set; }
        public System.Boolean Hidden { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.String HostingServerName { get; set; }
        public System.String HypervisorConnectionName { get; set; }
        public System.String IPAddress { get; set; }
        public System.Nullable<System.TimeSpan> IdleDuration { get; set; }
        public System.Nullable<System.DateTime> IdleSince { get; set; }
        public System.Nullable<System.Boolean> ImageOutOfDate { get; set; }
        public System.Boolean InMaintenanceMode { get; set; }
        public System.Boolean IsAnonymousUser { get; set; }
        public System.Boolean IsPhysical { get; set; }
        public System.String LaunchedViaHostName { get; set; }
        public System.String LaunchedViaIP { get; set; }
        public System.String LaunchedViaPublishedName { get; set; }
        public System.Boolean LogoffInProgress { get; set; }
        public System.Boolean LogonInProgress { get; set; }
        public System.String MachineName { get; set; }
        public Citrix.Broker.Admin.SDK.DesktopSummaryState MachineSummaryState { get; set; }
        public System.Int32 MachineUid { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String OSType { get; set; }
        public Citrix.Broker.Admin.SDK.PersistUserChanges PersistUserChanges { get; set; }
        public Citrix.Broker.Admin.SDK.PowerState PowerState { get; set; }
        public System.String PreferredZoneName { get; set; }
        public System.Nullable<System.Guid> PreferredZoneUid { get; set; }
        public System.String Protocol { get; set; }
        public Citrix.Broker.Admin.SDK.ProvisioningType ProvisioningType { get; set; }
        public System.String ReceiverIPAddress { get; set; }
        public System.String ReceiverName { get; set; }
        public System.Nullable<System.Boolean> SecureIcaActive { get; set; }
        public System.Int32 SessionId { get; set; }
        public System.Guid SessionKey { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.SessionReconnection> SessionReconnection { get; set; }
        public Citrix.Broker.Admin.SDK.SessionState SessionState { get; set; }
        public System.DateTime SessionStateChangeTime { get; set; }
        public Citrix.Broker.Admin.SDK.SessionSupport SessionSupport { get; set; }
        public Citrix.Broker.Admin.SDK.SessionType SessionType { get; set; }
        public System.String[] SmartAccessTags { get; set; }
        public System.Nullable<System.DateTime> StartTime { get; set; }
        public System.Nullable<System.Guid> TenantId { get; set; }
        public System.Int64 Uid { get; set; }
        public System.String UntrustedUserName { get; set; }
        public System.String UserFullName { get; set; }
        public System.String UserName { get; set; }
        public System.String UserSID { get; set; }
        public System.String UserUPN { get; set; }
        public System.String ZoneName { get; set; }
        public System.Guid ZoneUid { get; set; }
        
        // Fabricated constructor
        private Session() { }
        public static Session CreateTypeInstance()
        {
            return new Session();
        }
    }
    
    public enum SessionAppState : int
    {
        PreLogon = 0,
        PreLaunched = 1,
        Active = 2,
        Desktop = 3,
        Lingering = 4,
        NoApps = 5,
    }
    
    public enum SessionChangeHostingAction : int
    {
        Nothing = 0,
        Suspend = 1,
        Shutdown = 2,
    }
    
    public class SessionLinger
    {
        // Constructor
        public SessionLinger(System.String val) { }
        public SessionLinger(System.Int32 val) { }
        public SessionLinger(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String[] AssociatedUserFullNames { get; set; }
        public System.String[] AssociatedUserNames { get; set; }
        public System.String[] AssociatedUserUPNs { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Int32 MaxAverageLoadThreshold { get; set; }
        public System.Int32 MaxLoadPerMachineThreshold { get; set; }
        public System.TimeSpan MaxTimeBeforeDisconnect { get; set; }
        public System.TimeSpan MaxTimeBeforeTerminate { get; set; }
        public System.Boolean UserFilterEnabled { get; set; }
        
        // Fabricated constructor
        private SessionLinger() { }
        public static SessionLinger CreateTypeInstance()
        {
            return new SessionLinger();
        }
    }
    
    public class SessionPreLaunch
    {
        // Constructor
        public SessionPreLaunch(System.String val) { }
        public SessionPreLaunch(System.Int32 val) { }
        public SessionPreLaunch(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String[] AssociatedUserFullNames { get; set; }
        public System.String[] AssociatedUserNames { get; set; }
        public System.String[] AssociatedUserUPNs { get; set; }
        public System.String DesktopGroupName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.Int32 MaxAverageLoadThreshold { get; set; }
        public System.Int32 MaxLoadPerMachineThreshold { get; set; }
        public System.TimeSpan MaxTimeBeforeDisconnect { get; set; }
        public System.TimeSpan MaxTimeBeforeTerminate { get; set; }
        public System.Boolean UserFilterEnabled { get; set; }
        
        // Fabricated constructor
        private SessionPreLaunch() { }
        public static SessionPreLaunch CreateTypeInstance()
        {
            return new SessionPreLaunch();
        }
    }
    
    public enum SessionReconnection : int
    {
        Always = 0,
        DisconnectedOnly = 1,
        SameEndpointOnly = 2,
    }
    
    public enum SessionState : int
    {
        PreparingSession = 0,
        Connected = 1,
        Active = 2,
        Disconnected = 3,
        Reconnecting = 4,
        NonBrokeredSession = 5,
        Unknown = 6,
        Other = -1,
    }
    
    public enum SessionSupport : int
    {
        SingleSession = 0,
        MultiSession = 1,
    }
    
    public enum SessionType : int
    {
        Desktop = 0,
        Application = 1,
    }
    
    public class SharedDesktop
    {
        // Constructor
        public SharedDesktop(System.String val) { }
        public SharedDesktop(System.Int32 val) { }
        public SharedDesktop(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String AgentVersion { get; set; }
        public System.String ControllerDNSName { get; set; }
        public System.String DNSName { get; set; }
        public System.Int32 DesktopGroupUid { get; set; }
        public System.String HostedMachineId { get; set; }
        public System.String HostedMachineName { get; set; }
        public System.String HostingServerName { get; set; }
        public System.Nullable<System.Int32> HypervisorConnectionUid { get; set; }
        public System.String IPAddress { get; set; }
        public System.Boolean InMaintenanceMode { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.DeregistrationReason> LastDeregistrationReason { get; set; }
        public System.Nullable<System.DateTime> LastDeregistrationTime { get; set; }
        public System.Nullable<System.DateTime> LastHostingUpdateTime { get; set; }
        public System.String MachineName { get; set; }
        public System.String OSType { get; set; }
        public System.String OSVersion { get; set; }
        public Citrix.Broker.Admin.SDK.PowerState PowerState { get; set; }
        public Citrix.Broker.Admin.SDK.RegistrationState RegistrationState { get; set; }
        public System.String SID { get; set; }
        public System.Int32 Uid { get; set; }
        public System.Boolean WillShutdownAfterUse { get; set; }
        
        // Fabricated constructor
        private SharedDesktop() { }
        public static SharedDesktop CreateTypeInstance()
        {
            return new SharedDesktop();
        }
    }
    
    public class Site
    {
        // Constructor
        public Site() { }
        
        // Property
        public System.Nullable<System.Guid> BaseOU { get; set; }
        public System.Guid BrokerServiceGroupUid { get; set; }
        public Citrix.Broker.Admin.SDK.ColorDepth ColorDepth { get; set; }
        public System.DateTime ConfigLastChangeTime { get; set; }
        public System.Nullable<System.Guid> ConfigurationServiceGroupUid { get; set; }
        public System.Nullable<System.Boolean> ConnectionLeasingEnabled { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.FunctionalLevel> DefaultMinimumFunctionalLevel { get; set; }
        public System.Int32 DesktopGroupIconUid { get; set; }
        public System.Boolean DnsResolutionEnabled { get; set; }
        public System.Boolean IsSecondaryBroker { get; set; }
        public System.String LicenseEdition { get; set; }
        public System.Nullable<System.Int32> LicenseGraceSessionsRemaining { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.LicenseModel> LicenseModel { get; set; }
        public System.String LicenseServerName { get; set; }
        public System.Int32 LicenseServerPort { get; set; }
        public System.Nullable<System.Int32> LicensedSessionsActive { get; set; }
        public System.String LicensingBurnIn { get; set; }
        public System.Nullable<System.DateTime> LicensingBurnInDate { get; set; }
        public System.Nullable<System.Int32> LicensingGraceHoursLeft { get; set; }
        public System.Nullable<System.Boolean> LicensingGracePeriodActive { get; set; }
        public System.Nullable<System.Boolean> LicensingOutOfBoxGracePeriodActive { get; set; }
        public System.Boolean LocalHostCacheEnabled { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Nullable<System.Int32> PeakConcurrentLicenseUsers { get; set; }
        public System.Boolean ReuseMachinesWithoutShutdownInOutageAllowed { get; set; }
        public System.Boolean SecureIcaRequired { get; set; }
        public System.Nullable<System.Int32> TotalUniqueLicenseUsers { get; set; }
        public System.Boolean TrustManagedAnonymousXmlServiceRequests { get; set; }
        public System.Boolean TrustRequestsSentToTheXmlServicePort { get; set; }
        
    }
    
    public class StartMenuShortcut
    {
        // Constructor
        public StartMenuShortcut() { }
        
        // Property
        public System.String CommandLineArguments { get; set; }
        public System.String CommandLineExecutable { get; set; }
        public System.String Description { get; set; }
        public System.String DisplayName { get; set; }
        public System.String ShortcutPath { get; set; }
        public System.String WorkingDirectory { get; set; }
        
    }
    
    public class Tag
    {
        // Constructor
        public Tag(System.String val) { }
        public Tag(System.Int32 val) { }
        public Tag(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String Description { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> MetadataMap { get; set; }
        public System.String Name { get; set; }
        public System.Guid UUID { get; set; }
        public System.Int32 Uid { get; set; }
        
        // Fabricated constructor
        private Tag() { }
        public static Tag CreateTypeInstance()
        {
            return new Tag();
        }
    }
    
    public class TagUsage
    {
        // Constructor
        public TagUsage(System.String val) { }
        public TagUsage(System.Int32 val) { }
        public TagUsage(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String TagName { get; set; }
        public System.Int32 TagRestrictedApplicationGroups { get; set; }
        public System.Int32 TagRestrictedEntitlementPolicyRules { get; set; }
        public System.Int32 TagRestrictedRebootSchedules { get; set; }
        public System.Guid TagUUID { get; set; }
        public System.Int32 TagUid { get; set; }
        public System.Int32 TaggedApplicationGroups { get; set; }
        public System.Int32 TaggedApplications { get; set; }
        public System.Int32 TaggedDesktopGroups { get; set; }
        public System.Int32 TaggedMachines { get; set; }
        public System.Int32 TotalTagRestrictedObjects { get; set; }
        public System.Int32 TotalTaggedObjects { get; set; }
        public System.Int32 UnknownTagRestrictedObjects { get; set; }
        public System.Int32 UnknownTaggedObjects { get; set; }
        
        // Fabricated constructor
        private TagUsage() { }
        public static TagUsage CreateTypeInstance()
        {
            return new TagUsage();
        }
    }
    
    [System.Flags]
    public enum TimeSchemeDays : int
    {
        Sunday = 1,
        Monday = 2,
        Tuesday = 4,
        Wednesday = 8,
        Thursday = 16,
        Friday = 32,
        Weekdays = 62,
        Saturday = 64,
        Weekend = 65,
    }
    
    public class UnconfiguredMachine
    {
        // Constructor
        public UnconfiguredMachine() { }
        
        // Property
        public System.String AgentVersion { get; set; }
        public System.String ControllerDNSName { get; set; }
        public System.Boolean CurrentlyRegistered { get; set; }
        public System.String DNSName { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.FunctionalLevel> FunctionalLevel { get; set; }
        public System.Nullable<System.DateTime> LastDeregistrationTime { get; set; }
        public System.String MachineName { get; set; }
        public System.String OSType { get; set; }
        public System.String OSVersion { get; set; }
        public System.String SID { get; set; }
        public System.Nullable<Citrix.Broker.Admin.SDK.SessionSupport> SessionSupport { get; set; }
        
    }
    
    public class User
    {
        // Constructor
        public User(System.String val) { }
        public User(System.Management.Automation.PSObject obj) { }
        
        // Property
        public System.String FullName { get; set; }
        public System.String HomeZoneName { get; set; }
        public System.Nullable<System.Guid> HomeZoneUid { get; set; }
        public System.String Name { get; set; }
        public System.String SID { get; set; }
        public System.String UPN { get; set; }
        
        // Fabricated constructor
        private User() { }
        public static User CreateTypeInstance()
        {
            return new User();
        }
    }
    
    public class UserZonePreference
    {
        // Constructor
        public UserZonePreference() { }
        
        // Property
        public System.String FullName { get; set; }
        public System.String HomeZoneName { get; set; }
        public System.Guid HomeZoneUid { get; set; }
        public System.String Name { get; set; }
        public System.String SID { get; set; }
        public System.String UPN { get; set; }
        
    }
    
    public enum VMToolsState : int
    {
        NotPresent = 0,
        Unknown = 1,
        NotStarted = 2,
        Running = 3,
    }
    
    public enum WebhookTrigger : int
    {
        MachineRegistration = 0,
    }
    
    public enum WindowsConnectionSetting : int
    {
        LogonEnabled = 0,
        Draining = 1,
        DrainingUntilRestart = 2,
        LogonDisabled = 3,
    }
    
    public enum ZonePreference : int
    {
        UserLocation = 0,
        UserHome = 10,
        UserHomeOnly = 11,
        ApplicationHome = 20,
    }
    
}

namespace Citrix.Cds.CdsController
{
    public enum DatabaseScriptType : int
    {
        FullDatabase = 0,
        Instance = 1,
        Evict = 2,
        Login = 3,
        Database = 4,
    }
    
}

namespace Citrix.Fma.Sdk.Utilities.Service
{
    public enum ServiceStatus : int
    {
        Stopped = 0,
        DBUnconfigured = 1,
        DBRejectedConnection = 2,
        InvalidDBConfigured = 3,
        DBNotFound = 4,
        DBMissingOptionalFeature = 5,
        DBMissingMandatoryFeature = 6,
        DBNewerVersionThanService = 7,
        DBOlderVersionThanService = 8,
        DBVersionChangeInProgress = 9,
        OK = 10,
        PendingFailure = 11,
        Failed = 12,
        Unknown = 13,
        ServiceNotInSiteDB = 14,
        InvalidDBConnectionString = 15,
    }
    
    public class ServiceStatusInfo
    {
        // Constructor
        public ServiceStatusInfo(System.String serviceStatusString, System.Collections.Generic.Dictionary<System.String,System.String> extraInfo) { }
        
        // Property
        public Citrix.Fma.Sdk.Utilities.Service.ServiceStatus ServiceStatus { get; set; }
        public System.Collections.Generic.Dictionary<System.String,System.String> ExtraInfo { get; set; }
        
        // Fabricated constructor
        private ServiceStatusInfo() { }
        public static ServiceStatusInfo CreateTypeInstance()
        {
            return new ServiceStatusInfo();
        }
    }
    
}

'@

function Add-BrokerApplication {
    <#
    .SYNOPSIS
        Adds applications to a desktop group or application group.
    .PARAMETER InputObject
        Specifies the application to associate. Its Uid can also be substituted for the object reference.
    .PARAMETER Name
        Specifies the name of the application to be associated with the desktop group.
    .PARAMETER ApplicationGroup
        Specifies which application group this application should be associated with.
    .PARAMETER DesktopGroup
        Specifies which desktop group this application should be associated with. Note that applications can only be associated with desktop groups of the AppsOnly or DesktopsAndApps delivery type.
    .PARAMETER Priority
        Specifies the priority of the mapping between the application and desktop group where lower numbers imply higher priority with zero being highest.
        If one association has a higher priority than the other, machines from that group will be selected for launching sessions until all machines are at maximum load, in maintenance mode, unregistered, or unavailable for any other reason. Only when all machines from the higher-priority group are unavailable will new connections be routed to the next lowest priority group.
        If multiple associations with equal priorities are encountered, session launches will be load balanced across all machines in both groups. The least-loaded machine across the groups will be chosen.
        This parameter is used only when adding an application to a desktop group. It is an error to specify a priority when adding an application to an application group.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${Priority},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerApplicationGroup {
    <#
    .SYNOPSIS
        Adds application groups to a desktop group.
    .PARAMETER InputObject
        Specifies the application group to associate with the desktop group. Its Uid can also be substituted for the object reference.
    .PARAMETER Name
        Specifies the name of the application group to associate with the desktop group.
    .PARAMETER DesktopGroup
        Specifies the desktop groups with which the application groups should be associated.
        Note that application groups can only be associated with desktop groups whose delivery type is either AppsOnly or DesktopsAndApps.
    .PARAMETER Priority
        Specifies the priority of the mapping between the application group and desktop group. Lower numbers imply higher priority with zero being highest.
        If one association has a higher priority than the other, machines from that group will be selected for launching sessions until all machines are at maximum load, in maintenance mode, unregistered, or unavailable for any other reason. Only when all machines from the higher-priority desktop group are unavailable will new connections be routed to the next lowest priority desktop group.
        If multiple associations with equal priorities are encountered, session launches will be load balanced across all machines in both desktop groups. The least-loaded machine across the desktop groups will be chosen.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${Priority},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerDesktopGroup {
    <#
    .SYNOPSIS
        Associate Remote PC desktop groups with the specified Remote PC catalog.
    .PARAMETER InputObject
        Specifies one or more Remote PC desktop groups to add to a Remote PC catalog.
    .PARAMETER Name
        Specifies the Remote PC desktop groups to add to a Remote PC catalog based on their name properties.
    .PARAMETER RemotePCCatalog
        The Remote PC catalog which the desktop groups are to be added to. Specified by name, Uid or instance.
    .PARAMETER Priority
        Desktop group to catalog associations carry a priority number, where numerically lower values indicate a higher priority.
        The priority relative to other associations determines which desktop group Remote PC automation will move a qualifying unconfigured machine into when it registers. Priority also determines which desktop group a machine will be published to when a user is assigned to the machine by Remote PC automation.
        If a value is not supplied, then the desktop group association is automatically assigned a lower priority than any existing associations.
        If a priority value is specified that conflicts with an existing association's priority value, then the new association is inserted with that value and existing associations are renumbered upwards to accommodate it.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog]
        ${RemotePCCatalog},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${Priority},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerMachine {
    <#
    .SYNOPSIS
        Adds one or more machines to a desktop group.
    .PARAMETER InputObject
        An array of machines to add to the group.
    .PARAMETER MachineName
        The name of the single machine to add (must match the MachineName property of the machine).
    .PARAMETER DesktopGroup
        The desktop group to which the machines are added, specified by name, Uid, or instance.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerMachineConfiguration {
    <#
    .SYNOPSIS
        Adds a machine configuration to a desktop group.
    .PARAMETER InputObject
        Machine configuration to add to the desktop group.
    .PARAMETER Name
        Name of a machine configuration to add to the desktop group.
    .PARAMETER Application
        The application to which the machine configurations are added, specified by name, Uid, or instance.
    .PARAMETER DesktopGroup
        The desktop group to which the machine configurations are added, specified by name, Uid, or instance.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineConfiguration[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application]
        ${Application},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerMachinesToDesktopGroup {
    <#
    .SYNOPSIS
        Adds machines from a catalog to a desktop group.
    .PARAMETER Catalog
        The catalog from which the machines are taken.
    .PARAMETER DesktopGroup
        The desktop group to which the machines are added.
    .PARAMETER Count
        The number of machines to add to the desktop group.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.Int32])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog]
        ${Catalog},
        
        [Parameter(Mandatory=$true, Position=2)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [Parameter(Mandatory=$true, Position=3)]
        [int]
        ${Count},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerScope {
    <#
    .SYNOPSIS
        Add the specified catalog/desktop group to the given scope(s).
    .PARAMETER InputObject
        Specifies the scope(s) to add the object to. Each can take the form of either the string form of the scope's GUID or its name.
    .PARAMETER ApplicationGroup
        Specifies the application group to be added. This can take the form of an existing application group object, an application group Uid or name.
    .PARAMETER Catalog
        Specifies the catalog object to be added. This can take the form of an existing catalog object, a catalog Uid or name.
    .PARAMETER DesktopGroup
        Specifies the desktop group object to be added. This can take the form of an existing desktop group object, a desktop group Uid or name.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Scope[]]
        ${InputObject},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog]
        ${Catalog},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerTag {
    <#
    .SYNOPSIS
        Associate a tag with another object in the site.
    .PARAMETER InputObject
        Specifies one or more tag objects.
    .PARAMETER Name
        Specifies a tag by name.
    .PARAMETER Application
        Associates the tag with the specified application.
    .PARAMETER ApplicationGroup
        Associates the tag with the specified application group.
    .PARAMETER Desktop
        Associates the tag with the specified desktop. The tag is associated with the underlying machine not with the desktop itself.
        This parameter is deprecated, use -Machine instead.
    .PARAMETER DesktopGroup
        Associates the tag with the specified desktop group.
    .PARAMETER Machine
        Associates the tag with the specified machine.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application]
        ${Application},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Desktop]
        ${Desktop},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine]
        ${Machine},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Add-BrokerUser {
    <#
    .SYNOPSIS
        Creates an association between a user and another broker object
    .PARAMETER InputObject
        The user objects to add.
    .PARAMETER Name
        The name of the user or users to be added.
    .PARAMETER ApplicationGroup
        The application group to which the user is to be assigned.
    .PARAMETER Application
        The application to which the user is to be assigned.
    .PARAMETER SessionLinger
        The session linger setting to which the user is to be assigned.
    .PARAMETER SessionPreLaunch
        The session pre-launch setting to which the user is to be assigned.
    .PARAMETER Machine
        The machine to which the user is to be assigned
    .PARAMETER PrivateDesktop
        The desktop to which the user is to be assigned
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application]
        ${Application},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionLinger]
        ${SessionLinger},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionPreLaunch]
        ${SessionPreLaunch},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine]
        ${Machine},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PrivateDesktop]
        ${PrivateDesktop},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Disconnect-BrokerSession {
    <#
    .SYNOPSIS
        Disconnect a session.
    .PARAMETER InputObject
        Identifies the session(s) to disconnect. This can be expressed as either a session Uid or a session object.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Session[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Export-BrokerConfiguration {
    <#
    .SYNOPSIS
        Obtains an XML document containing the configuration of the broker and optionally a script to import it into another broker
    .PARAMETER TargetBrokerVersion
        The version of the broker receiving the configuration
    .PARAMETER ExistingImportScriptId
        The Id of the script the caller already has; a new script will be returned in the XML document if different.
    .PARAMETER ExistingConfigLastChangeTime
        The value of ConfigLastChangeTime in the site object of any configuration already held by the caller. If nothing has changed, an empty configuration will be returned with the "Updated" attribute set to false.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [version]
        ${TargetBrokerVersion},
        
        [string]
        ${ExistingImportScriptId},
        
        [string]
        ${ExistingConfigLastChangeTime},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Export-BrokerDesktopPolicy {
    <#
    .SYNOPSIS
        Gets the site wide Citrix Group Policy settings.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.Byte[]])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerAccessPolicyRule {
    <#
    .SYNOPSIS
        Gets rules from the site's access policy.
    .PARAMETER Uid
        Gets only the rule with the specified unique ID.
    .PARAMETER Name
        Gets only rules with the specified name.
    .PARAMETER AllowedConnections
        Gets only rules that have the specified value in the AllowedConnections property of their included SmartAccess tags filter.
        Valid values are Filtered, NotViaAG, ViaAG and AnyViaAG.
    .PARAMETER AllowedUsers
        Gets only rules that have the specified value in the AllowedUsers property of their included users filter.
        Valid values are Filtered, AnyAuthenticated, Any, AnonymousOnly and FilteredOrAnonymous.
    .PARAMETER Description
        Gets only rules with the specified description.
    .PARAMETER DesktopGroupName
        Gets only rules applying to desktop groups with names matching the specified name.
    .PARAMETER DesktopGroupUid
        Gets only rules that apply to the desktop group with the specified unique ID.
    .PARAMETER Enabled
        Gets only rules that are in the specified state, either enabled ($true) or disabled ($false).
    .PARAMETER ExcludedClientIPFilterEnabled
        Gets only rules that have their excluded client IP address filter enabled ($true) or disabled ($false).
    .PARAMETER ExcludedClientName
        Gets only rules that have the specified client name in their excluded client names filter (whether the filter is enabled or not).
    .PARAMETER ExcludedClientNameFilterEnabled
        Gets only rules that have their excluded client name filter enabled ($true) or disabled ($false).
    .PARAMETER ExcludedSmartAccessFilterEnabled
        Gets only rules that have their excluded SmartAccess tags filter enabled ($true) or disabled ($false).
    .PARAMETER ExcludedSmartAccessTag
        Gets only rules that have the specified SmartAccess tag in their excluded SmartAccess tags filter (whether the filter is enabled or not).
    .PARAMETER ExcludedUser
        Gets only rules that have the specified user in their excluded users filter (whether the filter is enabled or not).
    .PARAMETER ExcludedUserFilterEnabled
        Gets only rules that have their excluded user filter enabled ($true) or disabled ($false).
    .PARAMETER IncludedClientIPFilterEnabled
        Gets only rules that have their included client IP address filter enabled ($true) or disabled ($false).
    .PARAMETER IncludedClientName
        Gets only rules that have the specified user device name in their included client names filter (whether the filter is enabled or not).
    .PARAMETER IncludedClientNameFilterEnabled
        Gets only rules that have their included client name filter enabled ($true) or disabled ($false).
    .PARAMETER IncludedSmartAccessFilterEnabled
        Gets only rules that have their included SmartAccess tags filter enabled ($true) or disabled ($false).
    .PARAMETER IncludedSmartAccessTag
        Gets only rules that have the specified SmartAccess tag in their included SmartAccess tags filter (whether the filter is enabled or not).
    .PARAMETER IncludedUser
        Gets only rules that have the specified user in their included users filter (whether the filter is enabled or not).
    .PARAMETER IncludedUserFilterEnabled
        Gets only rules that have their included user filter enabled ($true) or disabled ($false).
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.AccessPolicyRule])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AllowedConnection]
        ${AllowedConnections},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AllowedUser]
        ${AllowedUsers},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedClientIPFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ExcludedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedClientNameFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedSmartAccessFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ExcludedSmartAccessTag},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${ExcludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedClientIPFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IncludedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedClientNameFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedSmartAccessFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IncludedSmartAccessTag},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${IncludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerAdminFolder {
    <#
    .SYNOPSIS
        Get the admin folders in this site.
    .PARAMETER Uid
        Gets only the admin folder with the specified unique identifier.
    .PARAMETER Name
        Gets admin folders matching the specified name (if no trailing backslash is supplied, it is assumed).
    .PARAMETER DirectChildAdminFolders
        Gets admin folders with the specified number of child folders.
    .PARAMETER DirectChildApplications
        Gets admin folders with the specified number of applications (excluding those in sub-folders).
    .PARAMETER FolderName
        Gets only the admin folders matching the specified simple folder name.
    .PARAMETER LastChangeId
        Gets only the admin folders with the specified value for LastChangeId.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER ParentAdminFolderUid
        Gets only admin folders with the specified parent admin folder UID value.
    .PARAMETER TotalChildApplications
        Gets admin folders with the specified number of applications (including those in sub-folders).
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.AdminFolder])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DirectChildAdminFolders},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DirectChildApplications},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${FolderName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${LastChangeId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ParentAdminFolderUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TotalChildApplications},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerAppAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Gets application rules from the site's assignment policy.
    .PARAMETER Uid
        Gets the application rule with the specified unique ID.
    .PARAMETER Name
        Gets only application rules with the specified name.
    .PARAMETER Description
        Gets only application rules with the specified description.
    .PARAMETER DesktopGroupUid
        Gets only application rules that apply to the desktop group with the specified unique ID.
    .PARAMETER Enabled
        Gets only application rules that are in the specified state, either enabled ($true) or disabled ($false).
    .PARAMETER ExcludedUser
        Gets only application rules that have the specified user in their excluded users filter (whether the filter is enabled or not)
    .PARAMETER ExcludedUserFilterEnabled
        Gets only application rules that have their excluded user filter enabled ($true) or disabled ($false).
    .PARAMETER IncludedUser
        Gets only application rules that have the specified user in their included users filter (whether the filter is enabled or not).
    .PARAMETER IncludedUserFilterEnabled
        Gets only application rules that have their included user filter enabled ($true) or disabled ($false).
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${ExcludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${IncludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerAppEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Gets application rules from the site's entitlement policy.
    .PARAMETER Uid
        Gets the application rule with the specified unique ID.
    .PARAMETER Name
        Gets only application rules with the specified name.
    .PARAMETER Description
        Gets only application rules with the specified description.
    .PARAMETER DesktopGroupUid
        Gets only the application rule that applies to the desktop group with the specified unique ID.
    .PARAMETER Enabled
        Gets only application rules that are in the specified state, either enabled ($true), or disabled ($false).
    .PARAMETER ExcludedUser
        Gets only application rules that have the specified user in their excluded users filter (whether the filter is enabled or not).
    .PARAMETER ExcludedUserFilterEnabled
        Gets only application rules that have their excluded user filter enabled ($true) or disabled ($false).
    .PARAMETER IncludedUser
        Gets only application rules that have the specified user in their included users filter (whether the filter is enabled or not).
    .PARAMETER IncludedUserFilterEnabled
        Gets only application rules that have their included user filter enabled ($true) or disabled ($false).
    .PARAMETER LeasingBehavior
        Gets only application rules with the specified connection leasing behavior. Possible values are:
        Allowed and Disallowed.
    .PARAMETER SessionReconnection
        Gets only application rules with the specified session reconnection behavior. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${ExcludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${IncludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.LeasingBehavior]
        ${LeasingBehavior},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionReconnection]
        ${SessionReconnection},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerApplication {
    <#
    .SYNOPSIS
        Get the applications published on this site.
    .PARAMETER Uid
        Gets only the application with the specified unique identifier.
    .PARAMETER Name
        Gets only the applications matching the specified name (including any parent admin folder hierarchy.
    .PARAMETER AdminFolderName
        Gets applications that are in admin folders matching the specified name.
    .PARAMETER AdminFolderUid
        Gets applications that are in the specified admin folder.
    .PARAMETER AllAssociatedDesktopGroupUid
        Gets applications associated with the desktop group identified by the uid.
        The application may be either published directly on the desktop group or published indirectly on the desktop group as part of an application group.
    .PARAMETER AllAssociatedDesktopGroupUUID
        Gets applications associated with the desktop group identified by the UUID.
        The application may be either published directly on the desktop group or published indirectly on the desktop group as part of an application group.
    .PARAMETER ApplicationName
        Gets applications that match the specified simple name.
    .PARAMETER ApplicationType
        Gets applications that match the type specified: HostedOnDesktop, InstalledOnClient or PublishedContent.
    .PARAMETER AssociatedApplicationGroupUid
        Gets applications that are members of the application group identified by the uid.
    .PARAMETER AssociatedApplicationGroupUUID
        Gets applications that are members of the application group identified by the UUID.
    .PARAMETER AssociatedDesktopGroupPriority
        Gets applications with an associated desktop group identified by priority assigned to the pairing between an application and desktop group.
        Associated desktop group is a desktop group on which the application is published.
    .PARAMETER AssociatedDesktopGroupUid
        Gets applications directly associated with the desktop group identified by the uid.
        The application must be published directly on the desktop group. To search for applications that may be published indirectly on the desktop group as part of an application group, use the AllAssociatedDesktopGroupUid filter instead.
    .PARAMETER AssociatedDesktopGroupUUID
        Gets applications directly associated with the desktop group identified by the UUID.
        The application must be published directly on the desktop group. To search for applications that may be published indirectly on the desktop group as part of an application group, use the AllAssociatedDesktopGroupUid filter instead.
    .PARAMETER AssociatedUserFullName
        Gets applications with an associated user identified by their full name (usually 'first-name last-name').
        If the ‘UserFilterEnabled’ property is true then access to the application is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserName
        Gets applications with an associated user identified by their user name (in the form 'domain\user'). If the ‘UserFilterEnabled’ property is true then access to the application is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserUPN
        Gets applications with an associated user identified by their user principle name (in the form 'user@domain'). If the ‘UserFilterEnabled’ property is true then access to the application is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER BrowserName
        Gets only the applications that match the supplied name. The BrowserName is usually an internal name for the application and is unique in the site.
    .PARAMETER ClientFolder
        Gets only the applications that match the specified value for the folder the application belongs to as seen by the end-user. This folder can be seen in the Citrix Online Plug-in, in Web Services, and also potentially in the user's start menu.
    .PARAMETER CommandLineArguments
        Gets only the applications that match the supplied arguments to the command-line executable.
    .PARAMETER CommandLineExecutable
        Gets only the applications that match the supplied command-line executable.
    .PARAMETER CpuPriorityLevel
        Gets only the applications that have the specified value for the CPU priority level of the launched executable. Valid values are: Low, BelowNormal, Normal, AboveNormal, and High.
    .PARAMETER Description
        Gets only the applications that match the supplied description.
    .PARAMETER Enabled
        Gets only the applications that have the specified value for whether the application is enabled. Disabled applications are still visible to users (that is controlled by the Visible setting) but cannot be launched.
    .PARAMETER HomeZoneName
        Gets only applications with a home zone preference matching the specified name.
    .PARAMETER HomeZoneOnly
        Gets only applications that have the specified behaviour with respect to forcing use of their home zone during launch.
    .PARAMETER HomeZoneUid
        Gets only applications with a home zone preference matching the specified UID.
    .PARAMETER IconFromClient
        Gets only the applications that have the specified value for whether the application icon should be retrieved from the user device.
    .PARAMETER IconUid
        Gets only the applications that use the specified icon (identified by its Uid).
    .PARAMETER IgnoreUserHomeZone
        Gets only applications that have the specified behaviour with respect to ignoring user home zones during launch.
    .PARAMETER MaxPerUserInstances
        Gets only applications with the specified maximum allowed concurrently running instances that an individual user can have.
    .PARAMETER MaxTotalInstances
        Gets only applications with the specified maximum allowed total of concurrently running instances in the site.
    .PARAMETER MetadataKey
        Gets only applications whose associated metadata contains key names matching the specified value.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER PublishedName
        Gets applications whose published name matches the supplied pattern.
    .PARAMETER SecureCmdLineArgumentsEnabled
        Gets only the applications that have the specified value for whether the command-line arguments should be secured. This is reserved for possible future use, and all applications of type HostedOnDesktop can only have this value set to true.
    .PARAMETER ShortcutAddedToDesktop
        Gets only the applications that match depending on whether a shortcut for the application has been added to the user device or not.
    .PARAMETER ShortcutAddedToStartMenu
        Gets only the applications that match depending on whether a shortcut for the application has been added to Start Menu of the user device or not.
    .PARAMETER StartMenuFolder
        Gets only the applications that match the specified name for the start menu folder that holds the application shortcut. This is valid only for the Citrix Online Plug-in.
    .PARAMETER Tag
        Gets applications associated with the specified tag.
    .PARAMETER UserFilterEnabled
        Gets only applications whose user filter is in the specified state.
    .PARAMETER UUID
        Gets applications with the specified value of UUID.
    .PARAMETER Visible
        Gets only the applications that have the specified value for whether it is visible to the users.
    .PARAMETER WaitForPrinterCreation
        Gets only the applications that match depending on whether the VDA delays starting the application until printers are set up.
    .PARAMETER WorkingDirectory
        Gets only the applications that match the specified working directory.
    .PARAMETER DesktopUid
        Gets only the applications that have been associated (using a desktop group) to the specified desktop (identified by its Uid). Note that an application is not directly associated with a desktop, but only indirectly by which desktop group it has been published to.
    .PARAMETER ApplicationGroupUid
        Gets applications that are members of the application group identified by the uid.
    .PARAMETER SessionUid
        Gets only the applications that are running in the specified session (identified by its Uid).
    .PARAMETER UserSID
        Gets only applications with their accessibility restricted to include the specified user.
    .PARAMETER DesktopGroupUid
        Gets only the applications that have been published to the specified desktop group (identified by its Uid).
    .PARAMETER MachineConfigurationUid
        Gets only applications which have an associated machine configuration identified by the given Uid.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Application])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AdminFolderName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AdminFolderUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AllAssociatedDesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${AllAssociatedDesktopGroupUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ApplicationType]
        ${ApplicationType},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AssociatedApplicationGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${AssociatedApplicationGroupUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AssociatedDesktopGroupPriority},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AssociatedDesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${AssociatedDesktopGroupUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrowserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientFolder},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CommandLineArguments},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CommandLineExecutable},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.CpuPriorityLevel]
        ${CpuPriorityLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HomeZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${HomeZoneOnly},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${HomeZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IconFromClient},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IgnoreUserHomeZone},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxPerUserInstances},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxTotalInstances},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MetadataKey},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${SecureCmdLineArgumentsEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ShortcutAddedToDesktop},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ShortcutAddedToStartMenu},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${StartMenuFolder},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${UserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Visible},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WaitForPrinterCreation},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${WorkingDirectory},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [long]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineConfigurationUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerApplicationGroup {
    <#
    .SYNOPSIS
        Gets details of configured application groups.
    .PARAMETER Uid
        Gets the application group with the given Uid.
    .PARAMETER Name
        Gets application groups whose name matches the supplied pattern.
    .PARAMETER AssociatedDesktopGroupPriority
        Gets application groups with which a desktop group has been associated with the specified priority.
    .PARAMETER AssociatedDesktopGroupUid
        Gets application groups which have been associated with the specified desktop group. The desktop group is identified by its Uid.
    .PARAMETER AssociatedDesktopGroupUUID
        Gets application groups which have been associated with the specified desktop group. The desktop group is identified by its UUID.
    .PARAMETER AssociatedUserFullName
        Gets application groups with an associated user identified by their user name (usually 'first-name last-name').
        If the 'UserFilterEnabled' property is true then access to applications in the application group is restricted to those users only. Otherwise, access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserName
        Gets application groups with an associated user identified by their user name (in the form 'domain\user').
        If the 'UserFilterEnabled' property is true then access to applications in the application group is restricted to those users only. Otherwise, access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserUPN
        Gets application groups with an associated user identified by their user principle name (in the form 'user@domain').
        If the 'UserFilterEnabled' property is true then access to applications in the application group is restricted to those users only. Otherwise, access is unrestricted (but always subject to other policy rules).
    .PARAMETER Description
        Gets application groups whose description matches the supplied pattern.
    .PARAMETER Enabled
        Gets application groups which are currently enabled.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER RestrictToTag
        Gets only application groups with the specified tag restriction.
    .PARAMETER ScopeId
        Gets application groups which are part of the supplied administrative scope. The scope is identified by its GUID.
    .PARAMETER ScopeName
        Gets application groups which are part of an administrative scope whose name matches the supplied pattern.
    .PARAMETER SessionSharingEnabled
        Gets application groups for which session sharing is enabled.
    .PARAMETER SingleAppPerSession
        Specifies whether each application launched from this application group starts in its own new session or can share an existing suitable session if present.
    .PARAMETER Tag
        Gets application groups that have been tagged with a tag whose name matches the specified pattern.
    .PARAMETER TenantId
        Gets desktop groups associated with the specified tenant identity.
    .PARAMETER TotalApplications
        Gets application groups that contain the specified number of applications.
    .PARAMETER TotalMachines
        Gets application groups that are published on the specified number of machines, without taking the tag restriction into account.
    .PARAMETER TotalMachinesWithTagRestriction
        Gets application groups that are published on the specified number of machines, taking the tag restriction into account.
    .PARAMETER UserFilterEnabled
        Gets application groups whose user filter is currently enabled.
    .PARAMETER UUID
        Gets the application group with the given UUID.
    .PARAMETER ApplicationUid
        Gets only application groups to which the given application has been added.
    .PARAMETER DesktopGroupUid
        Gets application groups which have been added to the specified desktop group.
    .PARAMETER TagUid
        Gets application groups that have been tagged the given tag. The tag is identified by its Uid.
    .PARAMETER UserSID
        Gets application groups for which the specified user is a member of the user filter. The user account is identified by its SID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationGroup])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AssociatedDesktopGroupPriority},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AssociatedDesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${AssociatedDesktopGroupUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${RestrictToTag},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ScopeId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ScopeName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${SessionSharingEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${SingleAppPerSession},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TotalApplications},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TotalMachines},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TotalMachinesWithTagRestriction},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${UserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TagUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserSID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerApplicationInstance {
    <#
    .SYNOPSIS
        Gets the running applications on the desktops.
    .PARAMETER Uid
        Gets only the application instances specified by the unique identifier. This is the unique identifier for the application instance object itself, and is distinct from the Uids of either application or session objects.
    .PARAMETER ApplicationName
        Gets only application instances for the specified application name.
    .PARAMETER ApplicationUid
        Gets only application instances for the specified application Uid.
    .PARAMETER ApplicationUUID
        Gets only the application instances for the specified application UUID.
    .PARAMETER Instances
        Gets only application instances that match the specified number of instances.
    .PARAMETER MachineName
        Gets only application instances running on the specified machines.
    .PARAMETER MachineUid
        Gets only application instances running on the machine with the specified UID.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER SessionKey
        Gets only application instances for the published applications running in the specified session.
    .PARAMETER SessionUid
        Gets only application instances for the published applications running in the specified session.
    .PARAMETER UserName
        Gets only application instances being run by the specified users.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationInstance])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ApplicationUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${Instances},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${SessionKey},
        
        [Parameter(ParameterSetName='Filter')]
        [long]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserName},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Gets desktop rules from the site's assignment policy.
    .PARAMETER Uid
        Gets the desktop rule with the specified unique ID.
    .PARAMETER Name
        Gets only desktop rules with the specified name.
    .PARAMETER ColorDepth
        Gets only desktop rules with the specified color depth.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER Description
        Gets only desktop rules with the specified description.
    .PARAMETER DesktopGroupUid
        Gets only desktop rules that apply to the desktop group with the specified unique ID.
    .PARAMETER Enabled
        Gets only rules that are in the specified state, either enabled ($true) or disabled ($false).
    .PARAMETER ExcludedUser
        Gets only desktop rules that have the specified user in their excluded users filter (whether the filter is enabled or not).
    .PARAMETER ExcludedUserFilterEnabled
        Gets only desktop rules that have their excluded user filter enabled ($true) or disabled ($false).
    .PARAMETER IconUid
        Gets only desktop rules using the icon with the specified unique ID.
    .PARAMETER IncludedUser
        Gets only desktop rules that have the specified user in their included users filter (whether the filter is enabled or not).
    .PARAMETER IncludedUserFilterEnabled
        Gets only desktop rules that have their included user filter enabled ($true) or disabled ($false).
    .PARAMETER MaxDesktops
        Gets only desktop rules granting the specified number of machine assignment entitlements.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER PublishedName
        Gets only desktop rules with the specified published name, that is, the desktop name that the end user sees.
    .PARAMETER SecureIcaRequired
        Gets only desktop rules that require desktop sessions to machines assigned by the rule to use the SecureICA protocol ($true) or not ($false).
    .PARAMETER UUID
        Gets rules with the specified value of UUID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.AssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${ExcludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${IncludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxDesktops},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerCatalog {
    <#
    .SYNOPSIS
        Gets catalogs configured for this site.
    .PARAMETER Uid
        Get catalogs with the specified UID.
    .PARAMETER Name
        Gets catalogs with the specified name.
    .PARAMETER AllocationType
        Gets catalogs that are of the specified allocation type. Values can be:
        o Static - Machines in a catalog of this type are permanently assigned to a user.
        o Permanent - equivalent to 'Static'.
        o Random  - Machines in a catalog of this type are picked at random and temporarily assigned to a user.
    .PARAMETER AppDnaAnalysisState
        Gets catalogs that have of the specified AppDNA Analysis State. Values can be:
        o None - No AppDNA analysis has not been preformed.
        o Capturing - AppDNA analysis is running and capturing infomation from a catalog machine.
        o Canceled - The AppDNA analysis process was cancelled.
        o Ready - The AppDNA analysis process has finished correctly.
        o Failed - The AppDNA analysis process failed.
        o Importing - AppDNA analysis is running and uploading results to the AppDNA server.
    .PARAMETER AssignedCount
        Gets catalogs containing a specified number of assigned machines (machines that have been assigned to users).
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER AvailableAssignedCount
        Gets catalogs containing a specified number of available machines (those not in any desktop group) that are also assigned to users.
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER AvailableCount
        Gets catalogs containing a specified number of available machines (those not in any desktop group).
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER AvailableUnassignedCount
        Gets catalogs containing a specified number of available machines (those not in any desktop group) that are not assigned to users.
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER Description
        Gets catalogs with the specified description.
    .PARAMETER HypervisorConnectionUid
        Gets catalogs associated with the specified hypervisor connection.
    .PARAMETER IsRemotePC
        Gets catalogs with the specified IsRemotePC value.
    .PARAMETER MachinesArePhysical
        Specifies whether machines in the catalog can be power-managed by the Citrix Broker Service. Where the Citrix Broker Service cannot control the power state of the machine specify $true, otherwise $false. Can only be specified together with a provisioning type of Pvs or Manual, or if used with the legacy CatalogKind parameter only with Pvs or PvsPvd catalog kinds.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER MinimumFunctionalLevel
        Gets catalogs with a specific MinimumFunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER PersistUserChanges
        Gets catalogs with the specified behavior when persisting changes made by the end user. Possible values are:
        o OnLocal - User changes are stored on the machine's local storage.
        o Discard - User changes are discarded.
        o OnPvd - User changes are stored on the user's personal vDisk.
    .PARAMETER ProvisioningSchemeId
        Gets catalogs associated with the specified provisioning scheme.
    .PARAMETER ProvisioningType
        Specifies the provisioning type for the catalog. Values can be:
        o Manual - No provisioning.
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...).
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER PvsAddress
        Gets catalogs containing machines provided by the Provisioning Services server with the specified address.
    .PARAMETER PvsDomain
        Gets catalogs containing machines provided by the Provisioning Services server in the specified domain.
    .PARAMETER RemotePCDesktopGroupPriority
        Gets Remote PC catalogs with a Remote PC desktop group association with the specified priority.
    .PARAMETER RemotePCDesktopGroupUid
        Gets Remote PC catalogs associated with the specified Remote PC desktop group.
    .PARAMETER RemotePCHypervisorConnectionUid
        Gets Remote PC catalogs associated with the specified Remote PC hypervisor connection.
    .PARAMETER ScopeId
        Gets catalogs that are associated with the given scope identifier.
    .PARAMETER ScopeName
        Gets catalogs that are associated with the given scope name.
    .PARAMETER SessionSupport
        Gets catalogs that have the specified session capability. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER TenantId
        Gets catalogs associated with the specified tenant identity.
    .PARAMETER UnassignedCount
        Gets catalogs containing a specified number of unassigned machines (machines not assigned to users).
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER UsedCount
        Gets catalogs containing a specified number of machines used in a desktop group.
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER UUID
        Get catalogs with the specified global ID.
    .PARAMETER ZoneName
        Gets catalogs located in the zone with the specified name.
    .PARAMETER ZoneUid
        Gets machines located in the zone with the specified UID.
    .PARAMETER MachineUid
        Gets the catalog containing the machine referenced by the specified unique identifier (UID).
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Catalog])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AllocationType]
        ${AllocationType},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.AppDnaAnalysisState]]
        ${AppDnaAnalysisState},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AssignedCount},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AvailableAssignedCount},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AvailableCount},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${AvailableUnassignedCount},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsRemotePC},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${MachinesArePhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.FunctionalLevel]
        ${MinimumFunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${ProvisioningSchemeId},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PvsAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PvsDomain},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${RemotePCDesktopGroupPriority},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${RemotePCDesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${RemotePCHypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ScopeId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ScopeName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${UnassignedCount},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${UsedCount},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerConfigurationSlot {
    <#
    .SYNOPSIS
        Gets configuration slots configured for this site.
    .PARAMETER Uid
        Get only the configuration slot with the specified unique identifier.
    .PARAMETER Name
        Get only the configuration slot with the specified name.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ConfigurationSlot])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerConfiguredFTA {
    <#
    .SYNOPSIS
        Gets any file type associations configured for an application.
    .PARAMETER Uid
        Gets only the configured file type association for the specified unique identifier.
    .PARAMETER ApplicationUid
        Gets only the configured file type associations for the specified application unique identifier.
    .PARAMETER ContentType
        Gets only the configured file type associations for the specified content type (as seen in the Registry). For example, "text/plain" or "application/msword".
    .PARAMETER ExtensionName
        Gets only the configured file type associations for the specified extension name. For example, ".txt" or ".doc".
    .PARAMETER HandlerDescription
        Gets only the configured file type associations for the specified handler description. For example, "Text Document".
    .PARAMETER HandlerName
        Gets only the configured file type associations for the specified handler name. For example, "TXTFILE" or "Word.Document.8".
    .PARAMETER HandlerOpenArguments
        Gets only the configured file type associations for the specified open argument to the handler. For example, "%1".
    .PARAMETER UUID
        Gets configured file type associations with the specified value of UUID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ConfiguredFTA])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ContentType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ExtensionName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HandlerDescription},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HandlerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HandlerOpenArguments},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerConnectionLog {
    <#
    .SYNOPSIS
        Get entries from the site's session connection log.
    .PARAMETER Uid
        Gets a specific connection log entry identified by its UID.
    .PARAMETER MachineName
        Gets connection log entries for the specified machines (in DOMAIN\Machine format).
    .PARAMETER BrokeringTime
        Gets connection log entries with a specified brokering time. For more flexibility when searching on brokering time use the -Filter parameter.
    .PARAMETER BrokeringUserName
        Gets connection log entries for the specified users (in DOMAIN\User format).
    .PARAMETER BrokeringUserUPN
        Gets connection log entries for the specified users (in user@upndomain.com format).
    .PARAMETER ConnectionFailureReason
        Gets connection log entries which failed for the specified reason.
    .PARAMETER Disconnected
        Gets connection log entries with the specified disconnection status, that is, whether the connection was disconnected, or logged-off.
    .PARAMETER EndTime
        Gets connection log entries with the specified end time. For more flexibility when searching on end time use the -Filter parameter.
    .PARAMETER EstablishmentTime
        Gets connection log entries with the specific establishment time. For more flexibility when searching on establishment time use the -Filter parameter.
    .PARAMETER MachineDNSName
        Gets connection log entries for the specified machines (in machine@dnsdomain.com format).
    .PARAMETER MachineUid
        Gets connection log entries for a specific machine identified by its UID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ConnectionLog])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${BrokeringTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrokeringUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrokeringUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ConnectionFailureReason]]
        ${ConnectionFailureReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${Disconnected},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${EndTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${EstablishmentTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MachineDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerController {
    <#
    .SYNOPSIS
        Gets Controllers running broker services in the site.
    .PARAMETER Uid
        Gets only Controller with the specified unique ID.
    .PARAMETER MachineName
        Gets only Controllers with the specified Windows name. ('domain\machine')
    .PARAMETER ControllerVersion
        Gets only Controllers running the specified version of the broker service.
    .PARAMETER DesktopsRegistered
        Gets only Controllers that have the specified number of desktops currently registered. This parameter is mainly of use with advanced filtering; see about_Broker_Filtering.
    .PARAMETER DNSName
        Gets only Controllers with the specified DNS name ('machine.domain')
    .PARAMETER LastActivityTime
        Gets only Controllers last reported as active at the specified time. This parameter is mainly of use with advanced filtering; see about_Broker_Filtering.
    .PARAMETER LastLicensingServerEvent
        Gets only Controllers with the specified last license server event recorded.
    .PARAMETER LastLicensingServerEventTime
        Gets only Controllers with its last recorded licensing server event at the specified time. This parameter is mainly of use with advanced filtering; see about_Broker_Filtering.
    .PARAMETER LastStartTime
        Gets only Controllers that last started-up at the specified time. This parameter is mainly of use with advanced filtering; see about_Broker_Filtering.
    .PARAMETER LicensingGraceState
        Gets only Controllers in the specified licensing grace state.
        Valid values are: NotActive, InOutOfBoxGracePeriod, InSupplementalGracePeriod, InEmergencyGracePeriod and GracePeriodExpired.
    .PARAMETER LicensingServerState
        Gets only Controllers in the specified licensing server state. Valid values are: ServerNotSpecified, NotConnected, OK, LicenseNotInstalled, LicenseExpired, Incompatible and Failed.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER OSType
        Gets only Controllers running the specified Operating System type.
    .PARAMETER OSVersion
        Gets only Controllers running the specified Operating System version.
    .PARAMETER SID
        Gets only Controllers with the specified SID.
    .PARAMETER State
        Gets only Controllers currently in the specified state.
        Valid values are: Failed, Off, On, and Active.
    .PARAMETER UUID
        Gets only the Controller with the specified GUID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Controller])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopsRegistered},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastActivityTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.LicensingServerEvent]]
        ${LastLicensingServerEvent},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastLicensingServerEventTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastStartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.LicensingGraceState]
        ${LicensingGraceState},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.LicensingServerState]
        ${LicensingServerState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ControllerState]
        ${State},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDBConnection {
    <#
    .SYNOPSIS
        Gets the database connection string for the specified data store used by the Broker Service.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDBSchema {
    <#
    .SYNOPSIS
        Gets SQL scripts to create or maintain the database schema for the Citrix Broker Service.
    .PARAMETER DatabaseName
        Specifies the name of the database into which the new Broker service schema is to be placed, or in which it already exists. The database itself is not created by any of the script types; it must already exist before the scripts are run.
    .PARAMETER ServiceGroupName
        Specifies the name of the service group to be used when creating the database schema. The service group is a collection of all the Broker services that share the same database instance and are considered equivalent; that is, all the services within a service group can be used interchangeably.
    .PARAMETER ScriptType
        Specifies the type of database script returned. Available script types are:
        -- FullDatabase
        Creates a database schema for the Citrix Broker Service in a database instance that does not already contain one. This is used when creating a new site. DatabaseName and ServiceGroupName are required parameters for this script type.
        -- Instance
        Adds a Broker Service instance to a database and so to the associated site. Appropriate database server logons and users are created to allow the service instance access to the required service schemas.
        -- Evict
        Removes a Broker Service instance from the database and so from the site. All reference to the service instance is removed from the database. DatabaseName and Sid are required parameters for this script type.
        -- Login
        Adds a logon for the Broker Service instance to a database server. This is specifically for use when configuring SQL Server mirroring where the mirror server must have appropriate logons created for all service instances in the site.
        -- Database
        This is deprecated. FullDatabase should be used instead.
    .PARAMETER SID
        Specifies the SID of the controller on which the Broker Service instance to remove from the database is running (only valid for a script type of Evict).
    .PARAMETER LocalDatabase
        Specifies whether the database script is to be used in a database instance run on the same controller as other services in the service group. Including this parameter ensures the script creates only the required permissions for local services to access the database schema for Broker services. If this parameter is specified inappropriately, the service instance will not be able to connect to the database.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [Parameter(Mandatory=$true)]
        [ValidateLength(1, 128)]
        [string]
        ${DatabaseName},
        
        [ValidateLength(1, 64)]
        [string]
        ${ServiceGroupName},
        
        [Citrix.Cds.CdsController.DatabaseScriptType]
        ${ScriptType},
        
        [string]
        ${SID},
        
        [switch]
        ${LocalDatabase},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDBVersionChangeScript {
    <#
    .SYNOPSIS
        Gets an SQL service schema update script for the Citrix Broker Service.
    .PARAMETER DatabaseName
        The name of the database containing the Citrix Broker Service schema to be updated.
    .PARAMETER TargetVersion
        The required target service schema version of the update. This is the service schema version obtained after the update script is applied.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.Management.Automation.PSObject])]
    param (
        [Parameter(Mandatory=$true)]
        [ValidateLength(1, 128)]
        [string]
        ${DatabaseName},
        
        [Parameter(Mandatory=$true)]
        [version]
        ${TargetVersion},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDelayedHostingPowerAction {
    <#
    .SYNOPSIS
        Gets power actions that are executed after a delay.
    .PARAMETER Uid
        Gets only the single action record whose ID matches the specified value.
    .PARAMETER MachineName
        Gets only the records for actions that are for machines whose name (of the form domain\machine) matches the specified string.
    .PARAMETER Action
        Gets only the records for actions with the specified action type.
        Valid values are Shutdown and Suspend.
    .PARAMETER ActionDueTime
        Gets only the records for actions due to be queued for execution at the specified time. This is useful with advanced filtering; for more information, see about_Broker_Filtering.
    .PARAMETER DNSName
        Gets only the records for actions that are for machines whose DNS name matches the specified string.
    .PARAMETER HostedMachineName
        Gets only the records for actions that are for machines whose Hosting Name (the machine name as understood by the hypervisor) matches the specified string.
    .PARAMETER HypervisorConnectionName
        Gets only the records for actions for machines hosted through a hypervisor connection whose name matches the specified string.
    .PARAMETER HypervisorConnectionUid
        Gets only the records for actions for machines hosted through a hypervisor connection whose ID matches the specified value.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.DelayedHostingPowerAction])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerManagementAction]
        ${Action},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${ActionDueTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${HypervisorConnectionUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDesktop {
    <#
    .SYNOPSIS
        Gets desktops configured for this site.
    .PARAMETER Uid
        Gets desktops with a specific UID.
    .PARAMETER MachineName
        Gets desktops with a specific machine name (in the form 'domain\machine').
    .PARAMETER AgentVersion
        Gets desktops with a specific Citrix Virtual Delivery Agent version.
    .PARAMETER ApplicationInUse
        Gets desktops running a specified published application (identified by browser name).
        String comparisons are case-insensitive.
    .PARAMETER AssignedClientName
        Gets desktops assigned to a specific client name.
    .PARAMETER AssignedIPAddress
        Gets desktops assigned to a specific client IP address.
    .PARAMETER AssociatedUserFullName
        Gets desktops with an associated user identified by their full name (usually in the form 'first-name last-name').
        Associated users are the current user for shared desktops, and the assigned users for private desktops.
    .PARAMETER AssociatedUserName
        Gets desktops with an associated user identified by their user name (in the form 'domain\user').
        Associated users are the current user for shared desktops, and the assigned users for private desktops.
    .PARAMETER AssociatedUserUPN
        Gets desktops with an associated user identified by their User Principle Name (in the form 'user@domain').
        Associated users are the current user for shared desktops, and the assigned users for private desktops.
    .PARAMETER AutonomouslyBrokered
        Gets desktops according to whether their current session is autonomously brokered or not. Autonomously brokered sessions are HDX sessions established by direct connection without being brokered.
        Session properties are always null for multi-session desktops.
    .PARAMETER CatalogName
        Gets desktops from the catalog with the specific name.
    .PARAMETER CatalogUid
        Gets desktops from a catalog with a specific UID.
    .PARAMETER ClientAddress
        Gets desktops with a specific client IP address.
    .PARAMETER ClientName
        Gets desktops with a specific client name.
    .PARAMETER ClientVersion
        Gets desktops with a specific client version.
    .PARAMETER ColorDepth
        Gets desktops configured with a specific color depth.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER ConnectedViaHostName
        Gets desktops with a specific host name of the incoming connection. This is usually a proxy or Citrix Access Gateway server.
    .PARAMETER ConnectedViaIP
        Gets desktops with a specific IP address of the incoming connection.
    .PARAMETER ControllerDNSName
        Gets desktops with a specific DNS name of the controller they are registered with.
    .PARAMETER DeliveryType
        Gets desktops of a particular delivery type.
        Valid values are AppsOnly, DesktopsOnly, DesktopsAndApps
    .PARAMETER Description
        Gets desktops with a specific description.
    .PARAMETER DesktopCondition
        Gets desktop with an outstanding desktop condition condition.
        Valid values are:
        o CPU: Indicates the machine has high CPU usage
        o ICALatency: Indicates the network latency is high
        o UPMLogonTime: Indicates that the profile load time was high
    .PARAMETER DesktopGroupName
        Gets desktops from a desktop group with the specified name.
    .PARAMETER DesktopGroupUid
        Gets desktops from a desktop group with the specified UID.
    .PARAMETER DesktopKind
        Deprecated: Use AllocationType parameter.
        Gets desktops of a particular kind.
        Valid values are Private, Shared.
    .PARAMETER DeviceId
        Gets desktops with a specific client device ID.
    .PARAMETER DNSName
        Gets desktops with a specific DNS name.
    .PARAMETER FunctionalLevel
        Gets desktops with a specific FunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER HardwareId
        Gets desktops with a specific client hardware ID.
    .PARAMETER HostedMachineId
        Gets desktops with a specific machine ID known to the hypervisor.
    .PARAMETER HostedMachineName
        Gets desktops with a specific machine name known to the hypervisor.
    .PARAMETER HostingServerName
        Gets desktops with a specific name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionName
        Gets desktops with a specific name of the hosting hypervisor connection.
    .PARAMETER HypervisorConnectionUid
        Gets desktops with a specific UID of the hosting hypervisor connection.
    .PARAMETER IconUid
        Gets desktops with a specific configured icon. Note that desktops with a null IconUid use the icon of the desktop group.
    .PARAMETER ImageOutOfDate
        Gets desktops by whether their disk image is out of date (for machines provisioned using MCS only).
    .PARAMETER InMaintenanceMode
        Gets desktops with a specific InMaintenanceMode setting.
    .PARAMETER IPAddress
        Gets desktops with a specific IP address.
    .PARAMETER IsAssigned
        Gets desktops according to whether they are assigned or not. Desktops may be assigned to one or more users or groups, a client IP address or a client endpoint name.
    .PARAMETER IsPhysical
        Specifies if machines in the catalog can be power managed by the Citrix Broker Service. Where the power state of the machine cannot be controlled, specify $true, otherwise $false. Can only be specified together with a provisioning type of Pvs or Manual, or if used with the deprecated CatalogKind parameter only with Pvs or PvsPvd catalog kinds.
    .PARAMETER LastConnectionFailure
        Gets desktops with a specific reason for the last recorded connection failure. This value is None if the last connection was successful or if there has been no attempt to connect to the desktop yet.
        Valid values are None, SessionPreparation, RegistrationTimeout, ConnectionTimeout, Licensing, Ticketing, and Other.
    .PARAMETER LastConnectionTime
        Gets desktops that last connected at a specific time. This is the time that the broker detected that the connection attempt either succeeded or failed.
    .PARAMETER LastConnectionUser
        Gets desktops where a specific user name last attempted a connection (in the form 'domain\user').
    .PARAMETER LastDeregistrationReason
        Gets desktops whose broker last recorded a specific deregistration reason.
        Valid values are $null, AgentShutdown, AgentSuspended, AgentRequested, IncompatibleVersion, AgentAddressResolutionFailed, AgentNotContactable, AgentWrongActiveDirectoryOU, EmptyRegistrationRequest, MissingRegistrationCapabilities, MissingAgentVersion, InconsistentRegistrationCapabilities, NotLicensedForFeature, UnsupportedCredentialSecurityVersion, InvalidRegistrationRequest, SingleMultiSessionMismatch, FunctionalLevelTooLowForCatalog, FunctionalLevelTooLowForDesktopGroup, PowerOff, DesktopRestart, DesktopRemoved, AgentRejectedSettingsUpdate, SendSettingsFailure, SessionAuditFailure, SessionPrepareFailure, ContactLost, SettingsCreationFailure, UnknownError and BrokerRegistrationLimitReached.
    .PARAMETER LastDeregistrationTime
        Gets desktops by the time that they were last deregistered.
    .PARAMETER LastErrorReason
        Gets desktops with the specified last error reason.
    .PARAMETER LastErrorTime
        Gets desktops with the specified last error time.
    .PARAMETER LastHostingUpdateTime
        Gets desktops with a specific time that the hosting information was last updated.
    .PARAMETER LaunchedViaHostName
        Gets desktops with a specific host name of the StoreFront server from which the user launched the session.
        Session properties are always null for multi-session desktops.
    .PARAMETER LaunchedViaIP
        Gets desktops with a specific IP address of the StoreFront server from which the user launched the session.
        Session properties are always null for multi-session desktops.
    .PARAMETER MachineInternalState
        Gets desktops with the specified internal machine state.
    .PARAMETER MachineUid
        Gets desktops with a specific machine UID.
    .PARAMETER OSType
        Gets desktops by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets desktops by the version of the operating system they are running.
    .PARAMETER PersistUserChanges
        Gets desktops by the location where the user changes are persisted.
        o OnLocal - User changes are persisted locally. 
        o Discard - User changes are discarded. 
        o OnPvd - User changes are persisted on the Pvd.
    .PARAMETER PowerActionPending
        Gets desktops with a specific power action pending state.
        Valid values are $true or $false.
    .PARAMETER PowerState
        Gets desktops with a specific power state.
        Valid values are Unmanaged, Unknown, Unavailable, Off, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER Protocol
        Gets desktops with connections using a specific protocol, for example HDX, RDP, or Console.
    .PARAMETER ProvisioningType
        Gets desktops that are in a catalog with a particular provisioning type. Values can be:
        o Manual - No provisioning.
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...).
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER PublishedApplication
        Gets desktops with a specific application published to them.
    .PARAMETER PublishedName
        Gets desktops with a specific published name.
    .PARAMETER PvdStage
        Gets desktops with a specific personal vDisk stage.
        Valid values are None, Requested, Starting, Working and Failed.
    .PARAMETER RegistrationState
        Gets desktops with a specific registration state.
        Valid values are Unregistered, Initializing, Registered and AgentError.
    .PARAMETER SecureIcaActive
        Gets desktops depending on whether the current session uses SecureICA or not.
        Session properties are always null for multi-session desktops.
    .PARAMETER SecureIcaRequired
        Gets desktops configured with a particular SecureIcaRequired setting. Note that the desktop setting of $null indicates that the desktop group value is used.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionHidden
        Gets desktops by whether their sessions are hidden or not. Hidden sessions are treated as though they do not exist when launching sessions; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionId
        Deprecated.
        Gets desktops by session ID, a unique identifier that Remote Desktop Services uses to track the session but it is only unique on that machine.
    .PARAMETER SessionState
        Gets desktops with a specific session state.
        Valid values are $null, Other, PreparingSession, Connected, Active, Disconnected, Reconnecting, NonBrokeredSession, and Unknown.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionStateChangeTime
        Gets desktops whose sessions last changed state at a specific time.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionUid
        Gets single-session desktops with a specific session UID ($null for no session).
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionUserName
        Gets desktops with a specific user name for the current session (in the form 'domain\user').
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionUserSID
        Gets desktops with a specific SID of the current session user.
        Session properties are always null for multi-session desktops.
    .PARAMETER SID
        Gets desktops with a specific machine SID.
    .PARAMETER SmartAccessTag
        Gets session desktops where the session has the specific SmartAccess tag.
        Session properties are always null for multi-session desktops.
    .PARAMETER StartTime
        Gets desktops with a specific session start time.
        Session properties are always null for multi-session desktops.
    .PARAMETER SummaryState
        Gets desktops with a specific summary state.
        Valid values are Off, Unregistered, Available, Disconnected, InUse and Preparing.
    .PARAMETER Tag
        Gets desktops with a specific tag.
    .PARAMETER WillShutdownAfterUse
        Gets desktops depending on whether they shut down after use or not.
    .PARAMETER ApplicationUid
        Gets desktops with a specific published application (identified by its UID).
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Desktop])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationInUse},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${AutonomouslyBrokered},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${CatalogUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DeliveryType]
        ${DeliveryType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopCondition},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopKind]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DeviceId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.FunctionalLevel]]
        ${FunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HardwareId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ImageOutOfDate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAssigned},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsPhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ConnectionFailureReason]
        ${LastConnectionFailure},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastConnectionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastConnectionUser},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeregistrationReason]]
        ${LastDeregistrationReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastErrorReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastErrorTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastHostingUpdateTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineInternalState]
        ${MachineInternalState},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${PowerActionPending},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Protocol},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedApplication},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PvdStage]
        ${PvdStage},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RegistrationState]
        ${RegistrationState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaActive},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionHidden},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${SessionId},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionState]]
        ${SessionState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SessionStateChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[long]]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SmartAccessTag},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopSummaryState]
        ${SummaryState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WillShutdownAfterUse},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDesktopGroup {
    <#
    .SYNOPSIS
        Gets broker desktop groups configured for this site.
    .PARAMETER Uid
        Gets desktop groups with the specified value of Uid.
    .PARAMETER Name
        Gets desktop groups whose name matches the supplied pattern.
    .PARAMETER AppDisk
        Gets only desktop groups using the specified application disk.
    .PARAMETER AppDnaAnalysisState
        Gets only desktop groups with specified value of AppDnaAnalysisState
    .PARAMETER AppDnaCompatibility
        Gets only desktop groups with specified value of AppDnaCompatibility
    .PARAMETER AutomaticPowerOnForAssigned
        Gets only desktop groups with the specified value of AutomaticPowerOnForAssigned.
    .PARAMETER AutomaticPowerOnForAssignedDuringPeak
        Gets only desktop groups with the specified value of AutomaticPowerOnForAssignedDuringPeak.
    .PARAMETER ColorDepth
        Gets only desktop groups with the specified color depth.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER DeliveryType
        Gets desktop groups according to their delivery type.
        Valid values are DesktopsOnly, AppsOnly and DesktopsAndApps.
    .PARAMETER Description
        Gets desktop groups whose description matches the supplied pattern.
    .PARAMETER DesktopKind
        Gets desktops of a particular kind.
        Valid values are Private and Shared.
    .PARAMETER Enabled
        Gets desktop groups with the specified value of Enabled.
    .PARAMETER InMaintenanceMode
        Gets desktop groups with the specified value of InMaintenanceMode.
    .PARAMETER IsRemotePC
        Gets desktop groups with the specified IsRemotePC value.
    .PARAMETER LicenseModel
        Gets desktop groups with the specified license model.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER MinimumFunctionalLevel
        Gets desktop groups with a specific MinimumFunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER OffPeakBufferSizePercent
        Gets desktop groups with the specified value of OffPeakBufferSizePercent.
    .PARAMETER OffPeakDisconnectAction
        Gets desktop groups with the specified value of OffPeakDisconnectAction.
    .PARAMETER OffPeakDisconnectTimeout
        Gets desktop groups with the specified value of OffPeakDisconnectTimeout.
    .PARAMETER OffPeakExtendedDisconnectAction
        Gets desktop groups with the specified value of OffPeakExtendedDisconnectAction.
    .PARAMETER OffPeakExtendedDisconnectTimeout
        Gets desktop groups with the specified value of OffPeakExtendedDisconnectTimeout.
    .PARAMETER OffPeakLogOffAction
        Gets desktop groups with the specified value of OffPeakLogOffAction.
    .PARAMETER OffPeakLogOffTimeout
        Gets desktop groups with the specified value of OffPeakLogOffTimeout.
    .PARAMETER PeakBufferSizePercent
        Gets desktop groups with the specified value of PeakBufferSizePercent.
    .PARAMETER PeakDisconnectAction
        Gets desktop groups with the specified value of PeakDisconnectAction.
    .PARAMETER PeakDisconnectTimeout
        Gets desktop groups with the specified value of PeakDisconnectTimeout.
    .PARAMETER PeakExtendedDisconnectAction
        Gets desktop groups with the specified value of PeakExtendedDisconnectAction.
    .PARAMETER PeakExtendedDisconnectTimeout
        Gets desktop groups with the specified value of PeakExtendedDisconnectTimeout.
    .PARAMETER PeakLogOffAction
        Gets desktop groups with the specified value of PeakLogOffAction.
    .PARAMETER PeakLogOffTimeout
        Gets desktop groups with the specified value of PeakLogOffTimeout.
    .PARAMETER ProductCode
        Gets desktop groups with the specified licensing product code.
    .PARAMETER PublishedName
        Gets desktop groups whose published name matches the supplied pattern.
    .PARAMETER ReuseMachinesWithoutShutdownInOutage
        Gets only desktop groups that won't shut down machines after they been used during outage.
    .PARAMETER ScopeId
        Gets desktop groups that are associated with the given scope identifier.
    .PARAMETER ScopeName
        Gets desktop groups that are associated with the given scope name.
    .PARAMETER SecureIcaRequired
        Gets desktop groups with the specified value of SecureIcaRequired.
    .PARAMETER SessionSupport
        Gets desktop groups that have the specified session capability. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER SettlementPeriodBeforeAutoShutdown
        Gets desktop groups with the specified value of SettlementPeriodBeforeAutoShutdown.
    .PARAMETER SettlementPeriodBeforeUse
        Gets desktop groups with the specified value of SettlementPeriodBeforeUse.
    .PARAMETER ShutdownDesktopsAfterUse
        Gets desktop groups with the specified value of ShutdownDesktopsAfterUse.
    .PARAMETER Tag
        Gets desktop groups tagged with the specified tag.
    .PARAMETER TenantId
        Gets desktop groups associated with the specified tenant identity.
    .PARAMETER TimeZone
        Gets desktop groups with the specified value of TimeZone.
    .PARAMETER TotalApplicationGroups
        Gets desktop groups that are acting as delivery groups for the specified number of application groups.
    .PARAMETER TotalApplications
        Gets desktop groups that are acting as delivery groups for the specified number of applications.
    .PARAMETER TurnOnAddedMachine
        Gets desktop groups with the specified value of TurnOnAddedMachine value.
    .PARAMETER UUID
        Gets desktop groups with the specified value of UUID.
    .PARAMETER ZonePreference
        Gets desktop groups with a zone preference list containing the specified zone preference.
    .PARAMETER ApplicationGroupUid
        Gets only desktop groups with which the specified application group has been associated.
    .PARAMETER ApplicationUid
        Gets desktop groups that publish the specified application (identified by Uid)
    .PARAMETER TagUid
        Gets desktop groups to which the specified tag (identified by its Uid) has been added to help identify it - see Add-BrokerTag for more information.
    .PARAMETER PowerTimeSchemeUid
        Gets desktop groups associated with the specified power time scheme (identified by its Uid).
    .PARAMETER MachineConfigurationUid
        Gets desktop groups with the specified value of MachineConfiguration.
    .PARAMETER RemotePCCatalogUid
        Gets Remote PC desktop groups associated with the specified catalog.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroup])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${AppDisk},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.AppDnaAnalysisState]]
        ${AppDnaAnalysisState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.AppDnaCompatibility]]
        ${AppDnaCompatibility},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${AutomaticPowerOnForAssigned},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${AutomaticPowerOnForAssignedDuringPeak},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ColorDepth]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DeliveryType]
        ${DeliveryType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopKind]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsRemotePC},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.LicenseModel]]
        ${LicenseModel},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.FunctionalLevel]
        ${MinimumFunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${OffPeakBufferSizePercent},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakDisconnectAction},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${OffPeakDisconnectTimeout},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakExtendedDisconnectAction},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${OffPeakExtendedDisconnectTimeout},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakLogOffAction},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${OffPeakLogOffTimeout},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${PeakBufferSizePercent},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakDisconnectAction},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${PeakDisconnectTimeout},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakExtendedDisconnectAction},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${PeakExtendedDisconnectTimeout},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakLogOffAction},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${PeakLogOffTimeout},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ProductCode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ReuseMachinesWithoutShutdownInOutage},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ScopeId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ScopeName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${SettlementPeriodBeforeAutoShutdown},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${SettlementPeriodBeforeUse},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ShutdownDesktopsAfterUse},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${TimeZone},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TotalApplicationGroups},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TotalApplications},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${TurnOnAddedMachine},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ZonePreference]
        ${ZonePreference},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${TagUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${PowerTimeSchemeUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineConfigurationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${RemotePCCatalogUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDesktopGroupAnalysisReport {
    <#
    .SYNOPSIS
        Gets the detailed AppDNA compatibility report for AppDisk(s) associated with a particular Desktop Group.
    .PARAMETER InputObject
        The desktop group(s) on which to retrieve the detailed reports
    .PARAMETER AppDiskUid
        AppDisk unique identifier. If set, the report will be filtered down to only include this AppDisk.
    .PARAMETER RetrieveReportContentsAsMHT
        Retrieve the report as a MHT file
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.AnalysisReport])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(Position=2)]
        [System.Nullable[guid]]
        ${AppDiskUid},
        
        [switch]
        ${RetrieveReportContentsAsMHT},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDesktopGroupAppDisk {
    <#
    .SYNOPSIS
        Gets the AppDisks that are being used by desktop group
    .PARAMETER DesktopGroupName
        Gets only the entries that match the specified Desktop Group Name
    .PARAMETER AppDiskUid
        Gets only the entries that match the specified AppDisk Uid
    .PARAMETER AppDnaCompatibility
        Gets only the entries that match the specified AppDnaCompatibility
    .PARAMETER DesktopGroupUid
        Gets only the entries that match the specified Desktop Group Uid
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroupAppDisk])]
    param (
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${AppDiskUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.AppDnaCompatibility]]
        ${AppDnaCompatibility},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDesktopGroupWebhook {
    <#
    .SYNOPSIS
        Gets the webhook configured for desktop group
    .PARAMETER Uid
        Get only webhooks that match the specified Webhook Uid
    .PARAMETER Address
        Gets only webhooks whose URL matches that specified.
    .PARAMETER DesktopGroupName
        Gets only webhooks associated with desktop groups whose names match that specified.
    .PARAMETER DesktopGroupUid
        Gets only webhooks associated with the specified desktop group.
    .PARAMETER OnEvent
        Gets only webhooks that match the specified OnEvent.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroupWebhook])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Address},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.WebhookTrigger]
        ${OnEvent},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerDesktopUsage {
    <#
    .SYNOPSIS
        Get usage history of desktop groups.
    .PARAMETER DesktopGroupName
        Gets usage records for the named desktop group or for multiple desktop groups if wildcards have been specified.
    .PARAMETER DesktopGroupUid
        Gets usage records for a specific desktop group.
    .PARAMETER InUse
        Gets usage records where the in-use count matches the specified value. This is useful when checking for zero or when used inside a -Filter expression.
    .PARAMETER Timestamp
        Gets usage records that occurred at the given time.
        In general, Citrix recommends, using -Filter and relative comparisons. For a demonstration, see the examples.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopUsage])]
    param (
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${InUse},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${Timestamp},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Gets desktop rules from the site's entitlement policy.
    .PARAMETER Uid
        Gets the desktop rule with the specified unique ID.
    .PARAMETER Name
        Gets only desktop rules with the specified name.
    .PARAMETER BrowserName
        Gets only desktop rules with browser names matching the specified name.
    .PARAMETER ColorDepth
        Gets only desktop rules with the specified color depth.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER Description
        Gets only desktop rules with the specified description.
    .PARAMETER DesktopGroupUid
        Gets only desktop rules that apply to the desktop group with the specified unique ID.
    .PARAMETER Enabled
        Gets only desktop rules that are in the specified state, either enabled ($true), or disabled ($false).
    .PARAMETER ExcludedUser
        Gets only desktop rules that have the specified user in their excluded users filter (whether the filter is enabled or not).
    .PARAMETER ExcludedUserFilterEnabled
        Gets only desktop rules that have their excluded user filter enabled ($true) or disabled ($false).
    .PARAMETER IconUid
        Gets only desktop rules using the icon with the specified unique ID.
    .PARAMETER IncludedUser
        Gets only desktop rules that have the specified user in their included users filter (whether the filter is enabled or not).
    .PARAMETER IncludedUserFilterEnabled
        Gets only desktop rules that have their included user filter enabled ($true) or disabled ($false).
    .PARAMETER LeasingBehavior
        Gets only application rules with the specified connection leasing behavior. Possible values are:
        Allowed and Disallowed.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER PublishedName
        Gets only desktop rules with the specified published name, that is, the desktop session entitlement name that the end user sees.
    .PARAMETER RestrictToTag
        Gets only desktop rules with the specified tag restriction.
    .PARAMETER SecureIcaRequired
        Gets only desktop rules that require the desktop session to use the SecureICA protocol ($true) or not ($false).
    .PARAMETER SessionReconnection
        Gets only desktop rules with the specified session reconnection behavior. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER UUID
        Gets rules with the specified value of UUID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.EntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrowserName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${ExcludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.User]
        ${IncludedUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.LeasingBehavior]
        ${LeasingBehavior},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${RestrictToTag},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionReconnection]
        ${SessionReconnection},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerHostingPowerAction {
    <#
    .SYNOPSIS
        Gets power actions queued for machines.
    .PARAMETER Uid
        Gets only the single action record whose ID matches the specified value.
    .PARAMETER MachineName
        Gets only the records for actions that are for machines whose name (of the form domain\machine) matches the specified string.
    .PARAMETER Action
        Gets only action records with the specified action type.
        Valid values are TurnOn, TurnOff, ShutDown, Reset, Restart, Suspend and Resume.
    .PARAMETER ActionCompletionTime
        Gets only action records reported as having completed successfully at the specified time. This is useful with advanced filtering; for more information, see about_Broker_Filtering.
    .PARAMETER ActionStartTime
        Gets only action records reported as starting to be processed by the relevant hypervisor at the specified time. This is useful with advanced filtering; for more information, see about_Broker_Filtering.
    .PARAMETER ActualPriority
        Gets only the records for actions whose current active priority matches the specified value.
    .PARAMETER BasePriority
        Gets only the records for actions whose original priority matches the specified value.
    .PARAMETER DNSName
        Gets only the records for actions that are for machines whose DNS name matches the specified string.
    .PARAMETER FailureReason
        Gets only the records for actions that have failed and whose failure reason string matches the specified string.
    .PARAMETER HostedMachineName
        Gets only the records for actions that are for machines whose Hosting Name (the machine name as understood by by the hypervisor) matches the specified string.
    .PARAMETER HypervisorConnectionName
        Gets only the records for actions for machines hosted via a hypervisor connection whose name matches the specified string.
    .PARAMETER HypervisorConnectionUid
        Gets only the records for actions for machines hosted via a hypervisor connection whose ID matches the specified value.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER RequestTime
        Gets only the records for actions created and added to the queue at the specified time. This is useful with advanced filtering; for more information, see about_Broker_Filtering.
    .PARAMETER State
        Gets only the records for actions with the specified current state.
        Valid values are Pending, Started, Completed, Failed, Canceled, Deleted and Lost.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.HostingPowerAction])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerManagementAction]
        ${Action},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${ActionCompletionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${ActionStartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ActualPriority},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${BasePriority},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${FailureReason},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${RequestTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerActionState]
        ${State},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerHypervisorAlert {
    <#
    .SYNOPSIS
        Gets hypervisor alerts recorded by the controller.
    .PARAMETER Uid
        Gets the hypervisor alert with the specified UID.
    .PARAMETER HostingServerName
        Gets alerts for the specified hosting hypervisor server.
    .PARAMETER HypervisorConnectionUid
        Gets alerts for the specified hypervisor connection.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER Metric
        Gets alerts for a specified metric.
        Valid values are: Cpu, Memory, Network and Disk.
    .PARAMETER Severity
        Gets alerts with the specified severity.
        Valid values are: Red and Yellow.
    .PARAMETER Time
        Gets alerts that occurred at a specific time.
        You can also use -Filter and relative comparisons; see the examples for more information.
    .PARAMETER TriggerInterval
        Gets alerts with a specific trigger interval. This is the interval before the alert is raised again.
    .PARAMETER TriggerLevel
        Gets alerts with a specific trigger threshold level.
    .PARAMETER TriggerPeriod
        Gets alerts with a specific trigger period. This is the duration the threshold level was exceeded for, prior to the alert triggering.
    .PARAMETER TriggerValue
        Gets the value of the monitored metric that triggered the alert.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.HypervisorAlert])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AlertMetric]
        ${Metric},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AlertSeverity]
        ${Severity},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${Time},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[timespan]]
        ${TriggerInterval},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[double]]
        ${TriggerLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[timespan]]
        ${TriggerPeriod},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[double]]
        ${TriggerValue},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerHypervisorConnection {
    <#
    .SYNOPSIS
        Gets hypervisor connections matching the specified criteria.
    .PARAMETER Uid
        Gets the hypervisor connection with the specified internal id.
    .PARAMETER Name
        Gets hypervisor connections with the specified name.
    .PARAMETER ExplicitPreferredController
        Gets hypervisor connections based on whether their preferred controller was explicitly specified or not
    .PARAMETER HypHypervisorConnectionUid
        Gets hypervisor connections with the specified Guid.
    .PARAMETER IsReady
        Gets hypervisor connections with the specified value of the IsReady flag.
    .PARAMETER MachineCount
        Gets hypervisor connections with the specified machine count.
    .PARAMETER MaxAbsoluteActiveActions
        Gets hypervisor connections with the specified MaxAbsoluteActiveActions value.
    .PARAMETER MaxAbsoluteNewActionsPerMinute
        Gets hypervisor connections with the specified MaxAbsoluteNewActionsPerMinute value.
    .PARAMETER MaxAbsolutePvdPowerActions
        Gets hypervisor connections with the specified MaxAbsolutePvdPowerActions value.
    .PARAMETER MaxPercentageActiveActions
        Gets hypervisor connections with the specified MaxPercentageActiveActions value.
    .PARAMETER MaxPvdPowerActionsPercentageOfDesktops
        Gets hypervisor connections with the specified MaxPvdPowerActionsPercentageOfDesktops value.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER PreferredController
        Gets hypervisor connections with the specified preferred controller. Specify the SAM name of the controller.
    .PARAMETER State
        Gets hypervisor connections with the specified connection state. Values can be can be:
        o Unavailable - The broker is unable to contact the hypervisor. 
        o InMaintenanceMode - The hosting server is in maintenance mode. 
        o On - The broker is in contact with the hypervisor.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.HypervisorConnection])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ExplicitPreferredController},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${HypHypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsReady},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineCount},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${MaxAbsoluteActiveActions},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${MaxAbsoluteNewActionsPerMinute},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${MaxAbsolutePvdPowerActions},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${MaxPercentageActiveActions},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${MaxPvdPowerActionsPercentageOfDesktops},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PreferredController},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.HypervisorConnectionState]
        ${State},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerIcon {
    <#
    .SYNOPSIS
        Get stored icons.
    .PARAMETER Uid
        Gets only the icon specified by unique identifier.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER FileName
        Specifies the name of a file from which to read the icon data. If the ServerName parameter is used, the FileName must be an absolute path.
    .PARAMETER ServerName
        Specifies the name of the server. If the -FileName parameter refers to content or to a URL, the icon associated with the file type or URL is retrieved from the given server.  Therefore, the server specified should have a file type handler installed for the given file type.  If a local file path is specified, the server name refers to the server on which the file is located.  If a UNC path is specified, the server name is unused.
    .PARAMETER Index
        Specifies the zero-based icon resource index. For example, to select the first icon, specify an index of 0. Alternatively, to select the third icon, specify an index of 2.  If the specified index is larger than the number of icons in the source file or profiled application, an error will be returned.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Icon])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='ByFileName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileName},
        
        [Parameter(ParameterSetName='ByFileName', ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ServerName},
        
        [Parameter(ParameterSetName='ByFileName', ValueFromPipelineByPropertyName=$true)]
        [ValidateRange(0, 9999)]
        [System.Nullable[int]]
        ${Index},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerImportedFTA {
    <#
    .SYNOPSIS
        Gets the imported file type associations.
    .PARAMETER Uid
        Gets only the imported file type associations with the specified unique identifier.
    .PARAMETER ExtensionName
        Gets only the imported file type associations with the specified extension name. For example, ".txt" or ".png".
    .PARAMETER ContentType
        Gets only the imported file type associations with the specified content type (as listed in the Registry). For example, "application/msword".
    .PARAMETER Description
        Gets only the imported file type associations with the specified description (as listed in the Registry). For example, "Text Document" or "Microsoft Word text document".
    .PARAMETER DesktopGroupUid
        Gets only the file type associations imported from a worker machine belonging to the specified desktop group.
    .PARAMETER Edit
        Gets only the imported file type associations with the specified Edit command, that includes both the executable name and path, and any arguments to that executable.
    .PARAMETER EditArguments
        Gets only the imported file type associations with the specified arguments to the Edit command.
    .PARAMETER EditExecutableName
        Gets only the imported file type associations with the specified executable for the Edit command.
    .PARAMETER HandlerName
        Gets only the imported file type associations with the specified handler name (as listed in the Registry). For example, "TXTFILE" or "Word.Document.8".
    .PARAMETER Open
        Gets only the imported file type associations with the specified Open command, that includes both the executable name and path, and any  arguments to that executable.
    .PARAMETER OpenArguments
        Gets only the imported file type associations with the specified arguments to the Open command.
    .PARAMETER OpenExecutableName
        Gets only the imported file type associations with the specified executable for the Open command.
    .PARAMETER PerceivedType
        Gets only the imported file type associations with the specified perceived type (as listed in the Registry). For example, "document".
    .PARAMETER Print
        Gets only the imported file type associations with the specified Print command.
    .PARAMETER PrintTo
        Gets only the imported file type associations with the specified PrintTo command.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ImportedFTA])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${ExtensionName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ContentType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Edit},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${EditArguments},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${EditExecutableName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HandlerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Open},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OpenArguments},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OpenExecutableName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PerceivedType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Print},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PrintTo},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerInstalledDbVersion {
    <#
    .SYNOPSIS
        Gets a list of all available database schema versions for the Broker Service.
    .PARAMETER Upgrade
        Specifies that only schema versions to which the current database version can be updated should be returned.
    .PARAMETER Downgrade
        Specifies that only schema versions to which the current database version can be reverted should be returned.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.Version])]
    param (
        [switch]
        ${Upgrade},
        
        [switch]
        ${Downgrade},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerLease {
    <#
    .SYNOPSIS
        Gets stored leases.
    .PARAMETER Uid
        Gets only the lease specified by unique identifier.
    .PARAMETER Key
        Gets only the leases matching the specified lease key pattern.
    .PARAMETER Expiration
        Gets only the leases matching the specified expiration date and time.
    .PARAMETER LastModified
        Gets only the leases matching the specified modified date and time.
    .PARAMETER LeaseType
        Gets only leases of a specific type. Possible values Enumeration, Launch.
    .PARAMETER OwnerSAMName
        Gets only the leases associated with the specified Domain\User.
    .PARAMETER OwnerSID
        Gets only the leases associated with the specified user SID.
    .PARAMETER OwnerUPN
        Gets only the leases associated with the specified user UPN.
    .PARAMETER ZoneUid
        Gets only the leases of resources beloning to Zone with specified Uid.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Lease])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Key},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${Expiration},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${LastModified},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.BrokerLeaseType]
        ${LeaseType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OwnerSAMName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OwnerSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OwnerUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${ZoneUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerMachine {
    <#
    .SYNOPSIS
        Gets machines belonging to this site.
    .PARAMETER Uid
        Gets a machine with a specific UID.
    .PARAMETER MachineName
        Gets machines with a specific machine name (in the form domain\machine).
    .PARAMETER AgentVersion
        Gets machines with a specific Citrix Virtual Delivery Agent version.
    .PARAMETER AllocationType
        Gets machines from catalogs with the specified allocation type.
    .PARAMETER ApplicationInUse
        Gets machines running a specified published application (identified by browser name).
        String comparisons are case-insensitive.
    .PARAMETER AssignedClientName
        Gets machines that have been assigned to the specific client name.
    .PARAMETER AssignedIPAddress
        Gets machines that have been assigned to the specific IP address.
    .PARAMETER AssignedUserSID
        Gets machines with the specific SID of the user to whom the desktop is assigned.
    .PARAMETER AssociatedTenantId
        Gets machines associated with the specified tenant.
    .PARAMETER AssociatedUserFullName
        Gets machines with an associated user identified by their full name (usually 'first-name last-name').
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER AssociatedUserName
        Gets machines with an associated user identified by their user name (in the form 'domain\user').
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER AssociatedUserSID
        Gets machines with an associated user identified by their Windows SID.
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER AssociatedUserUPN
        Gets machines with an associated user identified by their User Principle Name (in the form 'user@domain').
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER BrowserName
        Gets assigned machines backing desktop resources that have browser names matching the specified name.
    .PARAMETER CatalogName
        Gets machines from the catalog with the specific name.
    .PARAMETER CatalogUid
        Gets machines from the catalog with the specific UID.
    .PARAMETER CatalogUUID
        Gets machines from the catalog with the specific UUID.
    .PARAMETER CbpVersion
        The version of CBP that the VDA is currently registered with. This will be null when the VDA is not registered.
    .PARAMETER ColorDepth
        Gets machines configured with a specific color depth.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER ControllerDNSName
        Gets machines with a specific DNS name of the controller they are registered with.
    .PARAMETER DeliveryType
        Gets machines of a particular delivery type.
        Valid values are AppsOnly, DesktopsOnly, DesktopsAndApps
    .PARAMETER Description
        Gets machines with a specific description.
    .PARAMETER DesktopCondition
        Gets machines with an outstanding desktop condition.
        Valid values are:
        o CPU: Indicates the machine has high CPU usage
        o ICALatency: Indicates the network latency is high
        o UPMLogonTime: Indicates that the profile load time was high
    .PARAMETER DesktopGroupName
        Gets machines from a desktop group with the specified name.
    .PARAMETER DesktopGroupUid
        Gets machines from a desktop group with a specific UID.
    .PARAMETER DesktopGroupUUID
        Gets machines from a desktop group with a specific UUID.
    .PARAMETER DesktopKind
        Deprecated: Use AllocationType parameter.
        Gets machines of a particular kind.
        Valid values are Private, Shared.
    .PARAMETER DesktopUid
        Gets the machine that corresponds to the desktop with the specific UID.
    .PARAMETER DNSName
        Gets machines with the specific DNS name.
    .PARAMETER FaultState
        Gets machines currently in the specified fault state.
    .PARAMETER FunctionalLevel
        Gets machines with a specific FunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER HostedMachineId
        Gets machines with the specific machine ID known to the hypervisor.
    .PARAMETER HostedMachineName
        Gets machines with the specific machine name known to the hypervisor.
    .PARAMETER HostingServerName
        Gets machines by the name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionName
        Gets machines with the specific name of the hypervisor connection hosting them.
    .PARAMETER HypervisorConnectionUid
        Gets machines with the specific UID of the hypervisor connection hosting them.
    .PARAMETER HypHypervisorConnectionUid
        Gets machines with the specific UUID of the hypervisor connection hosting them.
    .PARAMETER IconUid
        Gets machines by configured icon. Note that machines with a null IconUid use the icon of the desktop group.
    .PARAMETER ImageOutOfDate
        Gets machines depending on whether their disk image is out of date or not (for machines provisioned using MCS only).
    .PARAMETER InMaintenanceMode
        Gets machines by whether they are in maintenance mode or not.
    .PARAMETER IPAddress
        Gets machines with a specific IP address.
    .PARAMETER IsAssigned
        Gets machines according to whether they are assigned or not. Machines may be assigned to one or more users or groups, a client IP address or a client endpoint name.
    .PARAMETER IsPhysical
        Gets machines according to whether they can be power managed by XenDesktop or not.
    .PARAMETER IsReserved
        Gets machines that are reserved for special use, for example, for AppDisk preparation.
    .PARAMETER LastConnectionFailure
        Gets machines with a specific reason for the last recorded connection failure. This value is None if the last connection was successful or if there has been no attempt to connect to the desktop yet.
        Valid values are None, SessionPreparation, RegistrationTimeout, ConnectionTimeout, Licensing, Ticketing, and Other.
    .PARAMETER LastConnectionTime
        Gets machines on which a user session connection occurred at a specific time. This is the time at which the broker detected that the connection attempt either succeeded or failed.
    .PARAMETER LastConnectionUser
        Gets machines where a specific user name last attempted a connection (in the form 'domain\user').
    .PARAMETER LastDeregistrationReason
        Gets machines whose broker last recorded a specific deregistration reason.
        Valid values are $null, AgentShutdown, AgentSuspended, AgentRequested, IncompatibleVersion, AgentAddressResolutionFailed, AgentNotContactable, AgentWrongActiveDirectoryOU, EmptyRegistrationRequest, MissingRegistrationCapabilities, MissingAgentVersion, InconsistentRegistrationCapabilities, NotLicensedForFeature, UnsupportedCredentialSecurityVersion, InvalidRegistrationRequest, SingleMultiSessionMismatch, FunctionalLevelTooLowForCatalog, FunctionalLevelTooLowForDesktopGroup, PowerOff, DesktopRestart, DesktopRemoved, AgentRejectedSettingsUpdate, SendSettingsFailure, SessionAuditFailure, SessionPrepareFailure, ContactLost, SettingsCreationFailure, UnknownError and BrokerRegistrationLimitReached.
    .PARAMETER LastDeregistrationTime
        Gets machines by the time that they were last deregistered.
    .PARAMETER LastErrorReason
        Gets machines with the specified last error reason.
    .PARAMETER LastErrorTime
        Gets machines with the specified last error time.
    .PARAMETER LastHostingUpdateTime
        Gets machines with a specific time that the hosting information was last updated.
    .PARAMETER LastPvdErrorReason
        Gets machines with the specified last Personal vDisk preparation error reason.
    .PARAMETER LastPvdErrorTime
        Gets machines with the specified last Personal vDisk preparation error time.
    .PARAMETER LoadIndex
        Gets machines by their current load index.
    .PARAMETER MachineInternalState
        Gets machines with the specified internal state.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER OSType
        Gets machines by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets machines by the version of the operating system they are running.
    .PARAMETER PersistUserChanges
        Gets machines by the location where the user changes are persisted.
        o OnLocal - User changes are persisted locally. 
        o Discard - User changes are discarded. 
        o OnPvd - User changes are persisted on the Pvd.
    .PARAMETER PowerActionPending
        Gets machines depending on whether a power action is pending or not.
        Valid values are $true or $false.
    .PARAMETER PowerState
        Gets machines with a specific power state.
        Valid values are Unmanaged, Unknown, Unavailable, Off, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER ProvisioningType
        Gets machines that are in a catalog with a particular provisioning type. Values can be:
        o Manual - No provisioning. 
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...). 
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER PublishedApplication
        Gets machines with a specific application published to them (identified by its browser name).
    .PARAMETER PublishedName
        Gets desktops with a specific published name.
    .PARAMETER PvdEstimatedCompletionTime
        If preparation of the Personal vDisk is currently in progress for this machine, this reports an estimation of the time at which the process will be complete.
    .PARAMETER PvdPercentDone
        Gets machines a specific percentage through the Personal vDisk preparation process.
        This property is typically used with advanced filtering; see about_Broker_Filtering.
    .PARAMETER PvdStage
        Gets machines at a specific personal vDisk stage.
        Valid values are None, Requested, Starting, Working and Failed.
    .PARAMETER PvdUpdateStartTime
        If preparation of the Personal vDisk is currently in progress for this machine, this reports when the update process began.
    .PARAMETER RegistrationState
        Gets machines in a specific registration state.
        Valid values are Unregistered, Initializing, Registered, and AgentError.
    .PARAMETER ScheduledReboot
        Gets machines according to their current status with respect to any scheduled reboots (for either scheduled desktop group reboots or image rollout purposes). Valid values are:
        o None - No reboot currently scheduled.
        o Pending - Reboot scheduled but machine still available for use.
        o Draining - Reboot scheduled. New logons are disabled, but reconnections to existing sessions are allowed.
        o InProgress - Machine is actively being rebooted.
        o Natural - Natural reboot in progress. Machine is awaiting a restart.
    .PARAMETER SecureIcaRequired
        Gets machines configured with a particular SecureIcaRequired setting. Note that the machine setting of $null indicates that the desktop group value is used.
    .PARAMETER SessionAutonomouslyBrokered
        Gets machines according to whether their current session is autonomously brokered or not. Autonomously brokered sessions are HDX sessions established by direct connection without being brokered.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionClientAddress
        Gets machines with a specific client IP address.
    .PARAMETER SessionClientName
        Gets machines with a specific client name.
    .PARAMETER SessionClientVersion
        Gets machines with a specific client version.
    .PARAMETER SessionConnectedViaHostName
        Gets machines with a specific incoming connection host name. This is usually a proxy or Citrix Access Gateway server.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionConnectedViaIP
        Gets machines with a specific incoming connection IP address.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionCount
        Gets machines according to the total number of both pending and established user sessions on the machine.
    .PARAMETER SessionDeviceId
        Gets machines with a specific client device ID.
    .PARAMETER SessionHardwareId
        Gets machines with a specific client hardware ID.
    .PARAMETER SessionHidden
        Gets machines depending on whether their sessions are hidden or not. Hidden sessions are treated as though they do not exist when launching sessions using XenDesktop; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
    .PARAMETER SessionKey
        Gets machine running the session with a specified unique key.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionLaunchedViaHostName
        Gets machines with a specific host name of the StoreFront server from which the user launched the session.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionLaunchedViaIP
        Gets machines with a specific IP address of the StoreFront server from which the user launched the session.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionProtocol
        Gets machines with connections using a specific protocol, for example HDX, RDP, or Console.
    .PARAMETER SessionSecureIcaActive
        Gets machines depending on whether the current session uses SecureICA or not.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionsEstablished
        Gets machines according to the number of established user sessions present on the machine.
    .PARAMETER SessionSmartAccessTag
        Gets machines where the session has the specific SmartAccess tag.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionsPending
        Get machines according to the number of pending user sessions for the machine.
    .PARAMETER SessionStartTime
        Gets machines with a specific session start time.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionState
        Gets machines with a specific session state.
        Valid values are $null, Other, PreparingSession, Connected, Active, Disconnected, Reconnecting, NonBrokeredSession, and Unknown.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionStateChangeTime
        Gets machines whose sessions last changed state at a specific time.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionSupport
        Gets machines that have the specified session capability. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession - Multi-session capable machine.
    .PARAMETER SessionType
        Gets machines with a specific session state.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionUid
        Gets machines with a specific session UID ($null for no session).
        Session properties are always null for multi-session machines.
    .PARAMETER SessionUserName
        Gets machines with a specific user name for the current session (in the form 'domain\user').
        Session properties are always null for multi-session machines.
    .PARAMETER SessionUserSID
        Gets machines with a specific SID of the current session user.
        Session properties are always null for multi-session machines.
    .PARAMETER SID
        Gets machines with a specific machine SID.
        Session properties are always null for multi-session machines.
    .PARAMETER SummaryState
        Gets machines with a specific summary state.
        Valid values are Off, Unregistered, Available, Disconnected, and InUse.
    .PARAMETER SupportedPowerActions
        A list of power actions supported by this machine.
    .PARAMETER Tag
        Gets machines associated with the specified tag.
    .PARAMETER UUID
        Gets machines with the specified value of UUID.
    .PARAMETER VMToolsState
        Gets machines with a specific VM tools state.
        Valid values are NotPresent, Unknown, NotStarted, and Running.
    .PARAMETER WillShutdownAfterUse
        Gets machines depending on whether they shut down after use or not.
    .PARAMETER WindowsConnectionSetting
        Gets machines according to their current Windows connection setting (logon mode). Valid values are:
        o LogonEnabled - All logons are enabled.
        o Draining - New logons are disabled, but reconnections to existing sessions are allowed.
        o DrainingUntilRestart - Same as Draining, but setting reverts to LogonEnabled when machine next restarts.
        o LogonDisabled - All logons and reconnections are disabled.
        This is a Windows setting and is not controlled by XenDesktop. It applies only to multi-session machines; for single-session machines its value is always LogonEnabled.
    .PARAMETER ZoneName
        Gets machines located in the zone with the specified name.
    .PARAMETER ZoneUid
        Gets machines located in the zone with the specified UID.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Machine])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AllocationType]
        ${AllocationType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationInUse},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${AssociatedTenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrowserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${CatalogUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${CatalogUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.CBPVersion]]
        ${CbpVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeliveryType]]
        ${DeliveryType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopCondition},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${DesktopGroupUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DesktopKind]]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${DesktopUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineFaultState]
        ${FaultState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.FunctionalLevel]]
        ${FunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${HypHypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ImageOutOfDate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAssigned},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsPhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsReserved},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ConnectionFailureReason]
        ${LastConnectionFailure},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastConnectionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastConnectionUser},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeregistrationReason]]
        ${LastDeregistrationReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastErrorReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastErrorTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastHostingUpdateTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastPvdErrorReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastPvdErrorTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${LoadIndex},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineInternalState]
        ${MachineInternalState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${PowerActionPending},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedApplication},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${PvdEstimatedCompletionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${PvdPercentDone},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PvdStage]
        ${PvdStage},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${PvdUpdateStartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RegistrationState]
        ${RegistrationState},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ScheduledReboot]
        ${ScheduledReboot},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionAutonomouslyBrokered},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionClientAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionClientVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionConnectedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionConnectedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionCount},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionDeviceId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionHardwareId},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionHidden},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${SessionKey},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionLaunchedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionLaunchedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionProtocol},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionSecureIcaActive},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionsEstablished},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionSmartAccessTag},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionsPending},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SessionStartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionState]]
        ${SessionState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SessionStateChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionType]]
        ${SessionType},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[long]]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopSummaryState]
        ${SummaryState},
        
        [Parameter(ParameterSetName='Filter')]
        [string[]]
        ${SupportedPowerActions},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.VMToolsState]
        ${VMToolsState},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WillShutdownAfterUse},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.WindowsConnectionSetting]]
        ${WindowsConnectionSetting},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ZoneUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerMachineCommand {
    <#
    .SYNOPSIS
        Get the list of commands queued for delivery to a desktop.
    .PARAMETER Uid
        Get only the command with the specified unique identifier.
    .PARAMETER Category
        Get only commands targeted to the specified service category.
    .PARAMETER CommandName
        Get only commands with the specified command name.
    .PARAMETER CompletionTime
        Get only commands that entered the Sent, Failed, Canceled or Expired state at the specified time.
    .PARAMETER MachineName
        Get only commands targeted to the specified machine.
    .PARAMETER MachineUid
        Get only commands targeted to the specified machine.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER RequestTime
        Get only commands that were requested at the specified time.
    .PARAMETER SendDeadline
        Get only commands that expire after the specified time span.
    .PARAMETER SendDeadlineTime
        Get only commands that have the specified deadline time.
    .PARAMETER SendTrigger
        Get only commands that are due to be sent when the specified trigger occurs. Valid values are  NextContact, Broker, LogOn, Logoff, Disconnect and Reconnect.
    .PARAMETER SessionUid
        Get only commands targeted to the specified session.
    .PARAMETER State
        Get only commands in the specified state. Valid values are Pending, Sent, Failed, Canceled and Expired.
    .PARAMETER User
        Get only commands targeted to the specified user.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.MachineCommand])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Category},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CommandName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${CompletionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${RequestTime},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${SendDeadline},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SendDeadlineTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.MachineCommandTrigger]]
        ${SendTrigger},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[long]]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineCommandState]
        ${State},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${User},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerMachineConfiguration {
    <#
    .SYNOPSIS
        Gets machine configurations defined for this site.
    .PARAMETER Uid
        Get only the machine configuration with the specified unique identifier.
    .PARAMETER Name
        Get only the machine configuration with the specified name.
    .PARAMETER ConfigurationSlotUid
        Get only the machine configurations associated with the specified configuration slot.
    .PARAMETER LeafName
        Get only the machine configurations that have the specified leaf name.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER ApplicationUid
        Get only the machine configurations that have been assigned to the specified application.
    .PARAMETER DesktopGroupUid
        Get only the machine configurations that have been assigned to the specified desktop group.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.MachineConfiguration])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ConfigurationSlotUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LeafName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerMachineStartMenuShortcutIcon {
    <#
    .SYNOPSIS
        Retrieves a Start Menu Shortcut icon from the specified machine.
    .PARAMETER MachineName
        Specify the name of the machine to use for icon retrieval for the specified shortcut path. The machine can be identified by DNS name, short name, SID, or name of the form domain\machine.
    .PARAMETER Path
        The location of the shortcut in the specified machine whose icon is being fetched.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [string]
        ${MachineName},
        
        [Parameter(Mandatory=$true, Position=2, ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [string]
        ${Path},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerMachineStartMenuShortcuts {
    <#
    .SYNOPSIS
        Retrieves the Start Menu Shortcuts from the specified machine.
    .PARAMETER MachineName
        Specify the name of the machine to use for shortcut retrieval. The machine can be identified by DNS name, short name, SID, or name of the form domain\machine.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.StartMenuShortcut])]
    param (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [string]
        ${MachineName},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerPowerTimeScheme {
    <#
    .SYNOPSIS
        Gets power management time schemes for desktop groups.
    .PARAMETER Uid
        Gets only the power time scheme with the specified Uid.
    .PARAMETER Name
        Gets only power time schemes with the specified name.
    .PARAMETER DesktopGroupUid
        Gets only the power time schemes associated with the specified desktop group.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.PowerTimeScheme])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerPrivateDesktop {
    <#
    .SYNOPSIS
        Get private desktops configured for this site.
    .PARAMETER Uid
        Gets desktops by Uid.
    .PARAMETER MachineName
        Gets desktops by machine name (in the form 'domain\machine').
    .PARAMETER AgentVersion
        Gets desktops with a specific Citrix Virtual Delivery Agent (VDA) version.
    .PARAMETER AssignedClientName
        Gets desktops assigned to a specific client name.
    .PARAMETER AssignedIPAddress
        Gets desktops assigned to a specific IP address.
    .PARAMETER ColorDepth
        Gets desktops configured with a specific color depth.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER ControllerDNSName
        Gets desktops by the DNS name of the controller they are registered with.
    .PARAMETER Description
        Gets desktops by description.
    .PARAMETER DesktopGroupUid
        Gets desktops from a desktop group with a specific Uid.
    .PARAMETER DNSName
        Gets desktops by DNS name.
    .PARAMETER HostedMachineId
        Gets desktops by the machine id known to the hypervisor.
    .PARAMETER HostedMachineName
        Gets desktops by the machine name known to the hypervisor.
    .PARAMETER HostingServerName
        Gets desktops by the name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionUid
        Gets desktops by the uid of the hosting hypervisor connection.
    .PARAMETER IconUid
        Gets desktops by configured icon. Note that desktops with a $null IconUid use the icon of the desktop group.
    .PARAMETER InMaintenanceMode
        Gets desktops by the InMaintenanceMode setting.
    .PARAMETER IPAddress
        Get desktops by their IP address.
    .PARAMETER IsAssigned
        Gets desktops depending on whether they are assigned or not. Private desktops can be assigned to either a user/users or client names/addresses.
    .PARAMETER LastDeregistrationReason
        Gets desktops whose broker last recorded a specific deregistration reason.
        Valid values are $null, AgentShutdown, AgentSuspended, AgentRequested, IncompatibleVersion, AgentAddressResolutionFailed, AgentNotContactable, AgentWrongActiveDirectoryOU, EmptyRegistrationRequest, MissingRegistrationCapabilities, MissingAgentVersion, InconsistentRegistrationCapabilities, NotLicensedForFeature, UnsupportedCredentialSecurityVersion, InvalidRegistrationRequest, SingleMultiSessionMismatch, FunctionalLevelTooLowForCatalog, FunctionalLevelTooLowForDesktopGroup, PowerOff, DesktopRestart, DesktopRemoved, AgentRejectedSettingsUpdate, SendSettingsFailure, SessionAuditFailure, SessionPrepareFailure, ContactLost, SettingsCreationFailure, UnknownError and BrokerRegistrationLimitReached.
    .PARAMETER LastDeregistrationTime
        Gets desktops by the time that they were last deregistered.
    .PARAMETER LastHostingUpdateTime
        Gets desktops by the time that the hosting information was last updated.
    .PARAMETER OSType
        Gets desktops by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets desktops by the version of the operating system they are running.
    .PARAMETER PowerState
        Gets desktops by power state.
        Valid values are Unmanaged, Unknown, Unavailable, Off, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER PublishedName
        Gets desktops by published name.
    .PARAMETER RegistrationState
        Gets desktops by registration state.
        Valid values are Registered, Unregistered, and AgentError.
    .PARAMETER SecureIcaRequired
        Gets desktops configured with a particular SecureIcaRequired setting. Note that the desktop setting of $null indicates that the desktop group value is used.
    .PARAMETER SID
        Gets desktops by machine SID.
    .PARAMETER Tag
        Gets desktops tagged with the given tag.
    .PARAMETER WillShutdownAfterUse
        Gets desktops depending on whether they will be automatically shut down when the current session ends or not.
    .PARAMETER AssignedUserSID
        Gets desktops with the given assigned user (specified by SID).
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.PrivateDesktop])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAssigned},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeregistrationReason]]
        ${LastDeregistrationReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastHostingUpdateTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RegistrationState]
        ${RegistrationState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WillShutdownAfterUse},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedUserSID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerRebootCycle {
    <#
    .SYNOPSIS
        Gets one or more reboot cycles.
    .PARAMETER Uid
        Gets reboot cycles that have the specified Uid.
    .PARAMETER CatalogName
        Gets reboot cycles that relate to the named catalog.
    .PARAMETER CatalogUid
        Gets reboot cycles that relate to the catalog with a particular Uid.
    .PARAMETER DesktopGroupName
        Gets reboot cycles that relate to the named desktop group.
    .PARAMETER DesktopGroupUid
        Gets reboot cycles that relate to the desktop group with a particular Uid.
    .PARAMETER EndTime
        Gets reboot cycles that have the specified time at which the reboot cycle was completed, canceled or abandoned.
    .PARAMETER MachinesCompleted
        Gets reboot cycles that have the specified count of machines successfully rebooted during the cycle.
    .PARAMETER MachinesFailed
        Gets reboot cycles that have the specified count of machines issued with reboot requests where either the request failed or the operation did not complete within the allowed time.
    .PARAMETER MachinesInProgress
        Gets reboot cycles that have the specified count of machines issued with reboot requests but which have not yet completed the operation.
    .PARAMETER MachinesPending
        Gets reboot cycles that have the specified count of outstanding machines to be rebooted during the cycle but on which processing has not yet started.
    .PARAMETER MachinesSkipped
        Gets reboot cycles that have the specified count of machines scheduled for reboot during the cycle but which were not processed either because the cycle was canceled or abandoned or because the machine was unavailable for reboot processing throughout the cycle.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER RebootDuration
        Gets reboot cycles that have the specified approximate maximum duration in minutes over which the reboot cycle runs.
    .PARAMETER RebootScheduleName
        Gets reboot cycles which were triggered by the named reboot schedule.
    .PARAMETER RebootScheduleUid
        Gets reboot cycles which were triggered by the reboot schedule with aparticular Uid.
    .PARAMETER RestrictToTag
        An optional Tag which limits the reboot cycle to machines within the desktop group with the specified tag.
    .PARAMETER StartTime
        Gets reboot cycles that have the specified time at which the reboot cycle started.
    .PARAMETER State
        Gets reboot cycles that have the specified overall state of the reboot cycle. Valid values are Initializing, Active, Completed, Canceled, and Abandoned.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootCycle])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${CatalogUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${EndTime},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachinesCompleted},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachinesFailed},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachinesInProgress},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachinesPending},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachinesSkipped},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${RebootDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${RebootScheduleName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${RebootScheduleUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${RestrictToTag},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RebootCycleState]
        ${State},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerRebootSchedule {
    <#
    .SYNOPSIS
        Gets one or more reboot schedules.
    .PARAMETER DesktopGroupUid
        Gets the reboot schedule for the desktop group having this Uid.
    .PARAMETER DesktopGroupName
        Gets the reboot schedule for the desktop group having this name.
    .PARAMETER Active
        Gets desktop group reboot schedules according to whether they are currently active or not. A schedule is active if there is a reboot cycle currently running that was started as a result of the schedule.
    .PARAMETER Day
        Gets the reboot schedules set to run on the specified day (one of Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
    .PARAMETER Enabled
        Gets the reboot schedules with the specified Enabled value.
    .PARAMETER Frequency
        Gets the reboot schedules with the specified frequency (either Weekly or Daily).
    .PARAMETER RebootDuration
        Gets the reboot schedules with the specified duration.
    .PARAMETER StartTime
        Gets the reboot schedules with the specified start time (HH:MM).
    .PARAMETER WarningRepeatInterval
        Gets the reboot schedules with the specified warning repeat interval.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootSchedule])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Active},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RebootScheduleDays]
        ${Day},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RebootScheduleFrequency]
        ${Frequency},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${RebootDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${WarningRepeatInterval},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerRebootScheduleV2 {
    <#
    .SYNOPSIS
        Gets one or more reboot schedules.
    .PARAMETER Uid
        Gets the reboot schedule with the specified Uid.
    .PARAMETER Name
        Gets the reboot schedule with the specified name.
    .PARAMETER Active
        Gets desktop group reboot schedules according to whether they are currently active or not. A schedule is active if there is a reboot cycle currently running that was started as a result of the schedule.
    .PARAMETER Day
        Gets the reboot schedules set to run on the specified day (one of Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
    .PARAMETER DesktopGroupName
        Gets the reboot schedules for the desktop group having this name.
    .PARAMETER DesktopGroupUid
        Gets the reboot schedules for the desktop group having this Uid.
    .PARAMETER Enabled
        Gets the reboot schedules with the specified Enabled value.
    .PARAMETER Frequency
        Gets the reboot schedules with the specified frequency (either Weekly or Daily).
    .PARAMETER MetadataKey
        All key names of metadata items associated with this application.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER RebootDuration
        Gets the reboot schedules with the specified duration.
    .PARAMETER RestrictToTag
        Gets the reboot schedules with the specified tag.
    .PARAMETER StartTime
        Gets the reboot schedules with the specified start time (HH:MM).
    .PARAMETER WarningRepeatInterval
        Gets the reboot schedules with the specified warning repeat interval.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootScheduleV2])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Active},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RebootScheduleDays]
        ${Day},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RebootScheduleFrequency]
        ${Frequency},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MetadataKey},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${RebootDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${RestrictToTag},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${WarningRepeatInterval},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerRemotePCAccount {
    <#
    .SYNOPSIS
        Get RemotePCAccount entries configured for this site.
    .PARAMETER Uid
        Gets the RemotePCAccount with the specified unique ID.
    .PARAMETER AllowSubfolderMatches
        Gets RemotePCAccounts with the specified value of AllowSubfolderMatches.
    .PARAMETER CatalogUid
        Gets RemotePCAccounts belonging to the specified Remote PC catalog.
    .PARAMETER OU
        Gets the RemotePCAccount with the specified OU.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.RemotePCAccount])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${AllowSubfolderMatches},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${CatalogUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OU},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerResource {
    <#
    .SYNOPSIS
        Gets resources that a user can broker connections to.
    .PARAMETER User
        Gets resources given the specified user name or security identifier.
    .PARAMETER Groups
        Get resources accessible given a list of group names or security identifiers.
    .PARAMETER TenantId
        Specifies identity of tenant associated with the user and groups. Can only be used in multitenant sites.
    .PARAMETER ClientName
        Get resources given the specified client name.
    .PARAMETER ClientIP
        Get resources given the specified client IP address.
    .PARAMETER ViaAG
        Gets resources given the specified ViaAG setting.
    .PARAMETER SmartAccessTags
        Get resources given the specified SmartAccess tags.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1)]
        [string]
        ${User},
        
        [string[]]
        ${Groups},
        
        [ValidateNotNull()]
        [System.Nullable[guid]]
        ${TenantId},
        
        [string]
        ${ClientName},
        
        [string]
        ${ClientIP},
        
        [System.Nullable[bool]]
        ${ViaAG},
        
        [string[]]
        ${SmartAccessTags},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerScopedObject {
    <#
    .SYNOPSIS
        Gets the details of the scoped objects for the Broker Service.
    .PARAMETER ScopeId
        Gets scoped object entries for the given scope identifier.
    .PARAMETER Description
        Gets scoped object entries for objects with the specified description.
    .PARAMETER ObjectId
        Gets scoped object entries for objects with the specified object identifier.
    .PARAMETER ObjectName
        Gets scoped object entries for objects with the specified object identifier.
    .PARAMETER ObjectType
        Gets scoped object entries for objects of the given type.
    .PARAMETER ScopeName
        Gets scoped object entries with the given scope name.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.ScopedObject])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [System.Nullable[guid]]
        ${ScopeId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ObjectId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ObjectName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ScopedObjectType]
        ${ObjectType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ScopeName},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerServiceAddedCapability {
    <#
    .SYNOPSIS
        Gets any added capabilities for the Broker Service on the controller.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerServiceInstance {
    <#
    .SYNOPSIS
        Gets the service instance entries for the Broker Service.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.ServiceInstance])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerServiceStatus {
    <#
    .SYNOPSIS
        Gets the current state of the Broker Service on the controller.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Fma.Sdk.Utilities.Service.ServiceStatusInfo])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerSession {
    <#
    .SYNOPSIS
        Gets a list of sessions.
    .PARAMETER Uid
        Get session by its Uid.
    .PARAMETER SessionKey
        Gets session having the specified unique key.
    .PARAMETER AgentVersion
        Gets sessions with a specific Virtual Desktop Agent version.
    .PARAMETER AnonymousUserId
        Gets anonymous session associated with the specified user ID.
    .PARAMETER ApplicationInUse
        Gets sessions running specific applications (identified by their SDK Name property).
    .PARAMETER AppState
        Get sessions by their app state.
        Valid values are PreLogon, PreLaunched, Active, Desktop, Lingering and NoApps.
    .PARAMETER AppStateLastChangeTime
        Get sessions by their app state change time.
    .PARAMETER AutonomouslyBrokered
        Gets sessions according to whether they are autonomously brokered or not. Autonomously brokered sessions are HDX sessions established by direct connection without being brokered.
    .PARAMETER BrokeringDuration
        Gets session with a specific time taken to broker. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER BrokeringTime
        Get sessions brokered at a specific time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER BrokeringUserName
        Get sessions by brokering user.
    .PARAMETER BrokeringUserSID
        Get sessions by brokering user SID.
    .PARAMETER CatalogName
        Gets sessions on machines from a specific catalog name.
    .PARAMETER ClientAddress
        Get sessions by client IP address.
    .PARAMETER ClientName
        Get sessions by client name.
    .PARAMETER ClientPlatform
        Get sessions by client platform.
    .PARAMETER ClientProductId
        Get sessions by client product ID.
    .PARAMETER ClientVersion
        Get sessions by client version.
    .PARAMETER ConnectedViaHostName
        Get sessions by host name of the incoming connection. This is usually a proxy or Citrix Access Gateway server.
    .PARAMETER ConnectedViaIP
        Get sessions by IP address of the incoming connection.
    .PARAMETER ConnectionMode
        Gets sessions by the way in which the most recent connection to the session was established.
        Valid modes are Brokered, Unbrokered, LeasedConnection, VdaHighAvailabilityMode, ThirdPartyBroker, and ThirdPartyBrokerWithLicensing.
    .PARAMETER ControllerDNSName
        Gets sessions that are hosted on machines which are registered with a specific controller.
    .PARAMETER DesktopGroupName
        Gets sessions from a desktop group with the specified name.
    .PARAMETER DesktopGroupUid
        Gets sessions from a desktop group with the specified UID.
    .PARAMETER DesktopKind
        Gets sessions on a desktop of a particular kind.
        Valid values are Private and Shared.
    .PARAMETER DesktopSID
        Get sessions by desktop SID.
    .PARAMETER DesktopUid
        Get sessions by desktop Uid.
    .PARAMETER DeviceId
        Get sessions by client device id.
    .PARAMETER DNSName
        Gets sessions by their machine's DNS name.
    .PARAMETER EntitlementPolicyRuleUid
        Gets sessions where the user was granted the entitlement to launch the session from the specified entitlement policy rule.
    .PARAMETER EstablishmentDuration
        Gets sessions which took a specific time to establish. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER EstablishmentTime
        Gets sessions which became established at a particular time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER HardwareId
        Get sessions by client hardware id.
    .PARAMETER Hidden
        Get sessions by whether they are hidden or not. Hidden sessions are treated as though they do not exist when brokering sessions; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
    .PARAMETER HostedMachineName
        Gets sessions by their machine's name as known to its hypervisor.
    .PARAMETER HostingServerName
        Gets sessions hosted by a machine with a specific name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionName
        Gets sessions hosted by a machine with a specific name of the hosting hypervisor connection.
    .PARAMETER IdleDuration
        Gets sessions that have been idle for the specified period
    .PARAMETER IdleSince
        Time at which session went idle
    .PARAMETER ImageOutOfDate
        Gets sessions hosted by a machine with a specific ImageOutOfDate setting.
    .PARAMETER InMaintenanceMode
        Gets sessions hosted by a machine with a specific InMaintenanceMode setting.
    .PARAMETER IPAddress
        Gets sessions hosted by a machine with a specific IP address.
    .PARAMETER IsAnonymousUser
        Gets sessions depending on whether they were established anonymously ($true) or not ($false). An anonymous session is established without user credentials and a temporary local user account is used.
    .PARAMETER IsPhysical
        Gets sessions hosted on machines where the flag indicating if the machine can be power managed by the Citrix Broker Service matches the requested value. Where the power state of the machine cannot be controlled, specify $true, otherwise $false.
    .PARAMETER LaunchedViaHostName
        Get sessions by the host name of the StoreFront server from which a user launches a session.
    .PARAMETER LaunchedViaIP
        Get sessions by the IP address of the StoreFront server from which a user launches a session.
    .PARAMETER LaunchedViaPublishedName
        Gets sessions originally launched using a resource having a name matching the specified published name.
    .PARAMETER LogoffInProgress
        Gets sessions by whether they are in the process of being logged off or not.
    .PARAMETER LogonInProgress
        Gets sessions by whether they are still executing user logon processing or not.
    .PARAMETER MachineName
        Gets sessions by their machine name (in the form DOMAIN\machine).
    .PARAMETER MachineSummaryState
        Gets sessions on a machine with a specific summary state.
        Valid values are Off, Unregistered, Available, Disconnected, Preparing, and InUse.
    .PARAMETER MachineUid
        Gets sessions on a machine with the specified UID.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER OSType
        Gets sessions with a specific type of operating system.
    .PARAMETER PersistUserChanges
        Gets sessions where the user changes are persisted in a particular manner. Values can be:
        o OnLocal - User changes are persisted locally.
        o Discard - User changes are discarded.
        o OnPvd - User changes are persisted on the Pvd.
    .PARAMETER PowerState
        Gets sessions on machines in the specified power state.
        Valid values are Unmanaged, Unknown, Unavailable, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER PreferredZoneName
        Gets sessions originally launched with the specified preferred zone name.
    .PARAMETER PreferredZoneUid
        Gets sessions originally launched with the specified preferred zone Uid.
    .PARAMETER Protocol
        Get sessions by connection protocol. Valid values are HDX, RDP, or Console.
    .PARAMETER ProvisioningType
        Gets sessions hosted on machines provisioned in a particular manner. Values can be:
        o Manual - No automated provisioning.
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...).
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER ReceiverIPAddress
        Gets sessions with the specified client IP address supplied by Receiver (for example, StoreFront) when the session was launched, or reconnected.
    .PARAMETER ReceiverName
        Gets sessions with the specified client name supplied by Receiver (for example, StoreFront) when the session was launched, or reconnected.
    .PARAMETER SecureIcaActive
        Get sessions by their use of SecureICA.
    .PARAMETER SessionId
        Deprecated.
        Gets sessions by session ID, a unique identifier that Remote Desktop Services uses to track the session but it is only unique on that machine.
    .PARAMETER SessionReconnection
        Get sessions by their session reconnection (roaming) behavior. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER SessionState
        Get sessions by their state.
        Valid values are Other, PreparingNewSession, Connected, Active, Disconnected, Reconnecting, NonBrokeredSession, and Unknown.
    .PARAMETER SessionStateChangeTime
        Get sessions by their last state change time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER SessionSupport
        Gets sessions hosted on machines which support the required pattern of sessions. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER SessionType
        Get sessions by their type.
        Valid values are Application and Desktop.
    .PARAMETER StartTime
        Get sessions by their start time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER TenantId
        Gets sessions associated with the specified tenant.
    .PARAMETER UntrustedUserName
        Gets sessions by the untrusted user name reported directly from the machine (in the form DOMAIN\user).
    .PARAMETER UserFullName
        Gets sessions by user's full name (usually 'first-name last-name').
    .PARAMETER UserName
        Get sessions by user name (in the form DOMAIN\user).
    .PARAMETER UserSID
        Get sessions by user's Windows SID.
    .PARAMETER UserUPN
        Gets sessions by user's User Principal Name (in the form user@domain).
    .PARAMETER ZoneName
        Gets sessions hosted on machines located in the zone with the specified name.
    .PARAMETER ZoneUid
        Gets sessions hosted on machines located in the zone with the specified UID.
    .PARAMETER ApplicationUid
        Get sessions running the application with the specified Uid.
    .PARAMETER SharedDesktopUid
        Get sessions by SharedDesktop Uid.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Session])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [guid]
        ${SessionKey},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AnonymousUserId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationInUse},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionAppState]
        ${AppState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${AppStateLastChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${AutonomouslyBrokered},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${BrokeringDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${BrokeringTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrokeringUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrokeringUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientPlatform},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${ClientProductId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ConnectionMode]]
        ${ConnectionMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopKind]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopSID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DeviceId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${EntitlementPolicyRuleUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${EstablishmentDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${EstablishmentTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HardwareId},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Hidden},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[timespan]]
        ${IdleDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${IdleSince},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ImageOutOfDate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAnonymousUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsPhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaPublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${LogoffInProgress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${LogonInProgress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopSummaryState]
        ${MachineSummaryState},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PreferredZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${PreferredZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Protocol},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ReceiverIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ReceiverName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaActive},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionId},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionReconnection]]
        ${SessionReconnection},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionState]
        ${SessionState},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${SessionStateChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionType]
        ${SessionType},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UntrustedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SharedDesktopUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerSessionLinger {
    <#
    .SYNOPSIS
        Gets one or more session lingering settings.
    .PARAMETER DesktopGroupUid
        Gets session linger setting that is associated with the specified desktop group Uid.
    .PARAMETER DesktopGroupName
        Gets session linger setting that is associated with the specified desktop group name.
    .PARAMETER AssociatedUserFullName
        Gets session linger settings with an associated user identified by their full name (usually 'first-name last-name'). If the 'UserFilterEnabled' property is true then access to the session linger is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserName
        Gets session linger settings with an associated user identified by their user name (in the form 'domain\user'). If the 'UserFilterEnabled' property is true then access to the session linger is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserUPN
        Gets session linger settings with an associated user identified by their user principle name (in the form 'user@domain'). If the 'UserFilterEnabled' property is true then access to the session linger is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER Enabled
        Gets only the session linger settings that have the specified value for whether the setting is enabled.
    .PARAMETER MaxAverageLoadThreshold
        Gets only the session linger settings that have the specified average load threshold.
    .PARAMETER MaxLoadPerMachineThreshold
        Gets only the session linger settings that have the specified maximum load threshold per machine.
    .PARAMETER MaxTimeBeforeDisconnect
        Gets only the session linger settings that have the specified idle disconnect time.
    .PARAMETER MaxTimeBeforeTerminate
        Gets only the session linger settings that have the specified idle terminate time.
    .PARAMETER UserFilterEnabled
        Gets only session linger settings whose user filter is in the specified state.
    .PARAMETER UserSID
        Gets only session linger settings with their accessibility restricted to include the specified user.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.SessionLinger])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxAverageLoadThreshold},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxLoadPerMachineThreshold},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${MaxTimeBeforeDisconnect},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${MaxTimeBeforeTerminate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${UserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserSID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerSessionPreLaunch {
    <#
    .SYNOPSIS
        Gets one or more session pre-launch settings.
    .PARAMETER DesktopGroupUid
        Gets session pre-launch setting that is associated with the specified desktop group Uid.
    .PARAMETER DesktopGroupName
        Gets session pre-launch setting that is associated with the specified desktop group name.
    .PARAMETER AssociatedUserFullName
        Gets session pre-launch settings with an associated user identified by their full name (usually 'first-name last-name'). If the ‘UserFilterEnabled’ property is true then access to the session pre-launch is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserName
        Gets session pre-launch settings with an associated user identified by their user name (in the form 'domain\user'). If the ‘UserFilterEnabled’ property is true then access to the session pre-launch is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER AssociatedUserUPN
        Gets session pre-launch settings with an associated user identified by their user principle name (in the form 'user@domain'). If the ‘UserFilterEnabled’ property is true then access to the session pre-launch is restricted to those users only, otherwise access is unrestricted (but always subject to other policy rules).
    .PARAMETER Enabled
        Gets only the session pre-launch settings that have the specified value for whether the setting is enabled.
    .PARAMETER MaxAverageLoadThreshold
        Gets only the session pre-launch settings that have the specified average load threshold.
    .PARAMETER MaxLoadPerMachineThreshold
        Gets only the session pre-launch settings that have the specified maximum load threshold per machine.
    .PARAMETER MaxTimeBeforeDisconnect
        Gets only the session pre-launch settings that have the specified idle disconnect time.
    .PARAMETER MaxTimeBeforeTerminate
        Gets only the session pre-launch settings that have the specified idle terminate time.
    .PARAMETER UserFilterEnabled
        Gets only session pre-launch settings whose user filter is in the specified state.
    .PARAMETER UserSID
        Gets only session pre-launch settings with their accessibility restricted to include the specified user.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.SessionPreLaunch])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Enabled},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxAverageLoadThreshold},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MaxLoadPerMachineThreshold},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${MaxTimeBeforeDisconnect},
        
        [Parameter(ParameterSetName='Filter')]
        [timespan]
        ${MaxTimeBeforeTerminate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${UserFilterEnabled},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserSID},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerSharedDesktop {
    <#
    .SYNOPSIS
        Get shared desktops configured for this site.
    .PARAMETER Uid
        Gets desktops by Uid.
    .PARAMETER MachineName
        Gets desktops by machine name (in the form 'domain\machine').
    .PARAMETER AgentVersion
        Gets desktops with a specific Virtual Desktop Agent version.
    .PARAMETER ControllerDNSName
        Gets desktops by the DNS name of the controller they are registered with.
    .PARAMETER DesktopGroupUid
        Gets desktops from a desktop group with a specific Uid.
    .PARAMETER DNSName
        Gets desktops by DNS name.
    .PARAMETER HostedMachineId
        Gets desktops by the machine id known to the hypervisor.
    .PARAMETER HostedMachineName
        Gets desktops by the machine name known to the hypervisor.
    .PARAMETER HostingServerName
        Gets desktops by the name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionUid
        Gets desktops by the uid of the hosting hypervisor connection.
    .PARAMETER InMaintenanceMode
        Gets desktops by the InMaintenanceMode setting.
    .PARAMETER IPAddress
        Gets desktops by IP address.
    .PARAMETER LastDeregistrationReason
        Gets desktops whose broker last recorded a specific deregistration reason.
        Valid values are $null, AgentShutdown, AgentSuspended, AgentRequested, IncompatibleVersion, AgentAddressResolutionFailed, AgentNotContactable, AgentWrongActiveDirectoryOU, EmptyRegistrationRequest, MissingRegistrationCapabilities, MissingAgentVersion, InconsistentRegistrationCapabilities, NotLicensedForFeature, UnsupportedCredentialSecurityVersion, InvalidRegistrationRequest, SingleMultiSessionMismatch, FunctionalLevelTooLowForCatalog, FunctionalLevelTooLowForDesktopGroup, PowerOff, DesktopRestart, DesktopRemoved, AgentRejectedSettingsUpdate, SendSettingsFailure, SessionAuditFailure, SessionPrepareFailure, ContactLost, SettingsCreationFailure, UnknownError and BrokerRegistrationLimitReached.
    .PARAMETER LastDeregistrationTime
        Gets desktops by the time that they were last deregistered.
    .PARAMETER LastHostingUpdateTime
        Gets desktops by the time that the hosting information was last updated.
    .PARAMETER OSType
        Gets desktops by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets desktops by the version of the operating system they are running.
    .PARAMETER PowerState
        Gets desktops by power state.
        Valid values are Unmanaged, Unknown, Unavailable, Off, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER RegistrationState
        Gets desktops by registration state.
        Valid values are Registered, Unregistered, and AgentError.
    .PARAMETER SID
        Gets desktops by machine SID.
    .PARAMETER Tag
        Get desktops tagged with the given tag.
    .PARAMETER WillShutdownAfterUse
        Gets desktops depending on whether they shutdown after use or not.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.SharedDesktop])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeregistrationReason]]
        ${LastDeregistrationReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastHostingUpdateTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RegistrationState]
        ${RegistrationState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WillShutdownAfterUse},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerSite {
    <#
    .SYNOPSIS
        Gets the current XenDesktop broker site.
    .PARAMETER ReuseMachinesWithoutShutdownInOutageAllowed
        Specifies whether or not power cycle behavior during outage can be overriden on a delivery group level.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Site])]
    param (
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${ReuseMachinesWithoutShutdownInOutageAllowed},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerTag {
    <#
    .SYNOPSIS
        Gets one or more tags.
    .PARAMETER Uid
        Gets the tag identified by Uid
    .PARAMETER Name
        Gets tags that match the specified name.
    .PARAMETER Description
        Gets tags with the specified description.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER UUID
        Gets tags associated with a given UUID.
    .PARAMETER ApplicationUid
        Gets tags associated with the specified application.
    .PARAMETER ApplicationGroupUid
        Get tags associated with the specified application group.
    .PARAMETER DesktopUid
        Gets tags associated with the specified desktop.
    .PARAMETER DesktopGroupUid
        Gets tags associated with the specified desktop group.
    .PARAMETER MachineUid
        Gets tags associated with the specified machine.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.Tag])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerTagUsage {
    <#
    .SYNOPSIS
        Produces a usage report for one or more tags.
    .PARAMETER TagUid
        Report on the tag identified by TagUid.
    .PARAMETER TagName
        Report on the tag identified by TagName.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.TagUsage])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${TagUid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${TagName},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerUnconfiguredMachine {
    <#
    .SYNOPSIS
        Gets machines that have registered but are not yet configured in this site.
    .PARAMETER SID
        Gets machines by their machine SID.
    .PARAMETER MachineName
        Gets machines by their machine name (in the form domain\machine).
    .PARAMETER AgentVersion
        Gets machines with a specific Virtual Desktop Agent version.
    .PARAMETER ControllerDNSName
        Gets machines by the DNS name of the controller they are registered with.
    .PARAMETER CurrentlyRegistered
        Gets machines by whether they are currently registered with the site. If there is no CurrentlyRegistered filter, then the default is to return unconfigured machines that are currently registered.
    .PARAMETER DNSName
        Gets machines by their DNS name.
    .PARAMETER FunctionalLevel
        Gets machines with a specific FunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER LastDeregistrationTime
        Gets machines by the time that they were last deregistered.
    .PARAMETER OSType
        Gets machines by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets machines by the version of the operating system they are running.
    .PARAMETER SessionSupport
        Gets machines that have the specified session capability. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.UnconfiguredMachine])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${CurrentlyRegistered},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.FunctionalLevel]]
        ${FunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionSupport]]
        ${SessionSupport},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerUser {
    <#
    .SYNOPSIS
        Gets broker users configured for this site.
    .PARAMETER SID
        Gets the broker user with the specified SID property value.
    .PARAMETER Name
        Gets the broker user with the specified Name property.
    .PARAMETER FullName
        Gets the broker user with the specified FullName property.
    .PARAMETER HomeZoneName
        Gets user/group accounts having a home zone preference matching the specified name.
    .PARAMETER HomeZoneUid
        Gets user/group accounts having a home zone preference matching the specified UID.
    .PARAMETER UPN
        Gets the broker user with the specified UPN property value.
    .PARAMETER ApplicationGroupUid
        Gets broker users associated with the application group with the specified Uid.
    .PARAMETER ApplicationUid
        Gets broker users associated with the application with the specified Uid.
    .PARAMETER SessionLingerDesktopGroupUid
        Gets broker users associated with the desktop group session linger settings with the specified Uid.
    .PARAMETER SessionPreLaunchDesktopGroupUid
        Gets broker users associated with the desktop group session pre-launch settings with the specified Uid.
    .PARAMETER MachineUid
        Gets broker users associated with the broker machine with the specified Uid.
    .PARAMETER PrivateDesktopUid
        Gets broker users associated with the private desktop with the specified Uid.
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.User])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${FullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HomeZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${HomeZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UPN},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionLingerDesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionPreLaunchDesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${PrivateDesktopUid},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Get-BrokerUserZonePreference {
    <#
    .SYNOPSIS
        Gets user/group accounts with zone preferences configured for this site
    .PARAMETER SID
        Gets user/group accounts with a home zone preference and the specified SID.
    .PARAMETER Name
        Gets user/group accounts with a home zone preference and the specified SAM name (domain\user).
    .PARAMETER FullName
        Gets user/group accounts with a home zone preference and the specified full name.
    .PARAMETER HomeZoneName
        Gets user/group accounts having a home zone preference with the specified name.
    .PARAMETER HomeZoneUid
        Gets user/group accounts having a home zone preference with the specified UID.
    .PARAMETER UPN
        Gets user/group accounts with a home zone preference and the specified UPN (user@domain).
    .PARAMETER Property
        Specifies the properties to be returned. This is similar to piping the output of the command through Select-Object, but the properties are filtered more efficiently at the server.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.UserZonePreference])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true)]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${FullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HomeZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${HomeZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UPN},
        
        [string[]]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Group-BrokerDesktop {
    <#
    .SYNOPSIS
        Groups and counts desktops with the same value for a specified property.
    .PARAMETER Uid
        Gets desktops with a specific UID.
    .PARAMETER MachineName
        Gets desktops with a specific machine name (in the form 'domain\machine').
    .PARAMETER AgentVersion
        Gets desktops with a specific Citrix Virtual Delivery Agent version.
    .PARAMETER ApplicationInUse
        Gets desktops running a specified published application (identified by browser name).
        String comparisons are case-insensitive.
    .PARAMETER AssignedClientName
        Gets desktops assigned to a specific client name.
    .PARAMETER AssignedIPAddress
        Gets desktops assigned to a specific IP address.q
    .PARAMETER AssociatedUserFullName
        Gets desktops with an associated user identified by their full name (usually in the form 'first-name last-name').
        Associated users are the current user for shared desktops, and the assigned users for private desktops.
    .PARAMETER AssociatedUserName
        Gets desktops with an associated user identified by their user name (in the form 'domain\user').
        Associated users are the current user for shared desktops, and the assigned users for private desktops.
    .PARAMETER AssociatedUserUPN
        Gets desktops with an associated user identified by their User Principle Name (in the form 'user@domain').
        Associated users are the current user for shared desktops, and the assigned users for private desktops.
    .PARAMETER AutonomouslyBrokered
        Gets desktops according to whether their current session is autonomously brokered or not. Autonomously brokered sessions are HDX sessions established by direct connection without being brokered.
        Session properties are always null for multi-session desktops.
    .PARAMETER CatalogName
        Gets desktops from the catalog with the specific name.
    .PARAMETER CatalogUid
        Gets desktops from a catalog with a specific UID.
    .PARAMETER ClientAddress
        Gets desktops with a specific client IP address.
    .PARAMETER ClientName
        Gets desktops with a specific client name.
    .PARAMETER ClientVersion
        Gets desktops with a specific client version.
    .PARAMETER ColorDepth
        Gets desktops configured with a specific color depth.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER ConnectedViaHostName
        Gets desktops with a specific host name of the incoming connection. This is usually a proxy or Citrix Access Gateway server.
    .PARAMETER ConnectedViaIP
        Gets desktops with a specific IP address of the incoming connection.
    .PARAMETER ControllerDNSName
        Gets desktops with a specific DNS name of the controller they are registered with.
    .PARAMETER DeliveryType
        Gets desktops of a particular delivery type.
        Valid values are AppsOnly, DesktopsOnly, DesktopsAndApps
    .PARAMETER Description
        Get desktops with a specific description.
    .PARAMETER DesktopCondition
        Gets desktop with an outstanding desktop condition condition.
        Valid values are:
        o CPU: Indicates the machine has high CPU usage
        o ICALatency: Indicates the network latency is high
        o UPMLogonTime: Indicates that the profile load time was high
    .PARAMETER DesktopGroupName
        Gets desktops from a desktop group with the specified name.
    .PARAMETER DesktopGroupUid
        Gets desktops from a desktop group with the specified UID.
    .PARAMETER DesktopKind
        Deprecated: Use AllocationType parameter.
        Gets desktops of a particular kind.
        Valid values are Private, Shared.
    .PARAMETER DeviceId
        Gets desktops with a specific client device ID.
    .PARAMETER DNSName
        Get desktops with a specific DNS name.
    .PARAMETER FunctionalLevel
        Gets desktops with a specific FunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER HardwareId
        Gets desktops with a specific client hardware ID.
    .PARAMETER HostedMachineId
        Gets desktops with a specific machine ID known to the hypervisor.
    .PARAMETER HostedMachineName
        Gets desktops with a specific machine name known to the hypervisor.
    .PARAMETER HostingServerName
        Gets desktops with a specific name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionName
        Gets desktops with a specific name of the hosting hypervisor connection.
    .PARAMETER HypervisorConnectionUid
        Gets desktops with a specific UID of the hosting hypervisor connection.
    .PARAMETER IconUid
        Gets desktops with a specific configured icon. Note that desktops with a null IconUid use the icon of the desktop group.
    .PARAMETER ImageOutOfDate
        Gets desktops if they have an ImageOutOfDate flag.
    .PARAMETER InMaintenanceMode
        Gets desktops with a specific InMaintenanceMode setting.
    .PARAMETER IPAddress
        Gets desktops with a specific IP address.
    .PARAMETER IsAssigned
        Gets desktops according to whether they are assigned or not. Desktops may be assigned to one or more users or groups, a client IP address or a client endpoint name.
    .PARAMETER IsPhysical
        Specifies if machines in the catalog can be power managed by the Citrix Broker Service. Where the power state of the machine cannot be controlled, specify $true, otherwise $false. Can only be specified together with a provisioning type of Pvs or Manual, or if used with the deprecated CatalogKind parameter only with Pvs or PvsPvd catalog kinds.
    .PARAMETER LastConnectionFailure
        Gets desktops with a specific reason for the last recorded connection failure. This value is None if the last connection was successful or if there has been no attempt to connect to the desktop yet.
        Valid values are None, SessionPreparation, RegistrationTimeout, ConnectionTimeout, Licensing, Ticketing, and Other.
    .PARAMETER LastConnectionTime
        Gets desktops that last connected at a specific time. This is the time that the broker detected that the connection attempt either succeeded or failed.
    .PARAMETER LastConnectionUser
        Gets desktops where a specific user name last attempted a connection (in the form 'domain\user').
    .PARAMETER LastDeregistrationReason
        Gets desktops whose broker last recorded a specific deregistration reason.
        Valid values are $null, AgentShutdown, AgentSuspended, AgentRequested, IncompatibleVersion, AgentAddressResolutionFailed, AgentNotContactable, AgentWrongActiveDirectoryOU, EmptyRegistrationRequest, MissingRegistrationCapabilities, MissingAgentVersion, InconsistentRegistrationCapabilities, NotLicensedForFeature, UnsupportedCredentialSecurityVersion, InvalidRegistrationRequest, SingleMultiSessionMismatch, FunctionalLevelTooLowForCatalog, FunctionalLevelTooLowForDesktopGroup, PowerOff, DesktopRestart, DesktopRemoved, AgentRejectedSettingsUpdate, SendSettingsFailure, SessionAuditFailure, SessionPrepareFailure, ContactLost, SettingsCreationFailure, UnknownError and BrokerRegistrationLimitReached.
    .PARAMETER LastDeregistrationTime
        Gets desktops that were last deregistered by a specific time.
    .PARAMETER LastErrorReason
        Gets desktops with the specified last error reason.
    .PARAMETER LastErrorTime
        Gets desktops with the specified last error time.
    .PARAMETER LastHostingUpdateTime
        Gets desktops with a specific time that the hosting information was last updated.
    .PARAMETER LaunchedViaHostName
        Gets desktops with a specific host name of the StoreFront server from which the user launched the session.
        Session properties are always null for multi-session desktops.
    .PARAMETER LaunchedViaIP
        Gets desktops with a specific IP address of the StoreFront server from which the user launched the session.
        Session properties are always null for multi-session desktops.
    .PARAMETER MachineInternalState
        Gets desktops with the specified internal machine state.
    .PARAMETER MachineUid
        Gets desktops with a specific machine UID.
    .PARAMETER OSType
        Gets desktops by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets desktops by the version of the operating system they are running.
    .PARAMETER PersistUserChanges
        Gets desktops by the location where the user changes are persisted.
        o OnLocal - User changes are persisted locally. 
        o Discard - User changes are discarded. 
        o OnPvd - User changes are persisted on the Pvd.
    .PARAMETER PowerActionPending
        Gets desktops with a specific power action pending state.
        Valid values are $true or $false.
    .PARAMETER PowerState
        Gets desktops with a specific power state.
        Valid values are Unmanaged, Unknown, Unavailable, Off, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER Protocol
        Gets desktops with connections using a specific protocol, for example HDX, RDP, or Console.
    .PARAMETER ProvisioningType
        Specifies the provisioning type for the catalog. Values can be:
        o Manual - No provisioning. 
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...). 
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER PublishedApplication
        Gets desktops with a specific application published on them (identified by its browser name).
    .PARAMETER PublishedName
        Gets desktops with a specific published name.
    .PARAMETER PvdStage
        Gets machines with a specific personal vDisk stage.
        Valid values are None, Requested, Starting, Working and Failed.
    .PARAMETER RegistrationState
        Gets desktops with a specific registration state. 
        Valid values are Unregistered, Initializing, Registered and AgentError.
    .PARAMETER SecureIcaActive
        Gets desktops depending on whether the current session uses SecureICA or not.
        Session properties are always null for multi-session desktops.
    .PARAMETER SecureIcaRequired
        Gets desktops configured with a particular SecureIcaRequired setting. Note that the desktop setting of $null indicates that the desktop group value is used.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionHidden
        Gets desktops by whether their sessions are hidden or not. Hidden sessions are treated as though they do not exist when launching sessions; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionId
        Deprecated.
        Gets desktops by session ID, a unique identifier that Remote Desktop Services uses to track the session but it is only unique on that machine.
    .PARAMETER SessionState
        Gets desktops with a specific session state.
        Valid values are $null, Other, PreparingSession, Connected, Active, Disconnected, Reconnecting, NonBrokeredSession, and Unknown.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionStateChangeTime
        Gets desktops whose sessions last changed state at a specific time.
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionUid
        Gets desktops with a specific session UID ($null for no session).
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionUserName
        Gets desktops with a specific user name for the current session (in the form 'domain\user').
        Session properties are always null for multi-session desktops.
    .PARAMETER SessionUserSID
        Gets desktops with a specific SID of the current session user.
        Session properties are always null for multi-session desktops.
    .PARAMETER SID
        Gets desktops with a specific machine SID.
    .PARAMETER SmartAccessTag
        Gets desktops where the session has the specific SmartAccess tag.
        Session properties are always null for multi-session desktops.
    .PARAMETER StartTime
        Gets desktops with a specific session start time.
        Session properties are always null for multi-session desktops.
    .PARAMETER SummaryState
        Gets desktops with a specific summary state.
        Valid values are Off, Unregistered, Available, Disconnected, and InUse.
    .PARAMETER Tag
        Gets desktops with a specific tag.
    .PARAMETER WillShutdownAfterUse
        Gets desktops depending on whether they shut down after use or not.
    .PARAMETER ApplicationUid
        Gets desktops with a specific published application (identified by its UID).
    .PARAMETER Property
        Selects the property by which matching desktops are grouped.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.GroupInfo])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationInUse},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${AutonomouslyBrokered},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${CatalogUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DeliveryType]
        ${DeliveryType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopCondition},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopKind]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DeviceId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.FunctionalLevel]]
        ${FunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HardwareId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ImageOutOfDate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAssigned},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsPhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ConnectionFailureReason]
        ${LastConnectionFailure},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastConnectionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastConnectionUser},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeregistrationReason]]
        ${LastDeregistrationReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastErrorReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastErrorTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastHostingUpdateTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineInternalState]
        ${MachineInternalState},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${PowerActionPending},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Protocol},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedApplication},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PvdStage]
        ${PvdStage},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RegistrationState]
        ${RegistrationState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaActive},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionHidden},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${SessionId},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionState]]
        ${SessionState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SessionStateChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[long]]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SmartAccessTag},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopSummaryState]
        ${SummaryState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WillShutdownAfterUse},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Group-BrokerMachine {
    <#
    .SYNOPSIS
        Groups and counts machines with the same value for a specified property.
    .PARAMETER Uid
        Gets a machine with a specific UID.
    .PARAMETER MachineName
        Gets machines with a specific machine name (in the form domain\machine).
    .PARAMETER AgentVersion
        Gets machines with a specific Virtual Delivery Agent version.
    .PARAMETER AllocationType
        Gets machines from catalogs with the specified allocation type.
    .PARAMETER ApplicationInUse
        Gets machines running a specified published application. String comparisons are case-insensitive.
    .PARAMETER AssignedClientName
        Gets machines that have been assigned to the specific client name.
    .PARAMETER AssignedIPAddress
        Gets machines that have been assigned to the specific client IP address.
    .PARAMETER AssignedUserSID
        Gets machines with the specific SID of the user to whom the desktop is assigned.
    .PARAMETER AssociatedTenantId
        Gets machines associated with the specified tenant.
    .PARAMETER AssociatedUserFullName
        Gets machines with an associated user identified by their full name (usually 'first-name last-name').
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER AssociatedUserName
        Gets machines with an associated user identified by their user name (in the form 'domain\user').
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER AssociatedUserSID
        Gets machines with an associated user identified by their Windows SID.
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER AssociatedUserUPN
        Gets machines with an associated user identified by their User Principle Name (in the form 'user@domain').
        Associated users are all current users of a desktop, plus the assigned users for private desktops.
    .PARAMETER BrowserName
        Gets assigned machines backing desktop resources that have browser names matching the specified name.
    .PARAMETER CatalogName
        Gets machines from the catalog with the specific name.
    .PARAMETER CatalogUid
        Gets machines from the catalog with the specific UID.
    .PARAMETER CatalogUUID
        Gets machines from the catalog with the specific UUID.
    .PARAMETER CbpVersion
        The version of CBP that the VDA is currently registered with. This will be null when the VDA is not registered.
    .PARAMETER ColorDepth
        Gets machines configured with a specific color depth.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER ControllerDNSName
        Gets machines by the DNS name of the controller they are registered with.
    .PARAMETER DeliveryType
        Gets machines of a particular delivery type.
        Valid values are AppsOnly, DesktopsOnly, DesktopsAndApps
    .PARAMETER Description
        Get machines by description.
    .PARAMETER DesktopCondition
        Gets machines with an outstanding desktop condition.
        Valid values are:
        o CPU: Indicates the machine has high CPU usage
        o ICALatency: Indicates the network latency is high
        o UPMLogonTime: Indicates that the profile load time was high
    .PARAMETER DesktopGroupName
        Gets machines from a desktop group with the specified name.
    .PARAMETER DesktopGroupUid
        Gets machines from a desktop group with a specific UID.
    .PARAMETER DesktopGroupUUID
        Gets machines from a desktop group with a specific UUID.
    .PARAMETER DesktopKind
        Deprecated: Use AllocationType parameter.
        Gets machines of a particular kind.
        Valid values are Private, Shared.
    .PARAMETER DesktopUid
        Gets the machine that corresponds to the desktop with the specific UID.
    .PARAMETER DNSName
        Gets machines with the specific DNS name.
    .PARAMETER FaultState
        Gets machines currently in the specified fault state.
    .PARAMETER FunctionalLevel
        Gets machines with a specific FunctionalLevel.
        Valid values are L5, L7, L7_6
    .PARAMETER HostedMachineId
        Gets machines with the specific machine ID known to the hypervisor.
    .PARAMETER HostedMachineName
        Gets machines with the specific machine name known to the hypervisor.
    .PARAMETER HostingServerName
        Gets machines by the name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionName
        Gets machines with the specific name of the hypervisor connection hosting them.
    .PARAMETER HypervisorConnectionUid
        Gets machines with the specific UID of the hypervisor connection hosting them.
    .PARAMETER HypHypervisorConnectionUid
        Gets machines with the specific UUID of the hypervisor connection hosting them.
    .PARAMETER IconUid
        Gets machines by configured icon. Note that machines with a null IconUid use the icon of the desktop group.
    .PARAMETER ImageOutOfDate
        Gets machines depending on whether their disk image is out of date or not (for machines provisioned using MCS only).
    .PARAMETER InMaintenanceMode
        Gets machines by whether they are in maintenance mode or not.
    .PARAMETER IPAddress
        Gets machines with a specific IP address.
    .PARAMETER IsAssigned
        Gets machines according to whether they are assigned or not. Machines may be assigned to one or more users or groups, a client IP address or a client endpoint name.
    .PARAMETER IsPhysical
        Gets machines according to whether they can be power managed by XenDesktop or not.
    .PARAMETER IsReserved
        Gets machines that are reserved for special use, for example, for AppDisk preparation.
    .PARAMETER LastConnectionFailure
        Gets machines with a specific reason for the last recorded connection failure. This value is None if the last connection was successful or if there has been no attempt to connect to the machine yet.
        Valid values are None, SessionPreparation, RegistrationTimeout, ConnectionTimeout, Licensing, Ticketing, and Other.
    .PARAMETER LastConnectionTime
        Gets machines to which a user session connection occurred at a specific time. This is the time that the broker detected that the connection attempt either succeeded or failed.
    .PARAMETER LastConnectionUser
        Gets machines where a specific user name last attempted a connection (in the form 'domain\user').
    .PARAMETER LastDeregistrationReason
        Gets machines whose broker last recorded a specific deregistration reason.
        Valid values are $null, AgentShutdown, AgentSuspended, AgentRequested, IncompatibleVersion, AgentAddressResolutionFailed, AgentNotContactable, AgentWrongActiveDirectoryOU, EmptyRegistrationRequest, MissingRegistrationCapabilities, MissingAgentVersion, InconsistentRegistrationCapabilities, NotLicensedForFeature, UnsupportedCredentialSecurityVersion, InvalidRegistrationRequest, SingleMultiSessionMismatch, FunctionalLevelTooLowForCatalog, FunctionalLevelTooLowForDesktopGroup, PowerOff, DesktopRestart, DesktopRemoved, AgentRejectedSettingsUpdate, SendSettingsFailure, SessionAuditFailure, SessionPrepareFailure, ContactLost, SettingsCreationFailure, UnknownError and BrokerRegistrationLimitReached.
    .PARAMETER LastDeregistrationTime
        Gets machines by the time that they were last deregistered.
    .PARAMETER LastErrorReason
        Gets machines with the specified last error reason.
    .PARAMETER LastErrorTime
        Gets machines with the specified last error time.
    .PARAMETER LastHostingUpdateTime
        Gets machines with a specific time that the hosting information was last updated.
    .PARAMETER LastPvdErrorReason
        Gets machines with the specified last Personal vDisk preparation error reason.
    .PARAMETER LastPvdErrorTime
        Gets machines with the specified last Personal vDisk preparation error time.
    .PARAMETER LoadIndex
        Gets machines by their current load index.
    .PARAMETER MachineInternalState
        Gets machines with the specified internal state.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER OSType
        Gets machines by the type of operating system they are running.
    .PARAMETER OSVersion
        Gets machines by the version of the operating system they are running.
    .PARAMETER PersistUserChanges
        Gets machines according to the location where user changes are persisted. Values can be:
        o OnLocal - User changes are persisted locally.
        o Discard - User changes are discarded.
        o OnPvd - User changes are persisted on the Pvd.
    .PARAMETER PowerActionPending
        Gets machines depending on whether a power action is pending or not.
        Valid values are $true or $false.
    .PARAMETER PowerState
        Gets machines with a specific power state.
        Valid values are Unmanaged, Unknown, Unavailable, Off, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER ProvisioningType
        Specifies the provisioning type for the catalog. Values can be:
        o Manual - No provisioning.
        o PVS - Machine provisioned by PVS (machine may be physical, blade, VM,...).
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER PublishedApplication
        Gets machines with a specific application published to them (identified by its browser name).
    .PARAMETER PublishedName
        Gets desktops with a specific published name.
    .PARAMETER PvdEstimatedCompletionTime
        If preparation of the Personal vDisk is currently in progress for this machine, this reports an estimation of the time at which the process will be complete.
    .PARAMETER PvdPercentDone
        Gets machines a specific percentage through the Personal vDisk preparation process.
    .PARAMETER PvdStage
        Gets machines at a specific personal vDisk stage.
        Valid values are None, Requested, Starting, Working and Failed.
    .PARAMETER PvdUpdateStartTime
        If preparation of the Personal vDisk is currently in progress for this machine, this reports when the update process began.
    .PARAMETER RegistrationState
        Gets machines in a specific registration state.
        Valid values are Unregistered, Initializing, Registered, and AgentError.
    .PARAMETER ScheduledReboot
        Gets machines according to their current status with respect to any scheduled reboots (for either scheduled desktop group reboots or image rollout purposes). Valid values are:
        o None - No reboot currently scheduled.
        o Pending - Reboot scheduled but machine still available for use.
        o Draining - Reboot scheduled. New logons are disabled, but reconnections to existing sessions are allowed.
        o InProgress - Machine is actively being rebooted.
        o Natural - Natural reboot in progress. Machine is awaiting a restart.
    .PARAMETER SecureIcaRequired
        Gets machines configured with a particular SecureIcaRequired setting. Note that the machine setting of $null indicates that the desktop group value is used.
    .PARAMETER SessionAutonomouslyBrokered
        Gets machines according to whether their current session is autonomously brokered or not. Autonomously brokered sessions are HDX sessions established by direct connection without being brokered.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionClientAddress
        Gets machines with a specific client IP address.
    .PARAMETER SessionClientName
        Gets machines with a specific client name.
    .PARAMETER SessionClientVersion
        Gets machines with a specific client version.
    .PARAMETER SessionConnectedViaHostName
        Gets machines with a specific host name of the incoming connection. This is usually a proxy or Citrix Access Gateway server.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionConnectedViaIP
        Gets machines with a specific IP address of the incoming connection.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionCount
        Gets machines according to the total number of both pending and established user sessions on the machine.
    .PARAMETER SessionDeviceId
        Gets machines with a specific client device ID.
    .PARAMETER SessionHardwareId
        Gets machines with a specific client hardware ID.
    .PARAMETER SessionHidden
        Gets machines by whether their sessions are hidden or not. Hidden sessions are treated as though they do not exist when launching sessions using XenDesktop; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
    .PARAMETER SessionKey
        Gets machine running the session with the specified unique key.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionLaunchedViaHostName
        Gets machines with a specific host name of the Web Interface server from which the user launched the session.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionLaunchedViaIP
        Gets machines with a specific IP address of the Web Interface server from which the user launched the session.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionProtocol
        Gets machines with connections using a specific protocol, for example HDX, RDP, or Console.
    .PARAMETER SessionSecureIcaActive
        Gets machines depending on whether the current session uses SecureICA or not.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionsEstablished
        Gets machines according to the number of established user sessions present on the machine.
    .PARAMETER SessionSmartAccessTag
        Gets session machines where the session has the specific SmartAccess tag.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionsPending
        Get machines according to the number of pending user sessions for the machine.
    .PARAMETER SessionStartTime
        Gets machines with a specific session start time.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionState
        Gets machines with a specific session state.
        Valid values are $null, Other, PreparingSession, Connected, Active, Disconnected, Reconnecting, NonBrokeredSession, and Unknown.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionStateChangeTime
        Gets machines whose sessions last changed state at a specific time.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionSupport
        Gets machines that have the specified session capability. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession - Multi-session capable machine.
    .PARAMETER SessionType
        Gets machines with a specific session state.
        Session properties are always null for multi-session machines.
    .PARAMETER SessionUid
        Gets single-session machines with a specific session UID ($null for no session).
        Session properties are always null for multi-session machines.
    .PARAMETER SessionUserName
        Gets machines with a specific user name for the current session (in the form 'domain\user').
        Session properties are always null for multi-session machines.
    .PARAMETER SessionUserSID
        Gets machines with a specific SID of the current session user.
        Session properties are always null for multi-session machines.
    .PARAMETER SID
        Gets machines with a specific machine SID.
    .PARAMETER SummaryState
        Gets machines with a specific summary state.
        Valid values are Off, Unregistered, Available, Disconnected, and InUse.
    .PARAMETER SupportedPowerActions
        A list of power actions supported by this machine.
    .PARAMETER Tag
        Gets machines where the session has the given SmartAccess tag.
    .PARAMETER UUID
        Gets machines with the specified value of UUID.
    .PARAMETER VMToolsState
        Gets machines with a specific VM tools state.
        Valid values are NotPresent, Unknown, NotStarted, and Running.
    .PARAMETER WillShutdownAfterUse
        Gets machines depending on whether they shut down after use or not.
    .PARAMETER WindowsConnectionSetting
        Gets machines according to their current Windows connection setting (logon mode). Valid values are:
        o LogonEnabled - All logons are enabled.
        o Draining - New logons are disabled, but reconnections to existing sessions are allowed.
        o DrainingUntilRestart - Same as Draining, but setting reverts to LogonEnabled when machine next restarts.
        o LogonDisabled - All logons and reconnections are disabled.
        This is a Windows setting and is not controlled by XenDesktop. It applies only to multi-session machines; for single-session machines its value is always LogonEnabled.
    .PARAMETER ZoneName
        Gets machines located in the zone with the specified name.
    .PARAMETER ZoneUid
        Gets machines located in the zone with the specified UID.
    .PARAMETER Property
        Selects the property by which matching machines are grouped.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.GroupInfo])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [int]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.AllocationType]
        ${AllocationType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationInUse},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssignedUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${AssociatedTenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AssociatedUserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrowserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${CatalogUid},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${CatalogUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.CBPVersion]]
        ${CbpVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeliveryType]]
        ${DeliveryType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopCondition},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${DesktopGroupUUID},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DesktopKind]]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${DesktopUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineFaultState]
        ${FaultState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.FunctionalLevel]]
        ${FunctionalLevel},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${HypHypervisorConnectionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ImageOutOfDate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAssigned},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsPhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsReserved},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ConnectionFailureReason]
        ${LastConnectionFailure},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastConnectionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastConnectionUser},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.DeregistrationReason]]
        ${LastDeregistrationReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastDeregistrationTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastErrorReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastErrorTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastHostingUpdateTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LastPvdErrorReason},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${LastPvdErrorTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${LoadIndex},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.MachineInternalState]
        ${MachineInternalState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${PowerActionPending},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedApplication},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${PvdEstimatedCompletionTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${PvdPercentDone},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PvdStage]
        ${PvdStage},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${PvdUpdateStartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.RegistrationState]
        ${RegistrationState},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ScheduledReboot]
        ${ScheduledReboot},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionAutonomouslyBrokered},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionClientAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionClientVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionConnectedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionConnectedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionCount},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionDeviceId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionHardwareId},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionHidden},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${SessionKey},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionLaunchedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionLaunchedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionProtocol},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SessionSecureIcaActive},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionsEstablished},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionSmartAccessTag},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionsPending},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SessionStartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionState]]
        ${SessionState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${SessionStateChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionType]]
        ${SessionType},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[long]]
        ${SessionUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SessionUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${SID},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopSummaryState]
        ${SummaryState},
        
        [Parameter(ParameterSetName='Filter')]
        [string[]]
        ${SupportedPowerActions},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Tag},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${UUID},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.VMToolsState]
        ${VMToolsState},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${WillShutdownAfterUse},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.WindowsConnectionSetting]]
        ${WindowsConnectionSetting},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ZoneUid},
        
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Group-BrokerSession {
    <#
    .SYNOPSIS
        Groups and counts sessions with the same value for a specified property.
    .PARAMETER Uid
        Gets session by its Uid.
    .PARAMETER SessionKey
        Gets session having the specified unique key.
    .PARAMETER AgentVersion
        Gets sessions with a specific Virtual Desktop Agent version.
    .PARAMETER AnonymousUserId
        Gets sessions associated with the specified user ID.
    .PARAMETER ApplicationInUse
        Gets sessions running specific applications (identified by their SDK Name property).
    .PARAMETER AppState
        Gets sessions by their app state.
        Valid values are PreLogon, PreLaunched, Active, Desktop, Lingering and NoApps.
    .PARAMETER AppStateLastChangeTime
        Get sessions by their app state change time.
    .PARAMETER AutonomouslyBrokered
        Gets sessions according to whether they are autonomously brokered or not. Autonomously brokered sessions are HDX sessions established by direct connection without being brokered.
    .PARAMETER BrokeringDuration
        Gets session with a specific time taken to broker. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER BrokeringTime
        Get sessions brokered at a specific time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER BrokeringUserName
        Get sessions by brokering user.
    .PARAMETER BrokeringUserSID
        Get sessions by brokering user SID.
    .PARAMETER CatalogName
        Gets sessions on machines from a specific catalog name.
    .PARAMETER ClientAddress
        Get sessions by client IP address.
    .PARAMETER ClientName
        Get sessions by client name.
    .PARAMETER ClientPlatform
        Get sessions by client platform.
    .PARAMETER ClientProductId
        Get sessions by client product ID.
    .PARAMETER ClientVersion
        Get sessions by client version.
    .PARAMETER ConnectedViaHostName
        Get sessions by host name of the incoming connection. This is usually a proxy or Citrix Access Gateway server.
    .PARAMETER ConnectedViaIP
        Get sessions by IP address of the incoming connection.
    .PARAMETER ConnectionMode
        Gets sessions by the way in which the most recent connection to the session was established.
        Valid modes are Brokered, Unbrokered, LeasedConnection, VdaHighAvailabilityMode, ThirdPartyBroker, and ThirdPartyBrokerWithLicensing.
    .PARAMETER ControllerDNSName
        Gets sessions that are hosted on machines which are registered with a specific controller.
    .PARAMETER DesktopGroupName
        Gets sessions from a desktop group with the specified name.
    .PARAMETER DesktopGroupUid
        Gets sessions from a desktop group with the specified UID.
    .PARAMETER DesktopKind
        Gets sessions on a desktop of a particular kind.
        Valid values are Private and Shared.
    .PARAMETER DesktopSID
        Get sessions by desktop SID.
    .PARAMETER DesktopUid
        Get sessions by desktop Uid.
    .PARAMETER DeviceId
        Get sessions by client device id.
    .PARAMETER DNSName
        Gets sessions by their machine's DNS name.
    .PARAMETER EntitlementPolicyRuleUid
        Gets sessions where the user was granted the entitlement to launch the session from the specified entitlement policy rule.
    .PARAMETER EstablishmentDuration
        Gets sessions which took a specific time to establish. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER EstablishmentTime
        Gets sessions which became established at a particular time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER HardwareId
        Get sessions by client hardware id.
    .PARAMETER Hidden
        Get sessions by whether they are hidden or not. Hidden sessions are treated as though they do not exist when brokering sessions; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
    .PARAMETER HostedMachineName
        Gets sessions by their machine's name as known to its hypervisor.
    .PARAMETER HostingServerName
        Gets sessions hosted by a machine with a specific name of the hosting hypervisor server.
    .PARAMETER HypervisorConnectionName
        Gets sessions hosted by a machine with a specific name of the hosting hypervisor connection.
    .PARAMETER IdleDuration
        Gets sessions that have been idle for the specified period
    .PARAMETER IdleSince
        Time at which session went idle
    .PARAMETER ImageOutOfDate
        Gets sessions hosted by a machine with a specific ImageOutOfDate setting.
    .PARAMETER InMaintenanceMode
        Gets sessions hosted by a machine with a specific InMaintenanceMode setting.
    .PARAMETER IPAddress
        Gets sessions hosted by a machine with a specific IP address.
    .PARAMETER IsAnonymousUser
        Gets sessions depending on whether they were established anonymously ($true) or not ($false). An anonymous session is established without user credentials and a temporary local user account is used.
    .PARAMETER IsPhysical
        Gets sessions hosted on machines where the flag indicating if the machine can be power managed by the Citrix Broker Service matches the requested value. Where the power state of the machine cannot be controlled, specify $true, otherwise $false.
    .PARAMETER LaunchedViaHostName
        Get sessions by the host name of the StoreFront server from which a user launches a session.
    .PARAMETER LaunchedViaIP
        Get sessions by the IP address of the StoreFront server from which a user launches a session.
    .PARAMETER LaunchedViaPublishedName
        Gets sessions originally launched using a resource having a name matching the specified published name.
    .PARAMETER LogoffInProgress
        Gets sessions by whether they are in the process of being logged off or not.
    .PARAMETER LogonInProgress
        Gets sessions by whether they are still executing user logon processing or not.
    .PARAMETER MachineName
        Gets sessions by their machine name (in the form DOMAIN\machine).
    .PARAMETER MachineSummaryState
        Gets sessions on a machine with a specific summary state.
        Valid values are Off, Unregistered, Available, Disconnected, Preparing, and InUse.
    .PARAMETER MachineUid
        Gets sessions on a machine with the specified UID.
    .PARAMETER Metadata
        Gets records with matching metadata entries.
        The value being compared with is a concatenation of the key name, a colon, and the value. For example: -Metadata "abc:x*" matches records with a metadata entry having a key name of "abc" and a value starting with the letter "x".
    .PARAMETER OSType
        Gets sessions with a specific type of operating system.
    .PARAMETER PersistUserChanges
        Gets sessions where the user changes are persisted in a particular manner. Values can be:
        o OnLocal - User changes are persisted locally.
        o Discard - User changes are discarded.
        o OnPvd - User changes are persisted on the Pvd.
    .PARAMETER PowerState
        Gets sessions on machines in the specified power state.
        Valid values are Unmanaged, Unknown, Unavailable, On, Suspended, TurningOn, TurningOff, Suspending, and Resuming.
    .PARAMETER PreferredZoneName
        Gets sessions originally launched with the specified preferred zone name.
    .PARAMETER PreferredZoneUid
        Gets sessions originally launched with the specified preferred zone Uid.
    .PARAMETER Protocol
        Get sessions by connection protocol. Valid values are HDX, RDP and Console.
    .PARAMETER ProvisioningType
        Gets sessions hosted on machines provisioned in a particular manner. Values can be:
        o Manual - No automated provisioning.
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...).
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER ReceiverIPAddress
        Gets sessions with the specified client IP address supplied by Receiver (for example, StoreFront) when the session was launched, or reconnected.
    .PARAMETER ReceiverName
        Gets sessions with the specified client name supplied by Receiver (for example, StoreFront) when the session was launched, or reconnected.
    .PARAMETER SecureIcaActive
        Get sessions by their use of SecureICA.
    .PARAMETER SessionId
        Deprecated.
        Gets sessions by session ID, a unique identifier that Remote Desktop Services uses to track the session but it is only unique on that machine.
    .PARAMETER SessionReconnection
        Get sessions by their session reconnection (roaming) behavior. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER SessionState
        Get sessions by their state.
        Valid values are Other, PreparingNewSession, Connected, Active, Disconnected, Reconnecting, NonBrokeredSession, and Unknown.
    .PARAMETER SessionStateChangeTime
        Get sessions by their last state change time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER SessionSupport
        Gets sessions hosted on machines which support the required pattern of sessions. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER SessionType
        Gets sessions by their type.
        Valid values are Application and Desktop.
    .PARAMETER StartTime
        Gets sessions by their start time. In general, Citrix recommends using -Filter and relative comparisons.
    .PARAMETER TenantId
        Gets sessions associated with the specified tenant.
    .PARAMETER UntrustedUserName
        Gets sessions by the untrusted user name reported directly from the machine (in the form DOMAIN\user).
    .PARAMETER UserFullName
        Gets sessions by user's full name (usually 'first-name last-name').
    .PARAMETER UserName
        Get sessions by user name (in the form DOMAIN\user).
    .PARAMETER UserSID
        Get sessions by user's Windows SID.
    .PARAMETER UserUPN
        Gets sessions by user's User Principal Name (in the form user@domain).
    .PARAMETER ZoneName
        Gets sessions hosted by machines located in the zone with the specified name.
    .PARAMETER ZoneUid
        Gets sessions hosted by machines located in the zone with the specified UID.
    .PARAMETER ApplicationUid
        Gets sessions running the application with the specified Uid.
    .PARAMETER SharedDesktopUid
        Gets sessions by SharedDesktop Uid.
    .PARAMETER Property
        Selects the property by which matching sessions are grouped.
    .PARAMETER ReturnTotalRecordCount
        When specified, this causes the cmdlet to output an error record containing the number of records available. This error record is additional information and does not affect the objects written to the output pipeline. See about_Broker_Filtering for details.
    .PARAMETER MaxRecordCount
        Specifies the maximum number of records to return.
    .PARAMETER Skip
        Skips the specified number of records before returning results. Also reduces the count returned by -ReturnTotalRecordCount.
    .PARAMETER SortBy
        Sorts the results by the specified list of properties. The list is a set of property names separated by commas, semi-colons, or spaces. Optionally, prefix each name with a + or - to indicate ascending or descending order. Ascending order is assumed if no prefix is present.
    .PARAMETER Filter
        Gets records that match a PowerShell style filter expression. See about_Broker_Filtering for details.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter')]
    [OutputType([Citrix.Broker.Admin.SDK.GroupInfo])]
    param (
        [Parameter(ParameterSetName='UniqueId', Mandatory=$true, Position=1)]
        [long]
        ${Uid},
        
        [Parameter(ParameterSetName='Filter', Position=1)]
        [guid]
        ${SessionKey},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AgentVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${AnonymousUserId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ApplicationInUse},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionAppState]
        ${AppState},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${AppStateLastChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${AutonomouslyBrokered},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${BrokeringDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${BrokeringTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrokeringUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${BrokeringUserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${CatalogName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientPlatform},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${ClientProductId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ClientVersion},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ConnectedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.ConnectionMode]]
        ${ConnectionMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ControllerDNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopKind]
        ${DesktopKind},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DesktopSID},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${DesktopUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DeviceId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${DNSName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${EntitlementPolicyRuleUid},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[int]]
        ${EstablishmentDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${EstablishmentTime},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HardwareId},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${Hidden},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostedMachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HostingServerName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${HypervisorConnectionName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[timespan]]
        ${IdleDuration},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${IdleSince},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${ImageOutOfDate},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${IPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsAnonymousUser},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${IsPhysical},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaHostName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaIP},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${LaunchedViaPublishedName},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${LogoffInProgress},
        
        [Parameter(ParameterSetName='Filter')]
        [bool]
        ${LogonInProgress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${MachineName},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.DesktopSummaryState]
        ${MachineSummaryState},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${MachineUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Metadata},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${OSType},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.PowerState]
        ${PowerState},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${PreferredZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${PreferredZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${Protocol},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ReceiverIPAddress},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ReceiverName},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[bool]]
        ${SecureIcaActive},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SessionId},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[Citrix.Broker.Admin.SDK.SessionReconnection]]
        ${SessionReconnection},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionState]
        ${SessionState},
        
        [Parameter(ParameterSetName='Filter')]
        [datetime]
        ${SessionStateChangeTime},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ParameterSetName='Filter')]
        [Citrix.Broker.Admin.SDK.SessionType]
        ${SessionType},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[datetime]]
        ${StartTime},
        
        [Parameter(ParameterSetName='Filter')]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UntrustedUserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserFullName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserName},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserSID},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${UserUPN},
        
        [Parameter(ParameterSetName='Filter')]
        [string]
        ${ZoneName},
        
        [Parameter(ParameterSetName='Filter')]
        [guid]
        ${ZoneUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='Filter')]
        [int]
        ${SharedDesktopUid},
        
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},
        
        [Parameter(ParameterSetName='Filter')]
        [switch]
        ${ReturnTotalRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaxRecordCount},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${Skip},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SortBy},
        
        [Parameter(ParameterSetName='Filter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Filter},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Import-BrokerDesktopPolicy {
    <#
    .SYNOPSIS
        Sets the site wide Citrix Group Policy settings for the site.
    .PARAMETER Policy
        The configuration data containing the Citrix Group Policy settings to apply to every machine in the site.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [byte[]]
        ${Policy},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Move-BrokerAdminFolder {
    <#
    .SYNOPSIS
        Moves a folder to another place in the hierarchy, optionally renaming it
    .PARAMETER InputObject
        The folder(s) to be moved
    .PARAMETER Name
        A pattern matching the names of folders to be moved
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Destination
        The destination folder the folder being moved should end up in
    .PARAMETER NewName
        The name the new folder should have in the destination folder
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AdminFolder])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [Citrix.Broker.Admin.SDK.AdminFolder]
        ${Destination},
        
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByUid')]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Move-BrokerApplication {
    <#
    .SYNOPSIS
        Move a published application from one admin folder to another
    .PARAMETER InputObject
        The application(s) to be moved
    .PARAMETER Name
        The application(s) to be moved
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Destination
        The destination location within the admin folder hierarchy
    .PARAMETER NewName
        The new name of the application in its new destination
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Application])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [Citrix.Broker.Admin.SDK.AdminFolder]
        ${Destination},
        
        [Parameter(ParameterSetName='ByUid')]
        [Parameter(ParameterSetName='ByName')]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerAccessPolicyRule {
    <#
    .SYNOPSIS
        Creates a new rule in the site's access policy.
    .PARAMETER AllowedConnections
        Specifies whether connections must be local or via Access Gateway, and if so whether specified SmartAccess tags must be provided by Access Gateway with the connection. This property forms part of the included SmartAccess tags filter.
        Valid values are Filtered, NotViaAG, ViaAG and AnyViaAG.
        For a detailed description of this property see "help about_Broker_AccessPolicy".
    .PARAMETER AllowedProtocols
        Specifies the protocols (for example HDX, RDP) available to the user for sessions delivered from the new rule's desktop group. If the user gains access to a desktop group by multiple rules, the allowed protocol list is the combination of the protocol lists from all those rules.
        If the protocol list is empty, access to the desktop group is implicitly denied.
    .PARAMETER AllowedUsers
        Specifies the behavior of the included users filter of the new rule. This can restrict access to a list of named users or groups, allow access to any authenticated user, any user (whether authenticated or not), or only non-authenticated users. For a detailed description of this property see "help about_Broker_AccessPolicy".
        Valid values are Filtered, AnyAuthenticated, Any, AnonymousOnly and FilteredOrAnonymous.
    .PARAMETER AllowRestart
        Specifies if the user can restart sessions delivered from the new rule's desktop group. Session restart is handled as follows: For sessions on single-session power-managed machines, the machine is powered off, and a new session launch request made; for sessions on multi-session machines, a logoff request is issued to the session, and a new session launch request made; otherwise the property is ignored.
    .PARAMETER Description
        Specifies an optional description of the new rule. The text is purely informational for the administrator, it is never visible to the end user.
    .PARAMETER DesktopGroupUid
        Specifies the desktop group to which the new rule applies.
    .PARAMETER Enabled
        Specifies whether the new rule is initially enabled. A disabled rule is ignored when evaluating the site's access policy.
    .PARAMETER ExcludedClientIPFilterEnabled
        Specifies whether the excluded client IP address filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedClientIPs
        Specifies IP addresses of user devices explicitly denied access to the new rule's desktop group. Addresses can be specified as simple numeric addresses or as subnet masks (for example, 10.40.37.5 or 10.40.0.0/16). This property forms part of the excluded client IP address filter.
    .PARAMETER ExcludedClientNameFilterEnabled
        Specifies whether the excluded client names filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedClientNames
        Specifies names of user devices explicitly denied access to the new rule's desktop group. This property forms part of the excluded client names filter.
    .PARAMETER ExcludedSmartAccessFilterEnabled
        Specifies whether the excluded SmartAccess tags filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedSmartAccessTags
        Specifies SmartAccess tags which explicitly deny access to the new rule's desktop group if any occur in those provided by Access Gateway with the user's connection. This property forms part of the excluded SmartAccess tags filter.
    .PARAMETER ExcludedUserFilterEnabled
        Specifies whether the excluded users filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedUsers
        Specifies any users and groups who are explicitly denied access to the new rule's desktop group. This property forms part of the excluded users filter.
    .PARAMETER HdxSslEnabled
        Indicates whether TLS encryption is enabled for sessions delivered from the rule's desktop group.
    .PARAMETER IncludedClientIPFilterEnabled
        Specifies whether the included client IP address filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedClientIPs
        Specifies IP addresses of user devices allowed access to the new rule's desktop group. Addresses can be specified as simple numeric addresses or as subnet masks (for example, 10.40.37.5 or 10.40.0.0/16). This property forms part of the included client IP address filter.
    .PARAMETER IncludedClientNameFilterEnabled
        Specifies whether the included client name filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedClientNames
        Specifies names of user devices allowed access to the new rule's desktop group. This property forms part of the included client names filter.
    .PARAMETER IncludedDesktopGroupFilterEnabled
        This parameter is supported for backward compatibility only. If used the supplied value must be $true.
        The IncludedDesktopGroups and IncludedDesktopGroupFilterEnabled parameters have been superseded by the DesktopGroupUid parameter.
    .PARAMETER IncludedDesktopGroups
        This parameter is supported for backward compatibility only. If used only a single desktop group UID can be specified.
        The IncludedDesktopGroups and IncludedDesktopGroupFilterEnabled parameters have been superseded by the DesktopGroupUid parameter.
    .PARAMETER IncludedSmartAccessFilterEnabled
        Specifies whether the included SmartAccess tags filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedSmartAccessTags
        Specifies SmartAccess tags which grant access to the new rule's desktop group if any occur in those provided by Access Gateway with the user's connection. This property forms part of the excluded SmartAccess tags filter.
    .PARAMETER IncludedUserFilterEnabled
        Specifies whether the included users filter is initially enabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedUsers
        Specifies users and groups who are granted access to the new rule's desktop group. This property forms part of the included users filter.
    .PARAMETER Name
        Specifies the administrative name of the new rule. Each rule within the site's access policy must have a unique name.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByDesktopGroup')]
    [OutputType([Citrix.Broker.Admin.SDK.AccessPolicyRule])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.AllowedConnection]
        ${AllowedConnections},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${AllowedProtocols},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.AllowedUser]
        ${AllowedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${AllowRestart},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='ByDesktopGroup', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedClientIPFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${ExcludedClientIPs},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedClientNameFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${ExcludedClientNames},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedSmartAccessFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${ExcludedSmartAccessTags},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${HdxSslEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedClientIPFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${IncludedClientIPs},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedClientNameFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${IncludedClientNames},
        
        [Parameter(ParameterSetName='ByLegacyDesktopGroupFilter', ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedDesktopGroupFilterEnabled},
        
        [Parameter(ParameterSetName='ByLegacyDesktopGroupFilter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${IncludedDesktopGroups},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedSmartAccessFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${IncludedSmartAccessTags},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerAdminFolder {
    <#
    .SYNOPSIS
        Creates a new admin folder.
    .PARAMETER FolderName
        The simple name of the new folder within its parent (if any)
    .PARAMETER ParentFolder
        The name or UID of the parent folder (if any)
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.AdminFolder])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${FolderName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder]
        ${ParentFolder},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerAppAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Creates a new application rule in the site's assignment policy.
    .PARAMETER Description
        Specifies an optional description of the new application rule. The text is purely informational for the administrator, it is never visible to the end user.
    .PARAMETER DesktopGroupUid
        Specifies the unique ID of the desktop group to which the new application rule applies.
    .PARAMETER Enabled
        Specifies whether the new application rule is initially enabled. A disabled rule is ignored when evaluating the site's assignment policy.
    .PARAMETER ExcludedUserFilterEnabled
        Specifies whether the excluded users filter is initially enabled. If the filter is disabled then any user entries in the filter are ignored when assignment policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Specifies the excluded users filter of the new application rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from the rule.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IncludedUserFilterEnabled
        Specifies whether the included users filter is initially enabled. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to a machine assignment by the new application rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
    .PARAMETER IncludedUsers
        Specifies the included users filter of the new application rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        If a user appears explicitly in the excluded users filter of the rule or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER Name
        Specifies the administrative name of the new application rule. Each rule in the site's assignment policy must have a unique name (irrespective of whether they are desktop or application rules).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerAppEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Creates a new application rule in the site's entitlement policy.
    .PARAMETER Description
        Specifies an optional description of the new application rule. The text is purely informational for the administrator, it is never visible to the end user.
    .PARAMETER DesktopGroupUid
        Specifies the unique ID of the desktop group to which the new application rule applies.
    .PARAMETER Enabled
        Specifies whether the new application rule is initially enabled. A disabled rule is ignored when evaluating the site's entitlement policy.
    .PARAMETER ExcludedUserFilterEnabled
        Specifies whether the excluded users filter is initially enabled. If the filter is disabled then any user entries in the filter are ignored when entitlement policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Specifies the excluded users filter of the application rule, that is, the users and groups who are explicitly denied entitlements to published applications from the desktop group.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IncludedUserFilterEnabled
        Specifies whether the included users filter is initially enabled. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to an application session by the new rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
    .PARAMETER IncludedUsers
        Specifies the included users filter of the application rule, that is, the users and groups who are granted an entitlement to an application session by the new rule.
        If a user appears explicitly in the excluded users filter of the rule or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER LeasingBehavior
        Defines the desired connection leasing behavior applied to sessions launched using this entitlement. Possible values are:
        Allowed and Disallowed.
        The Allowed value indicates that connection leasing should behave normally. The Disallowed value prevents users from launching or reconnecting to sessions using this entitlement while connection leasing is active (typically during a database outage).
    .PARAMETER Name
        Specifies the administrative name of the new application rule. Each rule in the site's entitlement policy must have a unique name (irrespective of whether they are desktop or application rules).
    .PARAMETER SessionReconnection
        Defines reconnection (roaming) behavior for sessions launched using this rule. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.LeasingBehavior]
        ${LeasingBehavior},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionReconnection]
        ${SessionReconnection},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerApplication {
    <#
    .SYNOPSIS
        Creates a new published application.
    .PARAMETER AdminFolder
        The folder in which the new application should reside (if any).
    .PARAMETER ApplicationGroup
        Specifies which application group this application should be associated with. Associations between applications and desktop groups or application groups can be added or removed using the Add-BrokerApplication and Remove-BrokerApplication cmdlets.
    .PARAMETER ApplicationType
        Specifies the type of the application: HostedOnDesktop, InstalledOnClient or PublishedContent.
    .PARAMETER BrowserName
        Specifies the internal name for this application. It must be unique in the site.
    .PARAMETER ClientFolder
        Specifies the folder that the application belongs to as the user sees it. This is the application folder that is seen in the Citrix Online Plug-in, in Web Services, and also in the end-user's Start menu. Subdirectories can be specified with '\' character. The following special characters are not allowed: / * ? < > | " :. Note that this property cannot be set for applications of type InstalledOnClient.
    .PARAMETER CommandLineArguments
        Specifies the command-line arguments to use when launching the executable. Environment variables can be used. This setting is ignored for applications of type PublishedContent.
    .PARAMETER CommandLineExecutable
        Specifies the name of the executable file to launch. The full path need not be provided if it's already in the path. Environment variables can also be used.
    .PARAMETER CpuPriorityLevel
        Specifies the CPU priority for the launched process. Valid values are: Low, BelowNormal, Normal, AboveNormal, and High. Note that this property cannot be set for applications of type InstalledOnClient.
    .PARAMETER Description
        Specifies the description of the application. This is only seen by Citrix administrators and is not visible to users.
    .PARAMETER DesktopGroup
        Specifies which desktop group this application should be associated with. Associations between applications and desktop groups or application groups can be added or removed using the Add-BrokerApplication and Remove-BrokerApplication cmdlets.
    .PARAMETER Enabled
        Specifies whether or not this application can be launched.
    .PARAMETER HomeZoneOnly
        Specifies whether if the preferred zone for launching the application is its home zone but no machine is available from that zone then the launch fails.
        This can only be set if the application has a home zone preference specified.
    .PARAMETER HomeZoneUid
        Specifies any home zone preference used when launching this application.
    .PARAMETER IconFromClient
        Specifies if the app icon should be retrieved from the application on the client. This is reserved for possible future use, and all applications of type HostedOnDesktop cannot set or change this value.
    .PARAMETER IconUid
        Specifies which icon to use for this application. This icon is visible both to the administrator (in the consoles) and to the user. If no icon is specified, then a generic built-in application icon is used.
    .PARAMETER IgnoreUserHomeZone
        Specifies that when launching the application and the user has a home zone specified then the user's home zone preference should be ignored.
        This can only be set if the application does not itself have a home zone preference specified.
    .PARAMETER MaxPerUserInstances
        Specifies the maximum allowed concurrently running instances of the application that an individual user can have. A value of zero allows unlimited usage subject to any site-wide limit.
    .PARAMETER MaxTotalInstances
        Specifies the maximum allowed total of concurrently running instances of the application in the site. A value of zero allows unlimited usage.
    .PARAMETER Name
        Specifies the name of the application (must be unique within folder).
    .PARAMETER Priority
        Specifies the priority of the mapping between the application and desktop group. A value of zero has the highest priority, with increasing values indicating lower priorities.
    .PARAMETER PublishedName
        The name seen by end users who have access to this application.
    .PARAMETER SecureCmdLineArgumentsEnabled
        Specifies whether the command-line arguments are secured or not. This is reserved for possible future use, and all applications of type HostedOnDesktop can only have this value set to true.
    .PARAMETER ShortcutAddedToDesktop
        Specifies whether or not a shortcut to the application should be placed on the user device. This is valid only for the Citrix Online Plug-in.
    .PARAMETER ShortcutAddedToStartMenu
        Specifies whether a shortcut to the application should be placed in the user's start menu on their user device.
    .PARAMETER StartMenuFolder
        Specifies the name of the start menu folder that holds the application shortcut (if any). This is valid only for the Citrix Online Plug-in. Subdirectories can be specified with '\' character. The following special characters are not allowed: / * ? < > | " :.
    .PARAMETER UserFilterEnabled
        Specifies whether the application's user filter is enabled or disabled. Where the user filter is enabled, the application is visible only to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER UUID
        An optional GUID for this application.
    .PARAMETER Visible
        Specifies whether or not this application is visible to users. Note that it's possible for an application to be disabled and still visible.
    .PARAMETER WaitForPrinterCreation
        Specifies whether or not the session waits for the printers to be created before allowing the user to interact with the session. Note that this property cannot be set for applications of type InstalledOnClient.
    .PARAMETER WorkingDirectory
        Specifies which working directory the executable is launched from. Environment variables can be used. This setting is ignored for applications of type PublishedContent.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='AddToDesktopGroup')]
    [OutputType([Citrix.Broker.Admin.SDK.Application])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder]
        ${AdminFolder},
        
        [Parameter(ParameterSetName='AddToApplicationGroup', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationType]
        ${ApplicationType},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 38)]
        [string]
        ${BrowserName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 260)]
        [string]
        ${ClientFolder},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${CommandLineArguments},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 255)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandLineExecutable},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.CpuPriorityLevel]
        ${CpuPriorityLevel},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='AddToDesktopGroup', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${HomeZoneOnly},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [AllowNull()]
        [System.Nullable[guid]]
        ${HomeZoneUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IconFromClient},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IgnoreUserHomeZone},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxPerUserInstances},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxTotalInstances},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 389)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='AddToDesktopGroup', ValueFromPipelineByPropertyName=$true)]
        [int]
        ${Priority},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${PublishedName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${SecureCmdLineArgumentsEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ShortcutAddedToDesktop},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ShortcutAddedToStartMenu},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 255)]
        [string]
        ${StartMenuFolder},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${UserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Visible},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${WaitForPrinterCreation},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${WorkingDirectory},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerApplicationGroup {
    <#
    .SYNOPSIS
        Create a new application group to which applications can be added.
    .PARAMETER Description
        A description for the application group. Not visible to end users.
    .PARAMETER Enabled
        Whether the application group's applications can be launched by end users.
    .PARAMETER Name
        A name for the application group. Not visible to end users.
    .PARAMETER RestrictToTag
        Optional tag that may be used further to restrict which machines may be used for launching the application group's applications. A machine may be used by an application group if either the application group has no tag restriction or the application group does have a tag restriction and the machine is tagged with the same tag.
    .PARAMETER Scope
        Specifies the name of the delegated administration scope to which the application group should belong.
    .PARAMETER SessionSharingEnabled
        Whether the application group's applications can share sessions with applications that are not a member of this application group. Please note this setting and SingleAppPerSession cannot be true at the same time.
    .PARAMETER SingleAppPerSession
        Specifies whether each application launched from this application group starts in its own new session or can share an existing suitable session if present. Please note this setting and SessionSharingEnabled cannot be true at the same time.
    .PARAMETER TenantId
        Specifies identity of tenant associated with application group. Must always be specified in multitenant sites, must not be specified otherwise.
    .PARAMETER UserFilterEnabled
        Whether the application group's user filter is enabled or disabled. Where the user filter is enabled, the application is visible only to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER UUID
        The UUID of the application group. If a UUID is not provided, then one will be generated automatically.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationGroup])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${RestrictToTag},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${Scope},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${SessionSharingEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${SingleAppPerSession},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${UserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Creates a new desktop rule in the site's assignment policy.
    .PARAMETER ColorDepth
        Specifies the color depth of any desktop sessions to machines assigned by the new rule.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER Description
        Specifies an optional description of the new desktop rule. The text may be visible to the end user, for example, as a tooltip associated with the desktop entitlement.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER DesktopGroupUid
        Specifies the unique ID of the desktop group to which the new desktop rule applies.
    .PARAMETER Enabled
        Specifies whether the new desktop rule is initially enabled. A disabled rule is ignored when evaluating the site's assignment policy.
    .PARAMETER ExcludedUserFilterEnabled
        Specifies whether the excluded users filter is initially enabled. If the filter is disabled then any user entries in the filter are ignored when assignment policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Specifies the excluded users filter of the new desktop rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from the rule.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IconUid
        Specifies the unique ID of the icon used to display the machine assignment entitlement to the user, and of the assigned desktop itself following the assignment.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER IncludedUserFilterEnabled
        Specifies whether the included users filter is initially enabled. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to a machine assignment by the new desktop rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
        For rules that relate to RemotePC desktop groups however, if the included user filter is disabled, the rule is effectively disabled.
    .PARAMETER IncludedUsers
        Specifies the included users filter of the new desktop rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        If a user appears explicitly in the excluded users filter of the rule or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER MaxDesktops
        The number of machines from the rule's desktop group to which a user is entitled. Where an entitlement is granted to a user group rather than an individual, the number of machines applies to each member of the user group independently.
    .PARAMETER Name
        Specifies the administrative name of the new desktop rule. Each rule in the site's assignment policy must have a unique name (irrespective of whether they are desktop or application rules).
    .PARAMETER PublishedName
        The name of the new machine assignment entitlement as seen by the user, and of the assigned desktop following its usage.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER SecureIcaRequired
        Specifies whether the new desktop rule requires the SecureICA protocol to be used for desktop sessions to machines assigned using the entitlement.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER UUID
        An optional GUID for this rule.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.AssignmentPolicyRule])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxDesktops},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${PublishedName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerCatalog {
    <#
    .SYNOPSIS
        Adds a new catalog to the site.
    .PARAMETER PvsForVM
        Deprecated:
        Identifies the provisioning scheme used by this catalog. To be specified in the format: ProvisioningSchemeGuid:ServiceGroupGuid. Applicable only to thin-cloned, single-image or personal vDisk catalogs.
    .PARAMETER AllocationType
        Specifies how machines in the catalog are assigned to users. Values can be:
        o Static - Machines in a catalog of this type are permanently assigned to a user.
        o Permanent - equivalent to 'Static'.
        o Random  - Machines in a catalog of this type are picked at random and temporarily assigned to a user.
    .PARAMETER CatalogKind
        Deprecated: The type of machines the catalog will contain. Values can be: ThinCloned, SingleImage, PowerManaged, Unmanaged, Pvs, Pvd or PvsPvd.
        Thin-Cloned, Single-Image and Personal vDisk Catalogs
        -----------------------------------------------------
        Thin-cloned and single-image catalog kinds are for machines created and managed with Provisioning Services for VMs. All machines in this type of catalog are managed, and so must be associated with a hypervisor connection.
        A thin-cloned catalog is used for original golden VM images that are cloned when they are assigned to a VM, and users' changes to the VM image are retained after the VM is restarted.
        A single-image catalog is used when multiple machines provisioned with Provisioning Services for VMs all share a single golden VM image when they run and, when restarted, they revert to the original VM image state.
        A personal vDisk catalog is similar to a single-image catalog, but it also uses personal vDisk technology.
        PowerManaged
        ------------
        This catalog kind is for managed machines that are manually provisioned by administrators. All machines in this type of catalog are managed, and so must be associated with a hypervisor connection.
        Unmanaged
        ---------
        This catalog kind is for unmanaged machines, so there is no associated hypervisor connection.
        PVS
        ---
        This catalog kind is for managed machines that are provisioned using Provisioning Services. All machines in this type of catalog are managed, and so must be associated with a hypervisor connection. Only shared desktops are suitable for this catalog kind.
        A Provisioning Services-personal vDisk (PvsPvd) catalog is similar to a Provisioning Services catalog, but it also uses personal vDisk technology.
    .PARAMETER Description
        A description for the catalog.
    .PARAMETER IsRemotePC
        Specifies whether this is to be a Remote PC catalog.
        IsRemotePC can only be enabled when:
        o SessionSupport is SingleSession
        o MachinesArePhysical is true.
    .PARAMETER MachinesArePhysical
        Specifies whether machines in the catalog can be power-managed by the Citrix Broker Service. Where the Citrix Broker Service cannot control the power state of themachine specify $true, otherwise $false. Can only be specified together with a provisioning type of Pvs or Manual, or if used with the legacy CatalogKind parameter only with Pvs or PvsPvd catalog kinds.
    .PARAMETER MinimumFunctionalLevel
        The minimum FunctionalLevel required for machines to register in the site.
        Valid values are L5, L7, L7_6
    .PARAMETER Name
        Specifies a name for the catalog. Each catalog within a site must have a unique name.
    .PARAMETER PersistUserChanges
        Specifies how user changes are persisted on machines in the catalog. Possible values are:
        o OnLocal: User changes are stored on the machine's local storage.
        o Discard: User changes are discarded.
        o OnPvd: User changes are stored on the user's personal vDisk.
    .PARAMETER ProvisioningSchemeId
        Specifies the identity of the MCS provisioning scheme the new catalog is associated with (can only be specified for new catalogs with a ProvisioningType of MCS).
    .PARAMETER ProvisioningType
        Specifies the ProvisioningType for the catalog. Values can be:
        o Manual - No provisioning.
        o PVS -  Machine provisioned by PVS (machine may be physical, blade, VM,...).
        o MCS - Machine provisioned by MCS (machine must be VM).
    .PARAMETER PvsAddress
        Specifies the URL of the Provisioning Services server. Only applicable to Provisioning Services or Provisioning Services-personal vDisk catalogs.
    .PARAMETER PvsDomain
        Specifies the Active Directory domain of the Provisioning Services server. Only applicable to Provisioning Services or Provisioning Services-personal vDisk catalogs.
    .PARAMETER RemotePCHypervisorConnectionUid
        Specifies the hypervisor connection to use for powering on remote PCs in this catalog (only allowed when IsRemotePC is true).
    .PARAMETER Scope
        Specifies the name of the delegated administration scope to which the catalog belongs.
    .PARAMETER SessionSupport
        Specifies whether machines in the catalog are single or multi-session capable. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER TenantId
        Specifies identity of tenant associated with catalog. Must always be specified in multitenant sites, must not be specified otherwise.
    .PARAMETER UUID
        An optional GUID for this catalog.
    .PARAMETER ZoneUid
        Zone Uid associated with this catalog.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByProperties')]
    [OutputType([Citrix.Broker.Admin.SDK.Catalog])]
    param (
        [Parameter(ParameterSetName='ByCatalogKind', ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${PvsForVM},
        
        [Parameter(Mandatory=$true, Position=2, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.AllocationType]
        ${AllocationType},
        
        [Parameter(ParameterSetName='ByCatalogKind', Mandatory=$true, Position=3, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.CatalogKind]
        ${CatalogKind},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IsRemotePC},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${MachinesArePhysical},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.FunctionalLevel]
        ${MinimumFunctionalLevel},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByProperties', Mandatory=$true, Position=5, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.PersistUserChanges]
        ${PersistUserChanges},
        
        [Parameter(ParameterSetName='ByProperties', ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNull()]
        [System.Nullable[guid]]
        ${ProvisioningSchemeId},
        
        [Parameter(ParameterSetName='ByProperties', Mandatory=$true, Position=3, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.ProvisioningType]
        ${ProvisioningType},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${PvsAddress},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${PvsDomain},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[int]]
        ${RemotePCHypervisorConnectionUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${Scope},
        
        [Parameter(ParameterSetName='ByProperties', Mandatory=$true, Position=4, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${ZoneUid},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerConfigurationSlot {
    <#
    .SYNOPSIS
        Creates a new configuration slot.
    .PARAMETER Description
        Description of configuration slot.
    .PARAMETER Name
        Name of the new configuration slot. This must be alphanumeric and not contain white space.
    .PARAMETER SettingsGroup
        The settings group determines the particular collection of related settings that may be controlled by this slot. This must match the format of a Citrix Group Policy configuration group (e.g. "G=UPM"). Only settings that have this exact group may be specified in a machine configuration associated with this configuration slot.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.ConfigurationSlot])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${SettingsGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerConfiguredFTA {
    <#
    .SYNOPSIS
        Creates a file type association with a published application.
    .PARAMETER ApplicationUid
        Specifies the application with which the file type should be associated.
    .PARAMETER ImportedFTA
        Specifies the ImportedFTA object to use for creating the ConfiguredFTA object. All values needed to create a ConfiguredFTA object are read from the ImportedFTA object.
    .PARAMETER ExtensionName
        Specifies the extension name for the file type association. For example, ".txt" or ".doc".
    .PARAMETER ContentType
        Specifies the content type of the file type (as listed in the Registry). For example, content type would be "text/plain" or "application/msword".
    .PARAMETER HandlerName
        Specifies the name of the handler for the file type association (as seen in the Registry). For example, "TXTFILE" or "Word.Document.8".
    .PARAMETER HandlerDescription
        Specifies the description of the handler for the file type association.
    .PARAMETER HandlerOpenArguments
        Specifies the arguments for the open command that the handler should use. For example, "%1".
    .PARAMETER UUID
        An optional GUID for this ConfiguredFTA.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.ConfiguredFTA])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${ApplicationUid},
        
        [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.ImportedFTA]
        ${ImportedFTA},
        
        [Parameter(ParameterSetName='BySettings', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 16)]
        [string]
        ${ExtensionName},
        
        [Parameter(ParameterSetName='BySettings', ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNull()]
        [ValidateLength(0, 255)]
        [string]
        ${ContentType},
        
        [Parameter(ParameterSetName='BySettings', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${HandlerName},
        
        [Parameter(ParameterSetName='BySettings', ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 256)]
        [ValidateNotNull()]
        [string]
        ${HandlerDescription},
        
        [Parameter(ParameterSetName='BySettings', ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 255)]
        [ValidateNotNull()]
        [string]
        ${HandlerOpenArguments},
        
        [guid]
        ${UUID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerDelayedHostingPowerAction {
    <#
    .SYNOPSIS
        Causes a power action to be queued after a delay.
    .PARAMETER Action
        Specifies the power state change action that is to be performed on the specified machine after the specified delay.
        Valid values are Shutdown and Suspend.
    .PARAMETER Delay
        Specifies a timespan delay before the action is queued.
    .PARAMETER MachineName
        Specifies the machine that the action is to be performed on.
        The machine can be identified by DNS name, short name, SID, or name of the form domain\machine.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.DelayedHostingPowerAction])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.PowerManagementAction]
        ${Action},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${Delay},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerDesktopGroup {
    <#
    .SYNOPSIS
        Create a new desktop group for managing the brokering of groups of desktops.
    .PARAMETER AppDisks
        Specifies the application disks to be used by machines in the desktop group.
    .PARAMETER AutomaticPowerOnForAssigned
        Specifies whether assigned desktops in the desktop group should be automatically started at the start of peak time periods. Only relevant for groups whose DesktopKind is Private.
    .PARAMETER AutomaticPowerOnForAssignedDuringPeak
        Specifies whether assigned desktops in the desktop group should be automatically started throughout peak time periods. Only relevant for groups whose DesktopKind is Private and which have AutomaticPowerOnForAssigned set to true.
    .PARAMETER ColorDepth
        Specifies the color depth that the ICA session should use for desktops in this group.  Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER DeliveryType
        Specifies whether desktops, applications, or both, can be delivered from machines contained within the new desktop group. Desktop groups with a DesktopKind of Private cannot be used to deliver both desktops and applications. Defaults to DesktopsOnly if not specified.
        Valid values are DesktopsOnly, AppsOnly, and DesktopsAndApps.
    .PARAMETER Description
        A description for this desktop group useful for administrators of the site.
    .PARAMETER DesktopKind
        The kind of desktops this group will hold. Valid values are Private and Shared.
    .PARAMETER Enabled
        Whether the desktop group should be in the enabled state; disabled desktop groups do not appear to users.
    .PARAMETER IconUid
        The UID of the broker icon to be displayed to users for their desktop(s) in this desktop group.
    .PARAMETER InMaintenanceMode
        Whether the desktop should be created in maintenance mode; a desktop group in maintenance mode will not allow users to connect or reconnect to their desktops.
    .PARAMETER IsRemotePC
        Specifies whether this is to be a Remote PC desktop group.
        IsRemotePC can only be enabled when:
        o SessionSupport is SingleSession
        o DeliveryType is DesktopsOnly
        o DesktopKind is Private
    .PARAMETER LicenseModel
        The license model for this desktop group. If none is specified, then the site-wide license model is used.
    .PARAMETER MinimumFunctionalLevel
        The minimum FunctionalLevel required for machines to work successfully in the desktop group.
        Valid values are L5, L7, L7_6
    .PARAMETER Name
        The name of the new broker desktop group.
    .PARAMETER OffPeakBufferSizePercent
        The percentage of machines in the desktop group that should be kept available in an idle state outside peak hours.
    .PARAMETER OffPeakDisconnectAction
        The action to be performed after a configurable period of a user session disconnecting outside peak hours. Possible values are Nothing, Suspend, or Shutdown
    .PARAMETER OffPeakDisconnectTimeout
        The number of minutes before the configured action should be performed after a user session disconnects outside peak hours.
    .PARAMETER OffPeakExtendedDisconnectAction
        The action to be performed after a second configurable period of a user session disconnecting outside peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER OffPeakExtendedDisconnectTimeout
        The number of minutes before the second configured action should be performed after a user session disconnects outside peak hours.
    .PARAMETER OffPeakLogOffAction
        The action to be performed after a configurable period of a user session ending outside peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER OffPeakLogOffTimeout
        The number of minutes before the configured action should be performed after a user session ends outside peak hours.
    .PARAMETER PeakBufferSizePercent
        The percentage of machines in the desktop group that should be kept available in an idle state in peak hours.
    .PARAMETER PeakDisconnectAction
        The action to be performed after a configurable period of a user session disconnecting in peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER PeakDisconnectTimeout
        The number of minutes before the configured action should be performed after a user session disconnects in peak hours.
    .PARAMETER PeakExtendedDisconnectAction
        The action to be performed after a second configurable period of a user session disconnecting in peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER PeakExtendedDisconnectTimeout
        The number of minutes before the second configured action should be performed after a user session disconnects in peak hours.
    .PARAMETER PeakLogOffAction
        The action to be performed after a configurable period of a user session ending in peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER PeakLogOffTimeout
        The number of minutes before the configured action should be performed after a user session ends in peak hours.
    .PARAMETER ProductCode
        The licensing product code for this desktop group. If none is specified, then the site-wide product code is used.
    .PARAMETER ProtocolPriority
        A list of protocol names in the order in which they should be attempted for use during connection.
    .PARAMETER PublishedName
        The name that will be displayed to users for their desktop(s) in this desktop group.
    .PARAMETER ReuseMachinesWithoutShutdownInOutage
        Specifies whether power cycle operations are required during outage for pooled machines.
    .PARAMETER Scope
        Specifies the name of the delegated administration scope to which the desktop group should belong.
    .PARAMETER SecureIcaRequired
        Whether HDX connections to desktops in the new desktop group require the use of a secure protocol.
    .PARAMETER SessionSupport
        Specifies whether machines in the desktop group are single or multi-session capable. Values can be:
        o SingleSession - Single-session only machine.
        o MultiSession  - Multi-session capable machine.
    .PARAMETER SettlementPeriodBeforeAutoShutdown
        Time after a session ends during which automatic shutdown requests (for example, shutdown after use, idle pool management) are deferred. Any outstanding shutdown request takes effect after the settlement period expires. This is typically used to configure time to allow logoff scripts to complete.
    .PARAMETER SettlementPeriodBeforeUse
        Idle period before a machine can be selected to host a new session after registration or the end of a previous session. This is typically used to allow a machine to become idle following processing associated with start-up or logoff actions. A machine may still be selected during the idle period if no other machine is available for immediate use.
    .PARAMETER ShutdownDesktopsAfterUse
        Whether desktops in this desktop group should be automatically shut down when each user session completes (only relevant to power-managed desktops).
    .PARAMETER TenantId
        Specifies identity of tenant associated with desktop group. Must always be specified in multitenant sites, must not be specified otherwise.
    .PARAMETER TimeZone
        The time zone in which this desktop group's machines reside.
        The time zone must be specified for any of the group's automatic power management settings to take effect. Automatic power management operations include pool management (power time schemes), reboot schedules, session disconnect and logoff actions, and powering on assigned machines etc.
    .PARAMETER TurnOnAddedMachine
        This flag specifies whether the Broker Service should attempt to power on machines when they are added to the desktop group.
    .PARAMETER UUID
        An optional GUID for this desktop group.
    .PARAMETER ZonePreferences
        Ordered list of zone preferences to be applied when launching resources from this desktop group. Valid zone preference values are UserLocation, UserHome, UserHomeOnly and ApplicationHome.
        The list can have zero or more entries subject to the following restrictions: Zone preferences can only be applied to groups having a DesktopKind of Shared; the same zone preference value cannot occur in the list more than once; the UserHome and UserHomeOnly values are mutually exclusive and cannot both appear in the list.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroup])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid[]]
        ${AppDisks},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${AutomaticPowerOnForAssigned},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${AutomaticPowerOnForAssignedDuringPeak},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.ColorDepth]
        ${ColorDepth},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.DeliveryType]
        ${DeliveryType},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.DesktopKind]
        ${DesktopKind},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${IconUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IsRemotePC},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[Citrix.Broker.Admin.SDK.LicenseModel]]
        ${LicenseModel},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.FunctionalLevel]
        ${MinimumFunctionalLevel},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${OffPeakBufferSizePercent},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakDisconnectAction},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${OffPeakDisconnectTimeout},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakExtendedDisconnectAction},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${OffPeakExtendedDisconnectTimeout},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakLogOffAction},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${OffPeakLogOffTimeout},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${PeakBufferSizePercent},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakDisconnectAction},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${PeakDisconnectTimeout},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakExtendedDisconnectAction},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${PeakExtendedDisconnectTimeout},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakLogOffAction},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${PeakLogOffTimeout},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ProductCode},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${ProtocolPriority},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${PublishedName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ReuseMachinesWithoutShutdownInOutage},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${Scope},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${SecureIcaRequired},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionSupport]
        ${SessionSupport},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${SettlementPeriodBeforeAutoShutdown},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${SettlementPeriodBeforeUse},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ShutdownDesktopsAfterUse},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[guid]]
        ${TenantId},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${TimeZone},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${TurnOnAddedMachine},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.ZonePreference[]]
        ${ZonePreferences},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerDesktopGroupWebhook {
    <#
    .SYNOPSIS
        Create a webhook for the sepcified desktop group
    .PARAMETER Address
        The URL of the webhook
    .PARAMETER DesktopGroupUid
        The Uid of the desktop group to configure a webhook
    .PARAMETER OnEvent
        The event upon that the webhook is invoked, currently the only supported event is MachineRegistration.
        For MachineRegistration, when the webhook is invoked it is HTTP POST with a JSON payload of the format: {"SamName": "value"} where the "value" is the SamName of the machine that is registering to the broker.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroupWebhook])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 2000)]
        [string]
        ${Address},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.WebhookTrigger]
        ${OnEvent},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Creates a new desktop rule in the site's entitlement policy.
    .PARAMETER ColorDepth
        Specifies the color depth of any desktop sessions launched by a user from this entitlement.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER Description
        Specifies an optional description of the new desktop rule. The text may be visible to the end user, for example, as a tooltip associated with the desktop entitlement.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER DesktopGroupUid
        Specifies the unique ID of the desktop group to which the new desktop rule applies.
    .PARAMETER Enabled
        Specifies whether the new desktop rule is initially enabled. A disabled rule is ignored when evaluating the site's entitlement policy.
    .PARAMETER ExcludedUserFilterEnabled
        Specifies whether the excluded users filter is initially enabled. If the filter is disabled then any user entries in the filter are ignored when entitlement policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Specifies the excluded users filter of the desktop rule, that is, the users and groups who are explicitly denied an entitlement to a desktop session from the new rule.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IconUid
        Specifies the unique ID of the icon used to display the desktop session entitlement to the user.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER IncludedUserFilterEnabled
        Specifies whether the included users filter is initially enabled. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to a desktop session by the new rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
    .PARAMETER IncludedUsers
        Specifies the included users filter of the rule, that is, the users and groups who are granted an entitlement to a desktop session by the new rule.
        If a user appears explicitly in the excluded users filter of the rule or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER LeasingBehavior
        Defines the desired connection leasing behavior applied to sessions launched using this entitlement. Possible values are:
        Allowed and Disallowed.
        The Allowed value indicates that connection leasing should behave normally. The Disallowed value prevents users from launching or reconnecting to sessions using this entitlement while connection leasing is active (typically during a database outage).
    .PARAMETER Name
        Specifies the administrative name of the new desktop rule. Each rule in the site's entitlement policy must have a unique name (irrespective of whether they are desktop or application rules).
    .PARAMETER PublishedName
        The name of the new desktop session entitlement as seen by the user.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER RestrictToTag
        Optional tag that may be used further to restrict which machines may be made accessible to a user by an entitlement policy rule. A machine may be made accessible by an entitlement policy rule only if either the rule has no tag restriction or the rule does have a tag restriction and the machine is tagged with the same tag.
    .PARAMETER SecureIcaRequired
        Specifies whether the new desktop rule requires the SecureICA protocol for desktop sessions launched using the entitlement.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER SessionReconnection
        Defines reconnection (roaming) behavior for sessions launched using this rule. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER UUID
        An optional GUID for this rule.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.EntitlementPolicyRule])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[int]]
        ${IconUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.LeasingBehavior]
        ${LeasingBehavior},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${PublishedName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${RestrictToTag},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.SessionReconnection]
        ${SessionReconnection},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerHostingPowerAction {
    <#
    .SYNOPSIS
        Creates a new action in the power action queue.
    .PARAMETER Action
        Specifies the power state change action that is to be performed on the specified machine.
        Valid values are: TurnOn, TurnOff, ShutDown, Reset, Restart, Suspend and Resume.
    .PARAMETER ActualPriority
        Specifies an initial priority value for the action in the queue.
        This priority is the current action priority; the 'base' priority for actions created via this cmdlet is always 30. Numerically lower priority values indicate more important actions that are processed in preference to actions with numerically higher priority settings.
    .PARAMETER MachineName
        Specifies the machine that the action is to be performed on.
        The machine can be identified by DNS name or short name or SID or 'machine\domain' form name.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.HostingPowerAction])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.PowerManagementAction]
        ${Action},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${ActualPriority},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerHypervisorConnection {
    <#
    .SYNOPSIS
        Creates a new hypervisor connection.
    .PARAMETER HypHypervisorConnectionUid
        The Guid that identifies the hypervisor connection, as defined in DUM.
    .PARAMETER PreferredController
        The preferred controller machine for the hypervisor connection. Can be specified as (first match is used):
        o Full SAM name. 
        o Full DNS name. 
        o SID value. 
        o NetBIOS name (SAM without domain). 
        o Partial DNS name (DNS name without some or all domain information).
        Where not specified, the system selects preferred controller machine based on loading.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.HypervisorConnection])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${HypHypervisorConnectionUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${PreferredController},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerIcon {
    <#
    .SYNOPSIS
        Creates a new icon.
    .PARAMETER EncodedIconData
        Specifies the Base64 encoded .ICO format icon data.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.Icon])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${EncodedIconData},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerImportDb {
    <#
    .SYNOPSIS
        This cmdlet is for internal use only
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerLocalDb {
    <#
    .SYNOPSIS
        This cmdlet is for internal use only
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerMachine {
    <#
    .SYNOPSIS
        Adds a machine that can be used to run desktops and applications.
    .PARAMETER AssignedClientName
        The client name to which this machine will be assigned. Machines can be assigned to multiple users, a single client IP address, or a single client name, but only to one of these categories at a time.
    .PARAMETER AssignedIPAddress
        The client IP address to which this machine will be assigned. Machines can be assigned to multiple users, a single client IP address, or a single client name, but only to one of these categories at a time.
    .PARAMETER CatalogUid
        The catalog to which this machine will belong.
    .PARAMETER HostedMachineId
        The unique ID by which the hypervisor recognizes the machine. Omit this for physical machines or MCS-provisioned VMs.
    .PARAMETER HypervisorConnectionUid
        The hypervisor connection that runs the machine. Omit this for physical machines or MCS-provisioned VMs.
    .PARAMETER InMaintenanceMode
        Specifies whether the machine is initially in maintenance mode. A machine in maintenance mode is not available for new sessions, and for managed machines all automatic power management is disabled.
    .PARAMETER IsReserved
        Specifies whether the machine should be reserved for special use, for example, for AppDisk preparation. A reserved machine cannot be added to a desktop group.
    .PARAMETER MachineName
        Specify the name of the machine to create (in the form 'domain\machine'). A SID can also be specified.
    .PARAMETER UUID
        An optional GUID for this machine.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.Machine])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${AssignedClientName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${AssignedIPAddress},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${CatalogUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${HostedMachineId},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNull()]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${InMaintenanceMode},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${IsReserved},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerMachineCommand {
    <#
    .SYNOPSIS
        Creates a new command to deliver to a desktop.
    .PARAMETER Category
        The service on the desktop to send the command to.
    .PARAMETER CommandName
        The name of the command to send (as defined by the service).
    .PARAMETER CommandData
        Optional additional data to include with the command.
    .PARAMETER DesktopGroups
        Further restrict the command targeted at a user to machines in these desktop groups.
    .PARAMETER SendTrigger
        Queue command for delivery until this particular event occurs. Valid values are  NextContact, Broker, LogOn, Logoff, Disconnect and Reconnect.
    .PARAMETER Synchronous
        Send the command immediately and block while waiting for the reply.
    .PARAMETER MachineUid
        Specific machine that should receive the command.
    .PARAMETER User
        User whose desktop or session should receive the command.
    .PARAMETER SessionUid
        Currently logged on user session that should receive the command.
    .PARAMETER SendDeadline
        Automatically cancel the command if it not delivered before the specified time span passes.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNull()]
        [string]
        ${Category},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNull()]
        [string]
        ${CommandName},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [byte[]]
        ${CommandData},
        
        [Parameter(ParameterSetName='ByUser', ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${DesktopGroups},
        
        [Parameter(ParameterSetName='BySession', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUser', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByMachine', ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[Citrix.Broker.Admin.SDK.MachineCommandTrigger]]
        ${SendTrigger},
        
        [Parameter(ParameterSetName='Synchronous', Mandatory=$true)]
        [switch]
        ${Synchronous},
        
        [Parameter(ParameterSetName='Synchronous', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByMachine', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[int]]
        ${MachineUid},
        
        [Parameter(ParameterSetName='ByUser', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${User},
        
        [Parameter(ParameterSetName='BySession', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[long]]
        ${SessionUid},
        
        [Parameter(ParameterSetName='ByMachine', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUser', ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='BySession', ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[timespan]]
        ${SendDeadline},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerMachineConfiguration {
    <#
    .SYNOPSIS
        Creates a new machine configuration associated with an existing configuration slot.
    .PARAMETER ConfigurationSlotUid
        Unique identifier of the configuration slot to associate with this machine configuration.
    .PARAMETER Description
        Description of the new machine configuration.
    .PARAMETER LeafName
        Name of the new machine configuration. This must be unique amongst the machine configurations associated with the same configuration slot.
    .PARAMETER Policy
        A binary array of encoded settings (policy) data created with the SDK snap-in that matches the SettingsGroup of the configuration slot.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.MachineConfiguration])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${ConfigurationSlotUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${LeafName},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [byte[]]
        ${Policy},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerPowerTimeScheme {
    <#
    .SYNOPSIS
        Creates a new power time scheme for a desktop group.
    .PARAMETER DaysOfWeek
        Specifies the pattern of days of the week that the power time scheme covers.
        Valid values are (singly or a list of) Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, Weekdays and Weekend.
    .PARAMETER DesktopGroupUid
        Specifies the desktop group that the power time scheme applies to.
    .PARAMETER DisplayName
        Specifies the name of the new power time scheme as displayed in the DesktopStudio console. Each scheme associated with a desktop group must have a display name which is unique within its desktop group, although the same display name can be used on power schemes for different desktop groups.
    .PARAMETER Name
        Specifies the administrative name of the new power time scheme. Each scheme must have a name which is unique within the site.
    .PARAMETER PeakHours
        A set of 24 boolean flag values, one for each hour of the day. The first value in the array relates to midnight to 00:59, the next one to 1 AM to 01:59 and so on, with the last array element relating to 11 PM to 11:59. If the flag is $true it means that the associated hour of the day is considered a peak time; if $false it means that it is considered off-peak.
    .PARAMETER PoolSize
        A set of 24 integer values, one for each hour of the day. The first value in the array relates to midnight to 00:59, the next one to 1 AM to 01:59 and so on, with the last array element relating to 11 PM to 11:59. The value defines the number of machines (either as an absolute number or a percentage of the machines in the desktop group) that are to be maintained in a running state, whether they are in use or not. A value of -1 has special meaning: pool size management does not apply during such hours.
    .PARAMETER PoolUsingPercentage
        A boolean flag to indicate whether the integer values in the pool size array are to be treated as absolute values (if this value is $false) or as percentages of the number of machines in the desktop group (if this value is $true).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.PowerTimeScheme])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.TimeSchemeDays]
        ${DaysOfWeek},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${DisplayName},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool[]]
        ${PeakHours},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int[]]
        ${PoolSize},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [System.Nullable[bool]]
        ${PoolUsingPercentage},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerRebootSchedule {
    <#
    .SYNOPSIS
        Creates a new reboot schedule for a desktop group.
    .PARAMETER Day
        For weekly schedules, the day of the week on which the scheduled reboot-cycle starts (one of Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
    .PARAMETER DesktopGroupName
        The name of the desktop group that this reboot schedule is applied to.
    .PARAMETER DesktopGroupUid
        The Uid of the desktop group that this reboot schedule is applied to.
    .PARAMETER Enabled
        Boolean that indicates if the new reboot schedule is enabled.
    .PARAMETER Frequency
        Frequency with which this schedule runs (either Weekly or Daily).
    .PARAMETER RebootDuration
        Approximate maximum number of minutes over which the scheduled reboot cycle runs.
    .PARAMETER StartTime
        Time of day at which the scheduled reboot cycle starts (HH:MM).
    .PARAMETER WarningDuration
        Time prior to the initiation of a machine reboot at which warning message is displayed in all user sessions on that machine. If the warning duration is zero then no message is displayed. In some cases the time required to process a reboot schedule may exceed the RebootDuration time by up to the WarningDuration value; Citrix recommends that the WarningDuration is kept small relative to the RebootDuration value.
    .PARAMETER WarningMessage
        Warning message displayed in user sessions on a machine scheduled for reboot. If the message is blank then no message is displayed. The optional pattern '%m%' is replaced by the number of minutes until the reboot.
    .PARAMETER WarningRepeatInterval
        Time to wait after the previous reboot warning before displaying the warning message in all user sessions on that machine again. If the warning repeat interval is zero then the warning message is not displayed after the initial warning.
    .PARAMETER WarningTitle
        The window title used when showing the warning message in user sessions on a machine scheduled for reboot.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByDesktopGroupUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootSchedule])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleDays]
        ${Day},
        
        [Parameter(ParameterSetName='ByDesktopGroupName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='ByDesktopGroupUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleFrequency]
        ${Frequency},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${RebootDuration},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${StartTime},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${WarningDuration},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${WarningMessage},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${WarningRepeatInterval},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${WarningTitle},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerRebootScheduleV2 {
    <#
    .SYNOPSIS
        Creates a new reboot schedule for a desktop group.
    .PARAMETER Day
        For weekly schedules, the day of the week on which the scheduled reboot-cycle starts (one of Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
    .PARAMETER Description
        An optional description for the reboot schedule.
    .PARAMETER DesktopGroupName
        The name of the desktop group that this reboot schedule is applied to.
    .PARAMETER DesktopGroupUid
        The Uid of the desktop group that this reboot schedule is applied to.
    .PARAMETER Enabled
        Boolean that indicates if the new reboot schedule is enabled.
    .PARAMETER Frequency
        Frequency with which this schedule runs (either Weekly or Daily).
    .PARAMETER Name
        The name of the new reboot schedule.
    .PARAMETER RebootDuration
        Approximate maximum number of minutes over which the scheduled reboot cycle runs.
    .PARAMETER RestrictToTag
        If set the reboot schedule only applies to machines in the desktop group with the specified tag.
    .PARAMETER StartTime
        Time of day at which the scheduled reboot cycle starts (HH:MM).
    .PARAMETER WarningDuration
        Time prior to the initiation of a machine reboot at which warning message is displayed in all user sessions on that machine. If the warning duration is zero then no message is displayed. In some cases the time required to process a reboot schedule may exceed the RebootDuration time by up to the WarningDuration value; Citrix recommends that the WarningDuration is kept small relative to the RebootDuration value.
    .PARAMETER WarningMessage
        Warning message displayed in user sessions on a machine scheduled for reboot. If the message is blank then no message is displayed. The optional pattern '%m%' is replaced by the number of minutes until the reboot.
    .PARAMETER WarningRepeatInterval
        Time to wait after the previous reboot warning before displaying the warning message in all user sessions on that machine again. If the warning repeat interval is zero then the warning message is not displayed after the initial warning.
    .PARAMETER WarningTitle
        The window title used when showing the warning message in user sessions on a machine scheduled for reboot.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByDesktopGroupUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootScheduleV2])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleDays]
        ${Day},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(ParameterSetName='ByDesktopGroupName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='ByDesktopGroupUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleFrequency]
        ${Frequency},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${Name},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${RebootDuration},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${RestrictToTag},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${StartTime},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${WarningDuration},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${WarningMessage},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${WarningRepeatInterval},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${WarningTitle},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerRemotePCAccount {
    <#
    .SYNOPSIS
        Create a new RemotePCAccount.
    .PARAMETER AllowSubfolderMatches
        When true a machine matches this RemotePCAccount if the AD computer object exists within the container specified by the OU property, or within a child container of the OU.
        When false the AD computer object only matches if it exists directly in the AD container specified by the OU property.
        This property is not meaningful when OU has the special value 'any'.
    .PARAMETER CatalogUid
        Specifies the catalog which Remote PC automation adds an unconfigured machine to if it matches this RemotePCAccount.
    .PARAMETER MachinesExcluded
        MachinesExcluded specifies a set of strings that can include asterisk wildcards. If a machine name matches any entries in MachinesExcluded then it cannot match with this RemotePCAccount regardless of whether there is a MachinesIncluded match.
        Matches are performed against the domain name joined with the machine name by a backslash (DOMAIN\MACHINE), e.g.:
        DOMAIN1\M*
        DOMAIN*\M*
        *\M*
    .PARAMETER MachinesIncluded
        MachinesIncluded specifies a set of strings that can include asterisk wildcards. A machine may only match with this RemotePCAccount if it matches a MachinesIncluded entry and does not match any MachinesExcluded entries.
        Matches are performed against the domain name joined with the machine name by a backslash (DOMAIN\MACHINE), e.g.:
        DOMAIN1\M*
        DOMAIN*\M*
        *\M*
    .PARAMETER OU
        Specifies the DN of an AD container, or has the special value 'any'.
        When an AD container is specified a machine may only match with the RemotePCAccount when the AD computer object is located relative to the OU.
        When 'any' is specified the location of the AD computer object is ignored for purposes of matching this RemotePCAccount. The machine must still meet the MachinesIncluded and MachinesExcluded filters for a match to occur.
        In the event that a machine matches with multiple RemotePCAccounts then the RemotePCAccount OU with the longest canonical name takes precedence. The special 'any' OU is treated as lowest priority.
        Note that the OU value of every RemotePCAccount must be unique, and this includes only one 'any' entry being permitted.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.RemotePCAccount])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${AllowSubfolderMatches},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${CatalogUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${MachinesExcluded},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${MachinesIncluded},
        
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 196)]
        [string]
        ${OU},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerSessionLinger {
    <#
    .SYNOPSIS
        Creates a new session linger setting for a desktop group.
    .PARAMETER DesktopGroupName
        The name of the desktop group that this linger setting is applied to.
    .PARAMETER DesktopGroupUid
        The Uid of the desktop group that this linger setting is applied to.
    .PARAMETER Enabled
        Boolean that indicates if the new session linger is enabled.
    .PARAMETER MaxAverageLoadThreshold
        Specifies the average load threshold across the desktop group. When the threshold hits, lingering sessions across the group be terminated to reduce load. Sessions that have been lingering the longest will be chosen first.
    .PARAMETER MaxLoadPerMachineThreshold
        Specifies the maximum load threshold per machine in the desktop group. When the threshold hits, lingering sessions on each loaded machine will be terminated to reduce load. Sessions that have been lingering the longest will be chosen first.
    .PARAMETER MaxTimeBeforeDisconnect
        Specifies the time by which a lingering session will be disconnected. The disconnect timer is optional, but when specified the terminate timer needs to be also set. The disconnect time cannot be greater than the terminate time. When the disconnect and terminate times are the same, the terminate timer takes precedence. The disconnect timer needs to be paired with a session termination condition like the terminate timer or one of load threshold settings.
    .PARAMETER MaxTimeBeforeTerminate
        Specifies the time by which a lingering session will be terminated. The terminate timer is not optional when timers are configured. When the disconnect and terminate times are the same, the terminate timer takes precedence.
    .PARAMETER UserFilterEnabled
        Specifies whether the session linger's user filter is enabled or disabled. Where the user filter is enabled, lingering is enabled only to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByDesktopGroupUid')]
    [OutputType([Citrix.Broker.Admin.SDK.SessionLinger])]
    param (
        [Parameter(ParameterSetName='ByDesktopGroupName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='ByDesktopGroupUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxAverageLoadThreshold},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxLoadPerMachineThreshold},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${MaxTimeBeforeDisconnect},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${MaxTimeBeforeTerminate},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${UserFilterEnabled},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerSessionPreLaunch {
    <#
    .SYNOPSIS
        Creates a new session pre-launch setting for a desktop group.
    .PARAMETER DesktopGroupName
        The name of the desktop group that this pre-launch setting is applied to.
    .PARAMETER DesktopGroupUid
        The Uid of the desktop group that this pre-launch setting is applied to.
    .PARAMETER Enabled
        Boolean that indicates if the new session pre-launch is enabled.
    .PARAMETER MaxAverageLoadThreshold
        Specifies the average load threshold across the desktop group. When the threshold hits, pre-launched sessions across the group be terminated to reduce load. Sessions that have been pre-launched the longest will be chosen first.
    .PARAMETER MaxLoadPerMachineThreshold
        Specifies the maximum load threshold per machine in the desktop group. When the threshold hits, pre-launched sessions on each loaded machine will be terminated to reduce load. Sessions that have been pre-launched the longest will be chosen first.
    .PARAMETER MaxTimeBeforeDisconnect
        Specifies the time by which a pre-launched session will be disconnected. The disconnect timer is optional, but when specified the terminate timer needs to be also set. The disconnect time cannot be greater than the terminate time. When the disconnect and terminate times are the same, the terminate timer takes precedence. The disconnect timer needs to be paired with a session termination condition like the terminate timer or one of load threshold settings.
    .PARAMETER MaxTimeBeforeTerminate
        Specifies the time by which a pre-launched session will be terminated. The terminate timer is not optional when timers are configured. When the disconnect and terminate times are the same, the terminate timer takes precedence.
    .PARAMETER UserFilterEnabled
        Specifies whether the session pre-launch's user filter is enabled or disabled. Where the user filter is enabled, pre-launch is enabled only to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByDesktopGroupUid')]
    [OutputType([Citrix.Broker.Admin.SDK.SessionPreLaunch])]
    param (
        [Parameter(ParameterSetName='ByDesktopGroupName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [Parameter(ParameterSetName='ByDesktopGroupUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${DesktopGroupUid},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${Enabled},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxAverageLoadThreshold},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MaxLoadPerMachineThreshold},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${MaxTimeBeforeDisconnect},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [timespan]
        ${MaxTimeBeforeTerminate},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [bool]
        ${UserFilterEnabled},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerTag {
    <#
    .SYNOPSIS
        Creates a new tag.
    .PARAMETER Description
        A description for the tag.
    .PARAMETER Name
        Specifies a name for the new tag.
    .PARAMETER UUID
        Specifies a UUID for the new tag. When not specified, a UUID is automatically assigned.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.Tag])]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Description},
        
        [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${UUID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerUser {
    <#
    .SYNOPSIS
        Creates a new broker user object
    .PARAMETER SID
        The SID of the user or group
    .PARAMETER Name
        The name of the user or group
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.User])]
    param (
        [Parameter(ParameterSetName='SecurityIdentifier', Mandatory=$true, Position=1)]
        [System.Security.Principal.SecurityIdentifier]
        ${SID},
        
        [Parameter(ParameterSetName='UserName', Mandatory=$true, Position=1)]
        [string]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function New-BrokerUserZonePreference {
    <#
    .SYNOPSIS
        Creates a zone preference for a user/group account in this site
    .PARAMETER HomeZoneUid
        The home zone preference to be associated with the user/group account.
    .PARAMETER Name
        Name of the user/group account with which the new home zone preference is to be associated.
    .PARAMETER SID
        SID of the user/group account with which the new home zone preference is to be associated.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByAccountName')]
    [OutputType([Citrix.Broker.Admin.SDK.UserZonePreference])]
    param (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${HomeZoneUid},
        
        [Parameter(ParameterSetName='ByAccountName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByAccountSid', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${SID},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAccessPolicyRule {
    <#
    .SYNOPSIS
        Deletes a rule from the site's access policy.
    .PARAMETER InputObject
        The access policy rule to be deleted.
    .PARAMETER Name
        The name of the access policy rule to be deleted.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AccessPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAccessPolicyRuleMetadata {
    <#
    .SYNOPSIS
        Deletes AccessPolicyRule Metadata from the AccessPolicyRule objects
    .PARAMETER InputObject
        Specifies the AccessPolicyRule object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AccessPolicyRule[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAdminFolder {
    <#
    .SYNOPSIS
        Removes an admin folder.
    .PARAMETER InputObject
        Identifies the folder to remove
    .PARAMETER Name
        The name pattern of folder(s) to remove
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAdminFolderMetadata {
    <#
    .SYNOPSIS
        Deletes AdminFolder Metadata from the AdminFolder objects
    .PARAMETER InputObject
        Specifies the AdminFolder object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAppAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Deletes an application rule from the site's assignment policy.
    .PARAMETER InputObject
        The application rule to be deleted from the assignment policy.
    .PARAMETER Name
        The name of the application rule to be deleted from the assignment policy.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAppEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Deletes an application rule from the site's entitlement policy.
    .PARAMETER InputObject
        The application rule to be deleted from the entitlement policy.
    .PARAMETER Name
        The name of the application rule to be deleted from the entitlement policy.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerApplication {
    <#
    .SYNOPSIS
        Deletes one or more applications, or an association of an application.
    .PARAMETER InputObject
        Specifies the applications to delete. The Uid can also be substituted for the application objects.
    .PARAMETER Force
        Remove application even if it's in use. Removing an application that is currently in use, can potentially leave an application session containing no applications. If all the applications that are currently active in a disconnected application session are removed, the user will be unable to reconnect to the session. Forcing removal of an in-use application does not impact the actual session itself.
    .PARAMETER Name
        Specifies the name of the application to remove.
    .PARAMETER ApplicationGroup
        Specifies the application group that this application should no longer be associated with. The Uid or Name can also be substituted for the application group object.
    .PARAMETER DesktopGroup
        Specifies the desktop group that this application should no longer be associated with. The Uid or Name can also be substituted for the desktop group object.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [switch]
        ${Force},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerApplicationGroup {
    <#
    .SYNOPSIS
        Remove application groups from the system, or break the association between an application group and a desktop group.
    .PARAMETER InputObject
        Specifies the application groups to remove.
    .PARAMETER Force
        When this flag is specified, an application group may be removed from the system even if its SessionSharingEnabled property is false and one of its applications is still running in some session.
        Such an application group cannot by default be removed, because doing so would allow for other applications to be launched into existing sessions. Either wait until the sessions associated with the application group have exited, or use the -Force flag.
    .PARAMETER Name
        Removes application groups whose name matches the given pattern.
    .PARAMETER DesktopGroup
        When this parameter is specified, the application groups are removed from the given desktop group. The desktop group may be specified either by its Uid or by its name.
        When this parmeter is not specified, the application groups are removed from the system entirely.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup[]]
        ${InputObject},
        
        [switch]
        ${Force},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerApplicationGroupMetadata {
    <#
    .SYNOPSIS
        Deletes ApplicationGroup Metadata from the ApplicationGroup objects
    .PARAMETER InputObject
        Specifies the ApplicationGroup object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerApplicationInstanceMetadata {
    <#
    .SYNOPSIS
        Deletes ApplicationInstance Metadata from the ApplicationInstance objects
    .PARAMETER InputObject
        Specifies the ApplicationInstance object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationInstance[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerApplicationMetadata {
    <#
    .SYNOPSIS
        Deletes Application Metadata from the Application objects
    .PARAMETER InputObject
        Specifies the Application object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Deletes a desktop rule from the site's assignment policy.
    .PARAMETER InputObject
        The desktop rule to be deleted from the assignment policy.
    .PARAMETER Name
        The name of the desktop rule to be deleted from the assignment policy.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerAssignmentPolicyRuleMetadata {
    <#
    .SYNOPSIS
        Deletes AssignmentPolicyRule Metadata from the AssignmentPolicyRule objects
    .PARAMETER InputObject
        Specifies the AssignmentPolicyRule object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerCatalog {
    <#
    .SYNOPSIS
        Removes catalogs from the site.
    .PARAMETER InputObject
        Specifies the catalog objects to delete.
    .PARAMETER Name
        Specifies the name of the catalog to delete.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerCatalogMetadata {
    <#
    .SYNOPSIS
        Deletes Catalog Metadata from the Catalog objects
    .PARAMETER InputObject
        Specifies the Catalog object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerConfigurationSlot {
    <#
    .SYNOPSIS
        Removes a configuration slot.
    .PARAMETER InputObject
        Configuration slot to remove.
    .PARAMETER Name
        Name of configuration slot to remove.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ConfigurationSlot[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerConfigurationSlotMetadata {
    <#
    .SYNOPSIS
        Deletes ConfigurationSlot Metadata from the ConfigurationSlot objects
    .PARAMETER InputObject
        Specifies the ConfigurationSlot object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ConfigurationSlot[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerConfiguredFTA {
    <#
    .SYNOPSIS
        Deletes one or more configured file type associations.
    .PARAMETER InputObject
        Specifies the ConfiguredFTA objects to delete.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ConfiguredFTA[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerControllerMetadata {
    <#
    .SYNOPSIS
        Deletes Controller Metadata from the Controller objects
    .PARAMETER InputObject
        Specifies the Controller object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Controller[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerDelayedHostingPowerAction {
    <#
    .SYNOPSIS
        Cancels one or more delayed power actions.
    .PARAMETER InputObject
        The power action to be cancelled.
    .PARAMETER MachineName
        Cancels only actions for machines whose name (of the form domain\machine) matches the specified string.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DelayedHostingPowerAction[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerDesktopGroup {
    <#
    .SYNOPSIS
        Remove desktop groups from the system or remove them from a Remote PC catalog.
    .PARAMETER InputObject
        Specifies the desktop groups to remove.
    .PARAMETER Force
        Remove desktop groups even if there are active sessions.
    .PARAMETER Name
        Specifies the name of the desktop group to remove.
    .PARAMETER RemotePCCatalog
        When this parameter is specified, Remote PC desktop groups are removed from the specified Remote PC catalog.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [switch]
        ${Force},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog]
        ${RemotePCCatalog},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerDesktopGroupMetadata {
    <#
    .SYNOPSIS
        Deletes DesktopGroup Metadata from the DesktopGroup objects
    .PARAMETER InputObject
        Specifies the DesktopGroup object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerDesktopGroupWebhook {
    <#
    .SYNOPSIS
        Remove the webhook from a desktop group
    .PARAMETER InputObject
        Sepcified the webhook to remove
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroupWebhook[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Deletes a desktop rule from the site's entitlement policy.
    .PARAMETER InputObject
        The desktop rule to be deleted from the entitlement policy.
    .PARAMETER Name
        The name of the desktop rule to be deleted from the entitlement policy.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.EntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerEntitlementPolicyRuleMetadata {
    <#
    .SYNOPSIS
        Deletes EntitlementPolicyRule Metadata from the EntitlementPolicyRule objects
    .PARAMETER InputObject
        Specifies the EntitlementPolicyRule object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.EntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerHostingPowerAction {
    <#
    .SYNOPSIS
        Cancel one or more pending power actions.
    .PARAMETER InputObject
        The power action to be cancelled.
    .PARAMETER MachineName
        Cancels only actions for machines whose name (of the form domain\machine) matches the specified string.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HostingPowerAction[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerHostingPowerActionMetadata {
    <#
    .SYNOPSIS
        Deletes HostingPowerAction Metadata from the HostingPowerAction objects
    .PARAMETER InputObject
        Specifies the HostingPowerAction object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HostingPowerAction[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerHypervisorAlertMetadata {
    <#
    .SYNOPSIS
        Deletes HypervisorAlert Metadata from the HypervisorAlert objects
    .PARAMETER InputObject
        Specifies the HypervisorAlert object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HypervisorAlert[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerHypervisorConnection {
    <#
    .SYNOPSIS
        Removes a hypervisor connection from the system.
    .PARAMETER InputObject
        Specifies the hypervisor connection object to remove.
    .PARAMETER Name
        Specifies the name of the hypervisor connection object to remove.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HypervisorConnection[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerHypervisorConnectionMetadata {
    <#
    .SYNOPSIS
        Deletes HypervisorConnection Metadata from the HypervisorConnection objects
    .PARAMETER InputObject
        Specifies the HypervisorConnection object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HypervisorConnection[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerIcon {
    <#
    .SYNOPSIS
        Remove an icon.
    .PARAMETER InputObject
        Specifies the icon to remove.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Icon[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerIconMetadata {
    <#
    .SYNOPSIS
        Deletes Icon Metadata from the Icon objects
    .PARAMETER InputObject
        Specifies the Icon object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Icon[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerImportDb {
    <#
    .SYNOPSIS
        This cmdlet is for internal use only
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerImportedFTA {
    <#
    .SYNOPSIS
        Deletes one or more imported file type associations.
    .PARAMETER DesktopGroupUids
        Deletes the imported file type associations belonging to specified desktop groups.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [int[]]
        ${DesktopGroupUids},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerLease {
    <#
    .SYNOPSIS
        Remove the specified lease in the Database.
    .PARAMETER InputObject
        Specifies the lease to remove.
    .PARAMETER Key
        Specifies the lease key of the lease to remove. A pattern can be specified.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Lease[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Key},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerLeaseMetadata {
    <#
    .SYNOPSIS
        Deletes Lease Metadata from the Lease objects
    .PARAMETER InputObject
        Specifies the Lease object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Lease[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerLocalDb {
    <#
    .SYNOPSIS
        This cmdlet is for internal use only
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerMachine {
    <#
    .SYNOPSIS
        Removes one or more machines from its desktop group or catalog.
    .PARAMETER InputObject
        An array of machines to be removed from their desktop group or catalog.
    .PARAMETER Force
        Forces removal of machine from a desktop group even if it is still in use (that is, there are user sessions running on the machine). Forcing removal of a machine does not disconnect or logoff the user sessions.
    .PARAMETER MachineName
        The name of the single machine to remove (must match the MachineName property of the machine).
    .PARAMETER DesktopGroup
        The desktop group from which the machines are to be removed, specified by name, UID, or instance.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [switch]
        ${Force},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerMachineCommand {
    <#
    .SYNOPSIS
        Cancel a pending command queued for delivery to a desktop.
    .PARAMETER InputObject
        Commands to cancel.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineCommand[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerMachineCommandMetadata {
    <#
    .SYNOPSIS
        Deletes MachineCommand Metadata from the MachineCommand objects
    .PARAMETER InputObject
        Specifies the MachineCommand object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineCommand[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerMachineConfiguration {
    <#
    .SYNOPSIS
        Deletes a machine configuration from the site or removes the association from a desktop group.
    .PARAMETER InputObject
        Machine configuration to remove.
    .PARAMETER Name
        Name of machine configuration for which the remove operation applies.
    .PARAMETER Application
        The application from which this machine configuration is to be removed.
    .PARAMETER DesktopGroup
        The desktop group from which this machine configuration is to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineConfiguration[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application]
        ${Application},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerMachineConfigurationMetadata {
    <#
    .SYNOPSIS
        Deletes MachineConfiguration Metadata from the MachineConfiguration objects
    .PARAMETER InputObject
        Specifies the MachineConfiguration object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineConfiguration[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerMachineMetadata {
    <#
    .SYNOPSIS
        Deletes Machine Metadata from the Machine objects
    .PARAMETER InputObject
        Specifies the Machine object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerPowerTimeScheme {
    <#
    .SYNOPSIS
        Deletes an existing power time scheme.
    .PARAMETER InputObject
        The power time scheme to be deleted.
    .PARAMETER Name
        The name of the power time scheme to be deleted.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PowerTimeScheme[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerPowerTimeSchemeMetadata {
    <#
    .SYNOPSIS
        Deletes PowerTimeScheme Metadata from the PowerTimeScheme objects
    .PARAMETER InputObject
        Specifies the PowerTimeScheme object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PowerTimeScheme[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerRebootCycleMetadata {
    <#
    .SYNOPSIS
        Deletes RebootCycle Metadata from the RebootCycle objects
    .PARAMETER InputObject
        Specifies the RebootCycle object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootCycle[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerRebootSchedule {
    <#
    .SYNOPSIS
        Removes the reboot schedule.
    .PARAMETER InputObject
        The reboot schedule to be deleted.
    .PARAMETER DesktopGroupName
        The name of the desktop group whose reboot schedule is to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootSchedule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerRebootScheduleV2 {
    <#
    .SYNOPSIS
        Removes the reboot schedule.
    .PARAMETER InputObject
        The reboot schedule to be removed.
    .PARAMETER Name
        The name of the reboot schedule to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleV2[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerRebootScheduleV2Metadata {
    <#
    .SYNOPSIS
        Deletes RebootScheduleV2 Metadata from the RebootScheduleV2 objects
    .PARAMETER InputObject
        Specifies the RebootScheduleV2 object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleV2[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerRemotePCAccount {
    <#
    .SYNOPSIS
        Delete RemotePCAccounts from the system.
    .PARAMETER InputObject
        Specifies the RemotePCAccounts to delete.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RemotePCAccount[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerScope {
    <#
    .SYNOPSIS
        Remove the specified catalog/desktop group from the given scope(s).
    .PARAMETER InputObject
        Specifies the scopes to remove the object from.
    .PARAMETER ApplicationGroup
        Specifies the application group object to be removed.
    .PARAMETER Catalog
        Specifies the catalog object to be removed.
    .PARAMETER DesktopGroup
        Specifies the desktop group object to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Scope[]]
        ${InputObject},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog]
        ${Catalog},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerSessionLinger {
    <#
    .SYNOPSIS
        Removes a session linger setting.
    .PARAMETER InputObject
        The session linger setting to be deleted.
    .PARAMETER DesktopGroupName
        The name of the desktop group whose session linger setting is to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionLinger[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerSessionMetadata {
    <#
    .SYNOPSIS
        Deletes Session Metadata from the Session objects
    .PARAMETER InputObject
        Specifies the Session object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Session[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerSessionPreLaunch {
    <#
    .SYNOPSIS
        Removes a session pre-launch setting.
    .PARAMETER InputObject
        The session pre-launch setting to be deleted.
    .PARAMETER DesktopGroupName
        The name of the desktop group whose session pre-launch setting is to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionPreLaunch[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerSiteMetadata {
    <#
    .SYNOPSIS
        Deletes Site Metadata from the Site objects
    .PARAMETER InputObject
        Specifies the Site object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Site[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerTag {
    <#
    .SYNOPSIS
        Removes tag to object associations or deletes tags from the site altogether.
    .PARAMETER Tags
        Specifies one or more tag objects.
    .PARAMETER AllApplications
        Remove the specified tags from all applications.
    .PARAMETER AllApplicationGroups
        Remove the specified tags from all application groups.
    .PARAMETER AllDesktops
        Remove the specified tags from all desktops.
    .PARAMETER AllDesktopGroups
        Remove the specified tags from all desktop groups.
    .PARAMETER AllMachines
        Remove the specified tags from all machines.
    .PARAMETER AllObjects
        Remove the specified tags from all objects.
    .PARAMETER InputObject
        Specifies one or more tag objects.
    .PARAMETER Name
        Specifies a tag by name.
    .PARAMETER Application
        Removes the association between the given tag and application.
    .PARAMETER ApplicationGroup
        Removes the association between the given tag and application group.
    .PARAMETER Desktop
        Removes the association between the given tag and desktop.
    .PARAMETER DesktopGroup
        Removes the association between the given tag and desktop group.
    .PARAMETER Machine
        Removes the association between the given tag and machine.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='FromRelatedObjects', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${Tags},
        
        [Parameter(ParameterSetName='FromRelatedObjects')]
        [switch]
        ${AllApplications},
        
        [Parameter(ParameterSetName='FromRelatedObjects')]
        [switch]
        ${AllApplicationGroups},
        
        [Parameter(ParameterSetName='FromRelatedObjects')]
        [switch]
        ${AllDesktops},
        
        [Parameter(ParameterSetName='FromRelatedObjects')]
        [switch]
        ${AllDesktopGroups},
        
        [Parameter(ParameterSetName='FromRelatedObjects')]
        [switch]
        ${AllMachines},
        
        [Parameter(ParameterSetName='FromRelatedObjects')]
        [switch]
        ${AllObjects},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application]
        ${Application},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Desktop]
        ${Desktop},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup]
        ${DesktopGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine]
        ${Machine},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerTagMetadata {
    <#
    .SYNOPSIS
        Deletes Tag Metadata from the Tag objects
    .PARAMETER InputObject
        Specifies the Tag object's instance whose Metadata is to be deleted.
    .PARAMETER Name
        Specifies the name of the Metadata to be deleted
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerUser {
    <#
    .SYNOPSIS
        Remove broker user objects from another broker object
    .PARAMETER InputObject
        Specifies the user objects to remove.
    .PARAMETER Name
        Specifies the user objects to remove, based on their Name property.
    .PARAMETER ApplicationGroup
        The application group from which to remove the user
    .PARAMETER Application
        The application from which to remove the user
    .PARAMETER SessionLinger
        The desktop group session linger setting from which to remove the user.
    .PARAMETER SessionPreLaunch
        The desktop group session pre-launch setting from which to remove the user.
    .PARAMETER Machine
        The machine from which to remove the user
    .PARAMETER PrivateDesktop
        The desktop from which to remove the user
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.User[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup]
        ${ApplicationGroup},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application]
        ${Application},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionLinger]
        ${SessionLinger},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionPreLaunch]
        ${SessionPreLaunch},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine]
        ${Machine},
        
        [Parameter(ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PrivateDesktop]
        ${PrivateDesktop},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Remove-BrokerUserZonePreference {
    <#
    .SYNOPSIS
        Removes any zone preference associated with a user/group account in this site
    .PARAMETER InputObject
        The account zone preference to be removed.
    .PARAMETER Name
        The name of the user/group account whose home zone preference is to be removed.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.UserZonePreference[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerAccessPolicyRule {
    <#
    .SYNOPSIS
        Renames a rule in the site's access policy.
    .PARAMETER InputObject
        The access policy rule to be renamed.
    .PARAMETER Name
        The existing name of the access policy rule to be renamed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The new name for the access policy rule being renamed. The new name must not match that of any other existing rules in the policy.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AccessPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AccessPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerAdminFolder {
    <#
    .SYNOPSIS
        Renames a folder
    .PARAMETER InputObject
        The folder(s) to be renamed
    .PARAMETER Name
        A pattern matching the names of folders to be renamed
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The name the new folder(s) should have.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AdminFolder])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerAppAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Renames an application rule in the site's assignment policy.
    .PARAMETER InputObject
        The application rule in the assignment policy to be renamed.
    .PARAMETER Name
        The existing name of the application rule in the assignment policy to be renamed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The new name of the application rule in the assignment policy being renamed. The new name must not match that of any other existing rule in the policy (irrespective of whether it is a desktop or application rule).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerAppEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Renames an application rule in the site's entitlement policy.
    .PARAMETER InputObject
        The application rule in the entitlement policy to be renamed.
    .PARAMETER Name
        The existing name of the application rule in the entitlement policy to be renamed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The new name of the application rule in the entitlement policy being renamed. The new name must not match that of any other existing rule in the policy (irrespective of whether it is a desktop or application rule).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerApplication {
    <#
    .SYNOPSIS
        Renames an application.
    .PARAMETER InputObject
        Specifies the application to rename.
    .PARAMETER Name
        Specifies the name of the application to rename.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        Specifies the new name for the application.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Application])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 389)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerApplicationGroup {
    <#
    .SYNOPSIS
        Renames an application group.
    .PARAMETER InputObject
        Specifies the application group to rename.
    .PARAMETER Name
        Specifies the name of the application group to rename.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        Specifies the new name of the application group.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationGroup])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Renames a desktop rule in the site's assignment policy.
    .PARAMETER InputObject
        The desktop rule in the assignment policy to be renamed.
    .PARAMETER Name
        The existing name of the desktop rule in the assignment policy to be renamed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The new name of the desktop rule in the assignment policy being renamed. The new name must not match that of any other existing rule in the policy (irrespective of whether it is a desktop or application rule).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerCatalog {
    <#
    .SYNOPSIS
        Renames a catalog.
    .PARAMETER InputObject
        Specifies the catalog to rename.
    .PARAMETER Name
        Specifies the name of the catalog to rename.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        Specifies the new name of the catalog.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Catalog])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerDesktopGroup {
    <#
    .SYNOPSIS
        Renames a desktop group.
    .PARAMETER InputObject
        Specifies the desktop group to rename.
    .PARAMETER Name
        Specifies the name of the desktop group to rename.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        Specifies the new name that the desktop group will have.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroup])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Renames a desktop rule in the site's entitlement policy.
    .PARAMETER InputObject
        The desktop rule in the entitlement policy to be renamed.
    .PARAMETER Name
        The existing name of the desktop rule in the entitlement policy to be renamed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The new name of the desktop rule in the entitlement policy being renamed. The new name must not match that of any other existing rule in the policy (irrespective of whether it is a desktop or application rule).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.EntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.EntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerImportDb {
    <#
    .SYNOPSIS
        This cmdlet is for internal use only
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerMachineConfiguration {
    <#
    .SYNOPSIS
        Renames a machine configuration.
    .PARAMETER InputObject
        Machine configuration to rename.
    .PARAMETER Name
        Current name of machine configuration.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        New name for machine configuration. This may have the form "ConfigurationSlotName\MachineConfigurationName" or "MachineConfigurationName". If the "ConfigurationSlotName" is provided it must match the name of the configuration slot that the machine configuration is associated with.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.MachineConfiguration])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineConfiguration[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerPowerTimeScheme {
    <#
    .SYNOPSIS
        Changes the name of an existing power time scheme.
    .PARAMETER InputObject
        The power time scheme to be renamed.
    .PARAMETER Name
        The current name of the power time scheme to be renamed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        The new name to be applied to the power time scheme.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.PowerTimeScheme])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PowerTimeScheme[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerRebootScheduleV2 {
    <#
    .SYNOPSIS
        Renames a reboot schedule.
    .PARAMETER InputObject
        Specifies the reboot schedule to rename.
    .PARAMETER Name
        Specifies the name of the reboot schedule to rename.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        Specifies the new name for the reboot schedule.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootScheduleV2])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleV2[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Rename-BrokerTag {
    <#
    .SYNOPSIS
        Rename one or more tags.
    .PARAMETER InputObject
        Specifies one or more tag objects to rename.
    .PARAMETER Name
        Identifies tags to be renamed by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER NewName
        Specifies new name for the tags.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Tag])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=2)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=2)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Reset-BrokerEnabledFeatureList {
    <#
    .SYNOPSIS
        Resets the broker's list of enabled features.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Reset-BrokerLicensingConnection {
    <#
    .SYNOPSIS
        Resets the broker's license server connection.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Reset-BrokerServiceGroupMembership {
    <#
    .SYNOPSIS
        Reloads the access permissions and configuration service locations for the Broker Service.
    .PARAMETER ConfigServiceInstance
        Specifies the configuration service instance object that represents the service instance for the type 'InterService' that references a configuration service for the deployment.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [psobject[]]
        ${ConfigServiceInstance},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Send-BrokerSessionMessage {
    <#
    .SYNOPSIS
        Sends a message to a session.
    .PARAMETER InputObject
        The target session(s) to send the message to.
    .PARAMETER MessageStyle
        The style of message box to use (valid values are Critical, Question, Exclamation, or Information).
    .PARAMETER Title
        Text to display in the messagebox title bar.
    .PARAMETER Text
        The message to display.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Session[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true, Position=2, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SendMessageStyle]
        ${MessageStyle},
        
        [Parameter(Mandatory=$true, Position=3, ValueFromPipeline=$true)]
        [string]
        ${Title},
        
        [Parameter(Mandatory=$true, Position=4, ValueFromPipeline=$true)]
        [string]
        ${Text},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAccessPolicyRule {
    <#
    .SYNOPSIS
        Modifies an existing rule in the site's access policy.
    .PARAMETER InputObject
        The access policy rule to be modified.
    .PARAMETER Name
        The name of the access policy rule to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AddExcludedClientIPs
        Adds the specified user device IP addresses to the excluded client IP address filter of the rule.
        See the ExcludedClientIPs parameter for more information.
    .PARAMETER AddExcludedClientNames
        Adds the specified user device names to the excluded client names filter of the rule.
        See the ExcludedClientNames parameter for more information.
    .PARAMETER AddExcludedSmartAccessTags
        Adds the specified SmartAccess tags to the excluded SmartAccess tags filter of the rule.
        See the ExcludedSmartAccessTags parameter for more information.
    .PARAMETER AddExcludedUsers
        Adds the specified users and groups to the excluded users filter of the rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER AddIncludedClientIPs
        Adds the specified user device IP addresses to the included client IP address filter of the rule.
        See the IncludedClientIPs parameter for more information.
    .PARAMETER AddIncludedClientNames
        Adds the specified user device names to the included client names filter of the rule.
        See the IncludedClientNames parameter for more information.
    .PARAMETER AddIncludedSmartAccessTags
        Adds the specified SmartAccess tags to the included SmartAccess tags filter of the rule.
        See the IncludedSmartAccessTags parameter for more information.
    .PARAMETER AddIncludedUsers
        Adds the specified users and groups to the included users filter of the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER AllowedConnections
        Changes whether connections must be local or via Access Gateway, and if so whether specified SmartAccess tags must be provided by Access Gateway with the connection. This property forms part of the included SmartAccess tags filter.
        Valid values are Filtered, NotViaAG, ViaAG and AnyViaAG.
        For a detailed description of this property see "help about_Broker_AccessPolicy".
    .PARAMETER AllowedProtocols
        Changes the protocols (for example HDX, RDP) available to the user for sessions delivered from the rule's desktop group. If the user gains access to a desktop group by multiple rules, the allowed protocol list is the combination of the protocol lists from all those rules.
        If the protocol list is empty, access to the desktop group is implicitly denied.
    .PARAMETER AllowedUsers
        Changes the behavior of the included users filter of the rule. This can restrict access to a list of named users or groups, allow access to any authenticated user, any user (whether authenticated or not), or only non-authenticated users. For a detailed description of this property see "help about_Broker_AccessPolicy".
        Valid values are Filtered, AnyAuthenticated, Any, AnonymousOnly and FilteredOrAnonymous.
    .PARAMETER AllowRestart
        Changes whether the user can restart sessions delivered from the rule's desktop group. Session restart is handled as follows: For sessions on single-session power-managed machines, the machine is powered off, and a new session launch request made; for sessions on multi-session machines, a logoff request is issued to the session, and a new session launch request made; otherwise the property is ignored.
    .PARAMETER Description
        Changes the description of the rule. The text is purely informational for the administrator, it is never visible to the end user.
    .PARAMETER Enabled
        Changes whether the rule is enabled or disabled. A disabled rule is ignored when evaluating the site's access policy.
    .PARAMETER ExcludedClientIPFilterEnabled
        Changes whether the excluded client IP address filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedClientIPs
        Changes the IP addresses of user devices explicitly denied access to the rule's desktop group. Addresses can be specified as simple numeric addresses or as subnet masks (for example, 10.40.37.5 or 10.40.0.0/16). This property forms part of the excluded client IP address filter.
    .PARAMETER ExcludedClientNameFilterEnabled
        Changes whether the excluded client names filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedClientNames
        Changes which names of user devices are explicitly denied access to the rule's desktop group. This property forms part of the excluded client names filter.
    .PARAMETER ExcludedSmartAccessFilterEnabled
        Changes whether the excluded SmartAccess tags filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedSmartAccessTags
        Changes which SmartAccess tags explicitly deny access to the rule's desktop group if any occur in those provided by Access Gateway with the user's connection. This property forms part of the excluded SmartAccess tags filter.
    .PARAMETER ExcludedUserFilterEnabled
        Changes whether the excluded users filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER ExcludedUsers
        Changes which users and groups are explicitly denied access to the rule's desktop group. This property forms part of the excluded users filter.
    .PARAMETER HdxSslEnabled
        Indicates whether TLS encryption is enabled for sessions delivered from the rule's desktop group.
    .PARAMETER IncludedClientIPFilterEnabled
        Changes whether the included client IP address filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedClientIPs
        Changes which IP addresses of user devices allowed access to the rule's desktop group. Addresses can be specified as simple numeric addresses or as subnet masks (for example, 10.40.37.5 or 10.40.0.0/16). This property forms part of the included client IP address filter.
    .PARAMETER IncludedClientNameFilterEnabled
        Changes whether the included client name filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedClientNames
        Changes which names of user devices are allowed access to the rule's desktop group. This property forms part of the included client names filter.
    .PARAMETER IncludedSmartAccessFilterEnabled
        Changes whether the included SmartAccess tags filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedSmartAccessTags
        Changes which SmartAccess tags grant access to the rule's desktop group if any occur in those provided by Access Gateway with the user's connection. This property forms part of the excluded SmartAccess tags filter.
    .PARAMETER IncludedUserFilterEnabled
        Changes whether the included users filter is enabled or disabled. If the filter is disabled, it is ignored when the access policy rule is evaluated.
    .PARAMETER IncludedUsers
        Changes which users and groups are granted access to the rule's desktop group. This property forms part of the included users filter.
    .PARAMETER RemoveExcludedClientIPs
        Removes the specified user device IP addresses from the excluded client IP address filter of the rule.
        See the ExcludedClientIPs parameter for more information.
    .PARAMETER RemoveExcludedClientNames
        Removes the specified user device names from the excluded client names filter of the rule.
        See the ExcludedClientNames parameter for more information.
    .PARAMETER RemoveExcludedSmartAccessTags
        Removes the specified SmartAccess tags from the excluded SmartAccess tags filter of the rule.
        See the ExcludedSmartAccessTags parameter for more information.
    .PARAMETER RemoveExcludedUsers
        Removes the specified users and groups from the excluded users filter of the rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER RemoveIncludedClientIPs
        Removes the specified user device IP addresses from the included client IP address filter of the rule.
        See the IncludedClientIPs parameter for more information.
    .PARAMETER RemoveIncludedClientNames
        Removes the specified client names from the included client names filter of the rule.
        See the IncludedClientNames parameter for more information.
    .PARAMETER RemoveIncludedSmartAccessTags
        Removes the specified SmartAccess tags from the included SmartAccess tags filter of the rule.
        See the IncludedSmartAccessTags parameter for more information.
    .PARAMETER RemoveIncludedUsers
        Removes the specified users and groups from the included users filter of the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AccessPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AccessPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${AddExcludedClientIPs},
        
        [string[]]
        ${AddExcludedClientNames},
        
        [string[]]
        ${AddExcludedSmartAccessTags},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${AddIncludedClientIPs},
        
        [string[]]
        ${AddIncludedClientNames},
        
        [string[]]
        ${AddIncludedSmartAccessTags},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddIncludedUsers},
        
        [Citrix.Broker.Admin.SDK.AllowedConnection]
        ${AllowedConnections},
        
        [string[]]
        ${AllowedProtocols},
        
        [Citrix.Broker.Admin.SDK.AllowedUser]
        ${AllowedUsers},
        
        [bool]
        ${AllowRestart},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [bool]
        ${ExcludedClientIPFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${ExcludedClientIPs},
        
        [bool]
        ${ExcludedClientNameFilterEnabled},
        
        [string[]]
        ${ExcludedClientNames},
        
        [bool]
        ${ExcludedSmartAccessFilterEnabled},
        
        [string[]]
        ${ExcludedSmartAccessTags},
        
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [bool]
        ${HdxSslEnabled},
        
        [bool]
        ${IncludedClientIPFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${IncludedClientIPs},
        
        [bool]
        ${IncludedClientNameFilterEnabled},
        
        [string[]]
        ${IncludedClientNames},
        
        [bool]
        ${IncludedSmartAccessFilterEnabled},
        
        [string[]]
        ${IncludedSmartAccessTags},
        
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${RemoveExcludedClientIPs},
        
        [string[]]
        ${RemoveExcludedClientNames},
        
        [string[]]
        ${RemoveExcludedSmartAccessTags},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.IPAddressRange[]]
        ${RemoveIncludedClientIPs},
        
        [string[]]
        ${RemoveIncludedClientNames},
        
        [string[]]
        ${RemoveIncludedSmartAccessTags},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveIncludedUsers},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAccessPolicyRuleMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for AccessPolicyRule
    .PARAMETER AccessPolicyRuleId
        Specifies the AccessPolicyRule object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the AccessPolicyRule objects whose Metadata is to be created/updated.
    .PARAMETER AccessPolicyRuleName
        Specifies the AccessPolicyRule object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AccessPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${AccessPolicyRuleId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AccessPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${AccessPolicyRuleName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAdminFolderMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for AdminFolder
    .PARAMETER AdminFolderId
        Specifies the AdminFolder object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the AdminFolder objects whose Metadata is to be created/updated.
    .PARAMETER AdminFolderName
        Specifies the AdminFolder object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AdminFolder])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${AdminFolderId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AdminFolder[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${AdminFolderName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAppAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Modifies an existing application rule in the site's assignment policy.
    .PARAMETER InputObject
        The application rule in the assignment policy to be modified.
    .PARAMETER Name
        Specifies the name of the application rule in the assignment policy to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AddExcludedUsers
        Adds the specified users to the excluded users filter of the application rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from this rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER AddIncludedUsers
        Adds the specified users to the included users filter of the application rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER Description
        Changes the description of the application rule. The text is purely informational for the administrator, it is never visible to the end user.
    .PARAMETER Enabled
        Enables or disables the application rule. A disabled rule is ignored when evaluating the site's assignment policy.
    .PARAMETER ExcludedUserFilterEnabled
        Enables or disables the excluded users filter. If the filter is disabled then any user entries in the filter are ignored when assignment policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Changes the excluded users filter of the application rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from the rule.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IncludedUserFilterEnabled
        Enables or disables the included users filter. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to a machine assignment by the application rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
    .PARAMETER IncludedUsers
        Changes the included users filter of the application rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        If a user appears explicitly in the excluded users filter of the rule, or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER RemoveExcludedUsers
        Removes the specified users from the excluded users filter of the application rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from this rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER RemoveIncludedUsers
        Removes the specified users from the included users filter of the application rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AppAssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddIncludedUsers},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveIncludedUsers},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAppEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Modifies an existing application rule in the site's entitlement policy.
    .PARAMETER InputObject
        The application rule in the entitlement policy to be modified.
    .PARAMETER Name
        The name of the application rule in the entitlement policy to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AddExcludedUsers
        Adds the specified users to the excluded users filter of the rule, that is, the users and groups who are explicitly denied entitlements to run applications published from the desktop group.
        See the ExcludedUsers parameter for more information.
    .PARAMETER AddIncludedUsers
        Adds the specified users to the included users filter of the rule, that is, the users and groups who are granted an entitlement to an application session by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER Description
        Changes the description of the application rule. The text is purely informational for the administrator, it is never visible to the end user.
    .PARAMETER Enabled
        Enables or disables the application rule. A disabled rule is ignored when evaluating the site's entitlement policy.
    .PARAMETER ExcludedUserFilterEnabled
        Enables or disables the excluded users filter. If the filter is disabled then any user entries in the filter are ignored when entitlement policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Changes the excluded users filter of the rule, that is, the users and groups who are explicitly denied entitlements to run applications published from the desktop group.
        This can be used to exclude users or groups or users who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IncludedUserFilterEnabled
        Enables or disables the included users filter. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to an application session by the application rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
    .PARAMETER IncludedUsers
        Changes the included users filter of the rule, that is, the users and groups who are granted an entitlement to an application session by the rule.
        If a user appears explicitly in the excluded users filter of the rule or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER LeasingBehavior
        Defines the desired connection leasing behavior applied to sessions launched using this entitlement. Possible values are:
        Allowed and Disallowed.
        The Allowed value indicates that connection leasing should behave normally. The Disallowed value prevents users from launching or reconnecting to sessions using this entitlement while connection leasing is active (typically during a database outage).
    .PARAMETER RemoveExcludedUsers
        Removes the specified users from the excluded users filter of the application rule, that is, the users and groups who are explicitly denied entitlements to run applications published from the desktop group.
        See the ExcludedUsers parameter for more information.
    .PARAMETER RemoveIncludedUsers
        Removes the specified users from the included users filter of the rule, that is, the users and groups who are granted an entitlement to an application session by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER SessionReconnection
        Defines reconnection (roaming) behavior for sessions launched using this rule. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AppEntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddIncludedUsers},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Citrix.Broker.Admin.SDK.LeasingBehavior]
        ${LeasingBehavior},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveIncludedUsers},
        
        [Citrix.Broker.Admin.SDK.SessionReconnection]
        ${SessionReconnection},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerApplication {
    <#
    .SYNOPSIS
        Changes the settings of an application to the value specified in the command.
    .PARAMETER InputObject
        Specifies the application to modify. The Uid of the application can also be substituted for the object.
    .PARAMETER Name
        Specifies the name of the application to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER BrowserName
        Specifies the name of the application to modify. Note that the BrowserName cannot be changed in this manner; to modify the BrowserName of an application, use the Rename-BrokerApplication cmdlet.
    .PARAMETER ClientFolder
        Specifies the folder that the application belongs to as the user sees it. This is the application folder displayed in the Citrix Online Plug-in, in Web Services, and also in the user's start menu. Subdirectories can be specified with '\' character. The following special characters are not allowed: / * ? < > | " :. Note that this property cannot be set for applications of type InstalledOnClient.
    .PARAMETER CommandLineArguments
        Specifies the command-line arguments to use when launching the executable.  This setting is ignored for applications of type PublishedContent.
    .PARAMETER CommandLineExecutable
        Specifies the name of the executable file to launch.
    .PARAMETER CpuPriorityLevel
        Specifies the CPU priority for the launched executable. Valid values are: Low, BelowNormal, Normal, AboveNormal, and High. Note that this property cannot be set for applications of type InstalledOnClient.
    .PARAMETER Description
        Specifies the description of the application.
    .PARAMETER Enabled
        Specifies whether or not this application can be launched.
    .PARAMETER HomeZoneOnly
        Specifies whether if the preferred zone for launching the application is its home zone but no machine is available from that zone then the launch fails.
        This can only be set if the application has a home zone preference specified.
    .PARAMETER HomeZoneUid
        Specifies any home zone preference used when launching this application.
    .PARAMETER IconFromClient
        Specifies if the app icon should be retrieved from the application on the client. This is reserved for possible future use, and all applications of type HostedOnDesktop cannot set or change this value.
    .PARAMETER IconUid
        Specifies which icon to use for this application. This application is visible both to the administrator (in the consoles) and also to the user. If no icon is specified, then a generic built-in application icon is used.
    .PARAMETER IgnoreUserHomeZone
        Specifies that when launching the application and the user has a home zone specified then the user's home zone preference should be ignored.
        This can only be set if the application does not itself have a home zone preference specified.
    .PARAMETER MaxPerUserInstances
        Specifies the maximum allowed concurrently running instances of the application that an individual user can have. A value of zero allows unlimited usage subject to any site-wide limit.
        Reducing the limit below the currently running number of instances does not cause any of those to be stopped.
    .PARAMETER MaxTotalInstances
        Specifies the maximum allowed total of concurrently running instances of the application in the site. A value of zero allows unlimited usage.
        Reducing the limit below the currently running number of instances does not cause any of those to be stopped.
    .PARAMETER PublishedName
        Specifies the name seen by end users who have access to this application.
    .PARAMETER SecureCmdLineArgumentsEnabled
        Specifies whether the command-line arguments should be secured. This is reserved for possible future use, and all applications of type HostedOnDesktop can only have this value set to true.
    .PARAMETER ShortcutAddedToDesktop
        Specifies whether or not a shortcut to the application should be placed on the user device.
    .PARAMETER ShortcutAddedToStartMenu
        Specifies whether a shortcut to the application should be placed in the user's start menu on their user device.
    .PARAMETER StartMenuFolder
        Specifies the name of the start menu folder that holds the application shortcut (if any). This is valid only for the Citrix Online Plug-in. Subdirectories can be specified with '\' character. The following special characters are not allowed: / * ? < > | " :.
    .PARAMETER UserFilterEnabled
        Specifies whether the application's user filter is enabled or disabled. Where the user filter is enabled, the application is only visible to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER Visible
        Specifies whether or not this application is visible to users. Note that it's possible for an application to be disabled and still visible.
    .PARAMETER WaitForPrinterCreation
        Specifies whether or not the session waits for the printers to be created before allowing the end-user to interact with the session. Note that this property cannot be set for applications of type InstalledOnClient.
    .PARAMETER WorkingDirectory
        Specifies from which working directory the executable is launched from. This setting is ignored for applications of type PublishedContent.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Application])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [ValidateLength(1, 38)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BrowserName},
        
        [ValidateLength(0, 260)]
        [string]
        ${ClientFolder},
        
        [string]
        ${CommandLineArguments},
        
        [ValidateLength(1, 255)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandLineExecutable},
        
        [Citrix.Broker.Admin.SDK.CpuPriorityLevel]
        ${CpuPriorityLevel},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [bool]
        ${HomeZoneOnly},
        
        [AllowNull()]
        [System.Nullable[guid]]
        ${HomeZoneUid},
        
        [bool]
        ${IconFromClient},
        
        [System.Nullable[int]]
        ${IconUid},
        
        [bool]
        ${IgnoreUserHomeZone},
        
        [int]
        ${MaxPerUserInstances},
        
        [int]
        ${MaxTotalInstances},
        
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${PublishedName},
        
        [bool]
        ${SecureCmdLineArgumentsEnabled},
        
        [bool]
        ${ShortcutAddedToDesktop},
        
        [bool]
        ${ShortcutAddedToStartMenu},
        
        [ValidateLength(0, 255)]
        [string]
        ${StartMenuFolder},
        
        [bool]
        ${UserFilterEnabled},
        
        [bool]
        ${Visible},
        
        [bool]
        ${WaitForPrinterCreation},
        
        [string]
        ${WorkingDirectory},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerApplicationGroup {
    <#
    .SYNOPSIS
        Changes properties of application groups.
    .PARAMETER InputObject
        Specifies the application group whose properties should be altered. Its Uid can also be substituted for the object reference.
    .PARAMETER Name
        Alters the properties of application groups whose name matches the supplied pattern.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Description
        The new description for the application group.
    .PARAMETER Enabled
        Whether the application group's applications should be launchable by end users.
    .PARAMETER RestrictToTag
        Specifies the new values of the application group's tag restriction.
    .PARAMETER SessionSharingEnabled
        Specifies the new value of the application group's SessionSharingEnabled flag. Please note this setting and SingleAppPerSession cannot be true at the same time.
    .PARAMETER SingleAppPerSession
        Specifies whether each application launched from this application group starts in its own new session or can share an existing suitable session if present. Please note this setting and SessionSharingEnabled cannot be true at the same time.
    .PARAMETER UserFilterEnabled
        Specifies the new value of the application group's UserFilterEnabled flag.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationGroup])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [string]
        ${RestrictToTag},
        
        [bool]
        ${SessionSharingEnabled},
        
        [bool]
        ${SingleAppPerSession},
        
        [bool]
        ${UserFilterEnabled},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerApplicationGroupMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for ApplicationGroup
    .PARAMETER ApplicationGroupId
        Specifies the ApplicationGroup object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the ApplicationGroup objects whose Metadata is to be created/updated.
    .PARAMETER ApplicationGroupName
        Specifies the ApplicationGroup object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationGroup])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${ApplicationGroupId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ApplicationGroupName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerApplicationInstanceMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for ApplicationInstance
    .PARAMETER ApplicationInstanceId
        Specifies the ApplicationInstance object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the ApplicationInstance objects whose Metadata is to be created/updated.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.ApplicationInstance])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${ApplicationInstanceId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ApplicationInstance[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerApplicationMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Application
    .PARAMETER ApplicationId
        Specifies the Application object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Application objects whose Metadata is to be created/updated.
    .PARAMETER ApplicationName
        Specifies the Application object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Application])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [int]
        ${ApplicationId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Application[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ApplicationName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAssignmentPolicyRule {
    <#
    .SYNOPSIS
        Modifies an existing desktop rule in the site's assignment policy.
    .PARAMETER InputObject
        The desktop rule in the assignment policy to be modified.
    .PARAMETER Name
        Specifies the name of the desktop rule in the assignment policy to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AddExcludedUsers
        Adds the specified users to the excluded users filter of the rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from this rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER AddIncludedUsers
        Adds the specified users to the included users filter of the rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER ColorDepth
        Changes the color depth of any desktop sessions to machines assigned by the rule.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER Description
        Changes the description of the desktop rule. The text may be visible to the end user, for example, as a tooltip associated with the desktop entitlement.
        A null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER Enabled
        Enables or disables the desktop rule. A disabled rule is ignored when evaluating the site's assignment policy.
    .PARAMETER ExcludedUserFilterEnabled
        Enables or disables the excluded users filter. If the filter is disabled then any user entries in the filter are ignored when assignment policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Changes the excluded users filter of the desktop rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from this rule.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IconUid
        Changes the unique ID of the icon used to display the machine assignment entitlement to the user, and of the assigned desktop itself following the assignment.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER IncludedUserFilterEnabled
        Enables or disables the included users filter. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to a machine assignment by the rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
        For rules that relate to RemotePC desktop groups however, if the included user filter is disabled, the rule is effectively disabled.
    .PARAMETER IncludedUsers
        Changes the included users filter of the rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        If a user appears explicitly in the excluded users filter of the rule, or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER MaxDesktops
        The number of machines from the rule's desktop group to which a user is entitled. Where an entitlement is granted to a user group rather than an individual, the number of machines applies to each member of the user group independently.
    .PARAMETER PublishedName
        Changes the published name of the machine assignment entitlement as seen by the user. Changing the published name does not affect the names of desktops that have already been assigned by the rule.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER RemoveExcludedUsers
        Removes the specified users from the excluded users filter of the rule, that is, the users and groups who are explicitly denied an entitlement to a machine assignment from this rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER RemoveIncludedUsers
        Removes the specified users from the included users filter of the desktop rule, that is, the users and groups who are granted an entitlement to a machine assignment by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER SecureIcaRequired
        Changes whether the desktop rule requires the SecureICA protocol for desktop sessions to machines assigned using the entitlement.
        The default null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddIncludedUsers},
        
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [System.Nullable[int]]
        ${IconUid},
        
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [int]
        ${MaxDesktops},
        
        [string]
        ${PublishedName},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveIncludedUsers},
        
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerAssignmentPolicyRuleMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for AssignmentPolicyRule
    .PARAMETER AssignmentPolicyRuleId
        Specifies the AssignmentPolicyRule object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the AssignmentPolicyRule objects whose Metadata is to be created/updated.
    .PARAMETER AssignmentPolicyRuleName
        Specifies the AssignmentPolicyRule object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.AssignmentPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${AssignmentPolicyRuleId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.AssignmentPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${AssignmentPolicyRuleName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerCatalog {
    <#
    .SYNOPSIS
        Sets the properties of a catalog.
    .PARAMETER InputObject
        Specifies the catalog objects to modify.
    .PARAMETER Name
        Identifies the catalog to modify.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Description
        Supplies the new value of the Description property.
    .PARAMETER IsRemotePC
        Supplies a new value for IsRemotePC.
        IsRemotePC can only be enabled when:
        o SessionSupport is SingleSession
        o MachinesArePhysical is true.
        IsRemotePC can only be set from true to false when no RemotePCAccount references this catalog, and when no Remote PC relationship exists between this catalog and a desktop group.
    .PARAMETER MinimumFunctionalLevel
        The new minimum FunctionalLevel required for machines to work successfully in the catalog. If this is higher than the FunctionalLevel of any machines already in the catalog, they will immediately cease to function.
        Valid values are L5, L7, L7_6
    .PARAMETER ProvisioningSchemeId
        Specifies the identity of the MCS provisioning scheme the catalog is associated with (can only be specified for new catalogs with a ProvisioningType of MCS; once set can never be changed).
    .PARAMETER PvsAddress
        Supplies the new value of the PvsAddress property. Can only be set if CatalogKind is Pvs or PvsPvd.
    .PARAMETER PvsDomain
        Supplies the new value of the PvsDomain property. Can only be set if CatalogKind is PvsPvd.
    .PARAMETER RemotePCHypervisorConnectionUid
        Supplies the new hypervisor connection to use for powering on remote PCs in this catalog (only allowed when IsRemotePC is true); this will affect all machines already in the catalog as well as those created later.
    .PARAMETER ZoneUid
        Supplies the Zone Uid associated with this catalog.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Catalog])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [string]
        ${Description},
        
        [bool]
        ${IsRemotePC},
        
        [Citrix.Broker.Admin.SDK.FunctionalLevel]
        ${MinimumFunctionalLevel},
        
        [ValidateNotNull()]
        [System.Nullable[guid]]
        ${ProvisioningSchemeId},
        
        [string]
        ${PvsAddress},
        
        [string]
        ${PvsDomain},
        
        [System.Nullable[int]]
        ${RemotePCHypervisorConnectionUid},
        
        [guid]
        ${ZoneUid},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerCatalogMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Catalog
    .PARAMETER CatalogId
        Specifies the Catalog object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Catalog objects whose Metadata is to be created/updated.
    .PARAMETER CatalogName
        Specifies the Catalog object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Catalog])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [int]
        ${CatalogId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${CatalogName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerConfiguration {
    <#
    .SYNOPSIS
        This cmdlet is for internal use only
    .PARAMETER Configuration
        This parameter is for internal use only
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [string]
        ${Configuration},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerConfigurationSlotMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for ConfigurationSlot
    .PARAMETER ConfigurationSlotId
        Specifies the ConfigurationSlot object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the ConfigurationSlot objects whose Metadata is to be created/updated.
    .PARAMETER ConfigurationSlotName
        Specifies the ConfigurationSlot object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.ConfigurationSlot])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${ConfigurationSlotId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.ConfigurationSlot[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ConfigurationSlotName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerControllerMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Controller
    .PARAMETER ControllerId
        Specifies the Controller object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Controller objects whose Metadata is to be created/updated.
    .PARAMETER ControllerName
        Specifies the Controller object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Controller])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [int]
        ${ControllerId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Controller[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${ControllerName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerDBConnection {
    <#
    .SYNOPSIS
        Configures a database connection for the Broker Service.
    .PARAMETER DBConnection
        Specifies the database connection string to be used by the Broker Service.  Passing in $null will clear any existing database connection configured.
    .PARAMETER Force
        If present, allows the local administrator to set the connection string to null when there are problems contacting the database or other services.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Fma.Sdk.Utilities.Service.ServiceStatusInfo])]
    param (
        [Parameter(Mandatory=$true, Position=1)]
        [AllowEmptyString()]
        [AllowNull()]
        [string]
        ${DBConnection},
        
        [Parameter(Position=2)]
        [switch]
        ${Force},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerDesktopGroup {
    <#
    .SYNOPSIS
        Adjusts the settings of a broker desktop group.
    .PARAMETER InputObject
        Specifies the desktop groups to adjust.
    .PARAMETER Name
        Specifies the desktop groups to adjust, based on their Name property.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AppDisks
        Specifies the application disks to be used by machines in the desktop group.
    .PARAMETER AutomaticPowerOnForAssigned
        Specifies whether assigned desktops in the desktop group should be automatically started at the start of peak time periods. Only relevant for groups whose DesktopKind is Private.
    .PARAMETER AutomaticPowerOnForAssignedDuringPeak
        Specifies whether assigned desktops in the desktop group should be automatically started throughout peak time periods. Only relevant for groups whose DesktopKind is Private and which have AutomaticPowerOnForAssigned set to true.
    .PARAMETER ColorDepth
        Specifies the color depth that the ICA session should use for desktops in this group.  Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER DeliveryType
        Specifies whether desktops, applications, or both, can be delivered from machines contained within the desktop group. Desktop groups with a DesktopKind of Private cannot be used to deliver both desktops and applications.
        When changing the delivery type to desktops only, there must be no remaining desktop-hosted applications associated with the group, or application-specific assignment/entitlement policy rules for the group.
        When changing the delivery type to applications only, there must be no remaining client-hosted applications associated with the group, or desktop-specific assignment/entitlement policy rules for the group.
        Valid values are DesktopsOnly, AppsOnly, and DesktopsAndApps.
    .PARAMETER Description
        A description for this desktop group useful for administrators of the site.
    .PARAMETER Enabled
        Whether the desktop group should be in the enabled state; disabled desktop groups do not appear to users.
    .PARAMETER IconUid
        The UID of the broker icon to be displayed to users for their desktop(s) in this desktop group.
    .PARAMETER InMaintenanceMode
        Whether the desktop should be put into maintenance mode; a desktop group in maintenance mode will not allow users to connect or reconnect to their desktops.
    .PARAMETER IsRemotePC
        Supplies a new value for IsRemotePC.
        IsRemotePC can only be enabled when:
        o SessionSupport is SingleSession
        o DeliveryType is DesktopsOnly
        o DesktopKind is Private
        IsRemotePC can be switched from true to false only if no RemotePC relationship exists between a catalog and this desktop group.
    .PARAMETER LicenseModel
        The license model for this desktop group. If none is specified, then the site-wide license model is used.
    .PARAMETER MinimumFunctionalLevel
        The new minimum FunctionalLevel required for machines to work successfully in the desktop group. If this is higher than the FunctionalLevel of any machines already in the desktop group, they will immediately cease to function.
    .PARAMETER OffPeakBufferSizePercent
        The percentage of machines in the desktop group that should be kept available in an idle state outside peak hours.
    .PARAMETER OffPeakDisconnectAction
        The action to be performed after a configurable period of a user session disconnecting outside peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER OffPeakDisconnectTimeout
        The number of minutes before the configured action should be performed after a user session disconnects outside peak hours.
    .PARAMETER OffPeakExtendedDisconnectAction
        The action to be performed after a second configurable period of a user session disconnecting outside peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER OffPeakExtendedDisconnectTimeout
        The number of minutes before the second configured action should be performed after a user session disconnects outside peak hours.
    .PARAMETER OffPeakLogOffAction
        The action to be performed after a configurable period of a user session ending outside peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER OffPeakLogOffTimeout
        The number of minutes before the configured action should be performed after a user session ends outside peak hours.
    .PARAMETER PeakBufferSizePercent
        The percentage of machines in the desktop group that should be kept available in an idle state in peak hours.
    .PARAMETER PeakDisconnectAction
        The action to be performed after a configurable period of a user session disconnecting in peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER PeakDisconnectTimeout
        The number of minutes before the configured action should be performed after a user session disconnects in peak hours.
    .PARAMETER PeakExtendedDisconnectAction
        The action to be performed after a second configurable period of a user session disconnecting in peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER PeakExtendedDisconnectTimeout
        The number of minutes before the second configured action should be performed after a user session disconnects in peak hours.
    .PARAMETER PeakLogOffAction
        The action to be performed after a configurable period of a user session ending in peak hours. Possible values are Nothing, Suspend, or Shutdown.
    .PARAMETER PeakLogOffTimeout
        The number of minutes before the configured action should be performed after a user session ends in peak hours.
    .PARAMETER ProductCode
        The licensing product code for this desktop group. If none is specified, then the site-wide product code is used.
    .PARAMETER ProtocolPriority
        A list of protocol names in the order in which they should be attempted for use during connection.
    .PARAMETER PublishedName
        The name that will be displayed to users for their desktop(s) in this desktop group.
    .PARAMETER ReuseMachinesWithoutShutdownInOutage
        Specifies whether power cycle operations are required during outage for pooled machines.
    .PARAMETER SecureIcaRequired
        Whether HDX connections to desktops in the new desktop group require the use of a secure protocol.
    .PARAMETER SettlementPeriodBeforeAutoShutdown
        Time after a session ends during which automatic shutdown requests (for example, shutdown after use, idle pool management) are deferred. Any outstanding shutdown request takes effect after the settlement period expires. This is typically used to configure time to allow logoff scripts to complete.
    .PARAMETER SettlementPeriodBeforeUse
        Idle period before a machine can be selected to host a new session after registration or the end of a previous session. This is typically used to allow a machine to become idle following processing associated with start-up or logoff actions. A machine may still be selected during the idle period if no other machine is available for immediate use.
    .PARAMETER ShutdownDesktopsAfterUse
        Whether desktops in this desktop group should be automatically shut down when each user session completes (only relevant to power-managed desktops).
    .PARAMETER TimeZone
        The time zone in which this desktop group's machines reside.
        The time zone must be specified for any of the group's automatic power management settings to take effect. Automatic power management operations include pool management (power time schemes), reboot schedules, session disconnect and logoff actions, and powering on assigned machines etc.
    .PARAMETER TurnOnAddedMachine
        This flag specifies whether the Broker Service should attempt to power on machines when they are added to the desktop group.
    .PARAMETER ZonePreferences
        Ordered list of zone preferences to be applied when launching resources from this desktop group. Valid zone preference values are UserLocation, UserHome, UserHomeOnly and ApplicationHome.
        The list can have zero or more entries subject to the following restrictions: Zone preferences can only be applied to groups having a DesktopKind of Shared; the same zone preference value cannot occur in the list more than once; the UserHome and UserHomeOnly values are mutually exclusive and cannot both appear in the list.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroup])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [guid[]]
        ${AppDisks},
        
        [bool]
        ${AutomaticPowerOnForAssigned},
        
        [bool]
        ${AutomaticPowerOnForAssignedDuringPeak},
        
        [Citrix.Broker.Admin.SDK.ColorDepth]
        ${ColorDepth},
        
        [Citrix.Broker.Admin.SDK.DeliveryType]
        ${DeliveryType},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [int]
        ${IconUid},
        
        [bool]
        ${InMaintenanceMode},
        
        [bool]
        ${IsRemotePC},
        
        [System.Nullable[Citrix.Broker.Admin.SDK.LicenseModel]]
        ${LicenseModel},
        
        [Citrix.Broker.Admin.SDK.FunctionalLevel]
        ${MinimumFunctionalLevel},
        
        [int]
        ${OffPeakBufferSizePercent},
        
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakDisconnectAction},
        
        [int]
        ${OffPeakDisconnectTimeout},
        
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakExtendedDisconnectAction},
        
        [int]
        ${OffPeakExtendedDisconnectTimeout},
        
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${OffPeakLogOffAction},
        
        [int]
        ${OffPeakLogOffTimeout},
        
        [int]
        ${PeakBufferSizePercent},
        
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakDisconnectAction},
        
        [int]
        ${PeakDisconnectTimeout},
        
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakExtendedDisconnectAction},
        
        [int]
        ${PeakExtendedDisconnectTimeout},
        
        [Citrix.Broker.Admin.SDK.SessionChangeHostingAction]
        ${PeakLogOffAction},
        
        [int]
        ${PeakLogOffTimeout},
        
        [string]
        ${ProductCode},
        
        [string[]]
        ${ProtocolPriority},
        
        [ValidateLength(1, 255)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PublishedName},
        
        [bool]
        ${ReuseMachinesWithoutShutdownInOutage},
        
        [bool]
        ${SecureIcaRequired},
        
        [timespan]
        ${SettlementPeriodBeforeAutoShutdown},
        
        [timespan]
        ${SettlementPeriodBeforeUse},
        
        [bool]
        ${ShutdownDesktopsAfterUse},
        
        [string]
        ${TimeZone},
        
        [bool]
        ${TurnOnAddedMachine},
        
        [Citrix.Broker.Admin.SDK.ZonePreference[]]
        ${ZonePreferences},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerDesktopGroupMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for DesktopGroup
    .PARAMETER DesktopGroupId
        Specifies the DesktopGroup object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the DesktopGroup objects whose Metadata is to be created/updated.
    .PARAMETER DesktopGroupName
        Specifies the DesktopGroup object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroup])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [int]
        ${DesktopGroupId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerDesktopGroupWebhook {
    <#
    .SYNOPSIS
        Adjusts the settings of a webhook for a desktop group
    .PARAMETER InputObject
        The webhook object to alter the settings.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Address
        Specified the new URL for the webhook.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.DesktopGroupWebhook])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroupWebhook[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [ValidateLength(1, 2000)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Address},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerEntitlementPolicyRule {
    <#
    .SYNOPSIS
        Modifies an existing desktop rule in the site's entitlement policy.
    .PARAMETER InputObject
        The desktop rule in the entitlement policy to be modified.
    .PARAMETER Name
        The name of the desktop rule in the entitlement policy to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AddExcludedUsers
        Adds the specified users to the excluded users filter of the rule, that is, the users and groups who are explicitly denied an entitlement to a desktop session from this rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER AddIncludedUsers
        Adds the specified users to the included users filter of the rule, that is, the users and groups who are granted an entitlement to a desktop session by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER ColorDepth
        Changes the color depth of any desktop sessions launched by a user from this entitlement. Existing sessions are not affected.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit.
        A null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER Description
        Changes the description of the desktop rule. The text may be visible to the end user, for example, as a tooltip associated with the desktop entitlement.
        A null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER Enabled
        Enables or disables the desktop rule. A disabled rule is ignored when evaluating the site's entitlement policy.
    .PARAMETER ExcludedUserFilterEnabled
        Enables or disables the excluded users filter. If the filter is disabled then any user entries in the filter are ignored when entitlement policy rules are evaluated.
    .PARAMETER ExcludedUsers
        Changes the excluded users filter of the desktop rule, that is, the users and groups who are explicitly denied an entitlement to a desktop session from this rule.
        This can be used to exclude users or groups who would otherwise gain access by groups specified in the included users filter.
    .PARAMETER IconUid
        Changes the icon (identified by its unique ID) for the published desktop entitlement as seen by the user.
        A null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER IncludedUserFilterEnabled
        Enables or disables the included users filter. If the filter is disabled then any user who satisfies the requirements of the access policy is implicitly granted an entitlement to a desktop session by the rule.
        Users who would be implicitly granted access when the filter is disabled can still be explicitly denied access using the excluded users filter.
    .PARAMETER IncludedUsers
        Changes the included users filter of the desktop rule, that is, the users and groups who are granted an entitlement to a desktop session by the rule.
        If a user appears explicitly in the excluded users filter of the rule or is a member of a group that appears in the excluded users filter, no entitlement is granted whether or not the user appears in the included users filter.
    .PARAMETER LeasingBehavior
        Defines the desired connection leasing behavior applied to sessions launched using this entitlement. Possible values are:
        Allowed and Disallowed.
        The Allowed value indicates that connection leasing should behave normally. The Disallowed value prevents users from launching or reconnecting to sessions using this entitlement while connection leasing is active (typically during a database outage).
    .PARAMETER PublishedName
        Changes the name of the published desktop entitlement as seen by the user.
        A null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER RemoveExcludedUsers
        Removes the specified users from the excluded users filter of the rule, that is, the users and groups who are explicitly denied an entitlement to a desktop session from this rule.
        See the ExcludedUsers parameter for more information.
    .PARAMETER RemoveIncludedUsers
        Removes the specified users from the included users filter of the desktop rule, that is, the users and groups who are granted an entitlement to a desktop session by the rule.
        See the IncludedUsers parameter for more information.
    .PARAMETER RestrictToTag
        Optional tag that may be used further to restrict which machines may be made accessible to a user by an entitlement policy rule. A machine may be made accessible by an entitlement policy rule only if either the rule has no tag restriction or the rule does have a tag restriction and the machine is tagged with the same tag.
    .PARAMETER SecureIcaRequired
        Changes whether the desktop rule requires the SecureICA protocol for desktop sessions launched using the entitlement.
        A null value indicates that the equivalent setting from the rule's desktop group is used.
    .PARAMETER SessionReconnection
        Defines reconnection (roaming) behavior for sessions launched using this rule. Possible values are:
        Always, DisconnectedOnly, and SameEndpointOnly.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.EntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.EntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${AddIncludedUsers},
        
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [bool]
        ${ExcludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${ExcludedUsers},
        
        [System.Nullable[int]]
        ${IconUid},
        
        [bool]
        ${IncludedUserFilterEnabled},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${IncludedUsers},
        
        [Citrix.Broker.Admin.SDK.LeasingBehavior]
        ${LeasingBehavior},
        
        [string]
        ${PublishedName},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveExcludedUsers},
        
        [Citrix.Broker.Admin.SDK.User[]]
        ${RemoveIncludedUsers},
        
        [string]
        ${RestrictToTag},
        
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [Citrix.Broker.Admin.SDK.SessionReconnection]
        ${SessionReconnection},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerEntitlementPolicyRuleMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for EntitlementPolicyRule
    .PARAMETER EntitlementPolicyRuleId
        Specifies the EntitlementPolicyRule object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the EntitlementPolicyRule objects whose Metadata is to be created/updated.
    .PARAMETER EntitlementPolicyRuleName
        Specifies the EntitlementPolicyRule object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.EntitlementPolicyRule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${EntitlementPolicyRuleId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.EntitlementPolicyRule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${EntitlementPolicyRuleName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerHostingPowerAction {
    <#
    .SYNOPSIS
        Changes the priority of one or more pending power actions.
    .PARAMETER InputObject
        The power action whose priority is to be changed.
    .PARAMETER MachineName
        Changes the priority of actions that are for machines whose name (of the form domain\machine) matches the specified string.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER ActualPriority
        Specifies a new priority value for the action in the queue.
        This priority is the current action priority; the 'base' or original priority for actions cannot be altered. Numerically lower priority values indicate more important actions that are processed in preference to actions with numerically higher priority settings.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.HostingPowerAction])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HostingPowerAction[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [switch]
        ${PassThru},
        
        [int]
        ${ActualPriority},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerHostingPowerActionMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for HostingPowerAction
    .PARAMETER HostingPowerActionId
        Specifies the HostingPowerAction object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the HostingPowerAction objects whose Metadata is to be created/updated.
    .PARAMETER HostingPowerActionName
        Specifies the HostingPowerAction object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.HostingPowerAction])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${HostingPowerActionId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HostingPowerAction[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${HostingPowerActionName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerHypervisorAlertMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for HypervisorAlert
    .PARAMETER HypervisorAlertId
        Specifies the HypervisorAlert object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the HypervisorAlert objects whose Metadata is to be created/updated.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.HypervisorAlert])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${HypervisorAlertId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HypervisorAlert[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerHypervisorConnection {
    <#
    .SYNOPSIS
        Sets the properties of a hypervisor connection.
    .PARAMETER InputObject
        Specifies the hypervisor connection object to adjust.
    .PARAMETER Name
        Specifies the name of the hypervisor connection object to adjust.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER PreferredController
        Supplies the new value of the PreferredController property.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.HypervisorConnection])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HypervisorConnection[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [string]
        ${PreferredController},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerHypervisorConnectionMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for HypervisorConnection
    .PARAMETER HypervisorConnectionId
        Specifies the HypervisorConnection object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the HypervisorConnection objects whose Metadata is to be created/updated.
    .PARAMETER HypervisorConnectionName
        Specifies the HypervisorConnection object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.HypervisorConnection])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${HypervisorConnectionId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.HypervisorConnection[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${HypervisorConnectionName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerIconMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Icon
    .PARAMETER IconId
        Specifies the Icon object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Icon objects whose Metadata is to be created/updated.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Icon])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${IconId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Icon[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerLeaseMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Lease
    .PARAMETER LeaseId
        Specifies the Lease object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Lease objects whose Metadata is to be created/updated.
    .PARAMETER LeaseName
        Specifies the Lease object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Lease])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${LeaseId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Lease[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${LeaseName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachine {
    <#
    .SYNOPSIS
        Sets properties on a machine.
    .PARAMETER InputObject
        The machine instances whose properties you want to set.
    .PARAMETER MachineName
        The machine whose properties you want to set.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AssignedClientName
        Changes the client name assignment of the machine. Set this to $null to remove the assignment. You can assign machines to multiple users, a single client IP address, or a single client name, but only to one of these categories at a time.
    .PARAMETER AssignedIPAddress
        Changes the client IP address assignment of the machine. Set this to $null to remove the assignment. You can assign machines to multiple users, a single client IP address, or a single client name, but only to one of these categories at a time.
    .PARAMETER HostedMachineId
        The unique ID by which the hypervisor recognizes the machine. This may only be set for VMs which are not provisioned by MCS.
    .PARAMETER HypervisorConnectionUid
        The hypervisor connection that runs the machine. This may only be set for VMs which are not provisioned by MCS.
    .PARAMETER InMaintenanceMode
        Sets whether the machine is in maintenance mode or not. A machine in maintenance mode is not available for new sessions, and for managed machines all automatic power management is disabled.
    .PARAMETER IsReserved
        Specifies whether the machine should be reserved for special use, for example, for AppDisk preparation. A machine cannot be reserved if it is already a member of a desktop group.
    .PARAMETER PublishedName
        The name of the machine that is displayed in StoreFront, if the machine has been published. It can be set only for private desktops.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Machine])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [switch]
        ${PassThru},
        
        [string]
        ${AssignedClientName},
        
        [string]
        ${AssignedIPAddress},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${HostedMachineId},
        
        [ValidateNotNull()]
        [System.Nullable[int]]
        ${HypervisorConnectionUid},
        
        [bool]
        ${InMaintenanceMode},
        
        [bool]
        ${IsReserved},
        
        [string]
        ${PublishedName},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachineCatalog {
    <#
    .SYNOPSIS
        Moves one or more machines into a different catalog.
    .PARAMETER InputObject
        The machine instances that are being moved into a different catalog.
    .PARAMETER CatalogUid
        The unique identifier of the catalog into which the machines are being moved.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true, Position=2, ValueFromPipeline=$true)]
        [int]
        ${CatalogUid},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachineCommandMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for MachineCommand
    .PARAMETER MachineCommandId
        Specifies the MachineCommand object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the MachineCommand objects whose Metadata is to be created/updated.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.MachineCommand])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${MachineCommandId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineCommand[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachineConfiguration {
    <#
    .SYNOPSIS
        Sets the properties of a machine configuration.
    .PARAMETER InputObject
        Machine configuration to modify.
    .PARAMETER Name
        Name of machine configuration to modify.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Description
        New description for the machine configuration.
    .PARAMETER Policy
        New binary array of encoded settings data.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.MachineConfiguration])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineConfiguration[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [string]
        ${Description},
        
        [byte[]]
        ${Policy},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachineConfigurationMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for MachineConfiguration
    .PARAMETER MachineConfigurationId
        Specifies the MachineConfiguration object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the MachineConfiguration objects whose Metadata is to be created/updated.
    .PARAMETER MachineConfigurationName
        Specifies the MachineConfiguration object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.MachineConfiguration])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${MachineConfigurationId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.MachineConfiguration[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineConfigurationName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachineMaintenanceMode {
    <#
    .SYNOPSIS
        Sets whether the specified machine(s) are in maintenance mode.
    .PARAMETER InputObject
        The machine instances whose InMaintenanceMode property you want to set.
    .PARAMETER MaintenanceMode
        Sets whether the machine is in maintenance mode or not. A machine in maintenance mode is not available for new sessions, and for managed machines all automatic power management is disabled.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true, Position=2, ValueFromPipeline=$true)]
        [bool]
        ${MaintenanceMode},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerMachineMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Machine
    .PARAMETER MachineId
        Specifies the Machine object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Machine objects whose Metadata is to be created/updated.
    .PARAMETER MachineName
        Specifies the Machine object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Machine])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [int]
        ${MachineId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerPowerTimeScheme {
    <#
    .SYNOPSIS
        Modifies an existing power time scheme.
    .PARAMETER InputObject
        The power time scheme to be changed.
    .PARAMETER Name
        Identifies the power time scheme to be changed by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER DaysOfWeek
        Changes the pattern of days of the week that the time scheme applies to. The pattern of days is specified as a single value or a list of values, where each value refers to either a single day or defined group of days.
        Valid values are: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Weekend and Weekdays.
    .PARAMETER DisplayName
        Changes the name that is used by the DesktopStudio console when showing the time scheme.
    .PARAMETER PeakHours
        Changes the pattern of hours considered 'peak' vs 'off-peak' for the days covered by the time scheme. A 24-entry array of boolean truth values is expected, where the zeroth entry of the array relates to the time period between midnight and 0:59, the first relates to 1am to 1:59 and so on, with the last array element relating to 11 PM to 11:59. If the flag value is $true it means the associated hour of the day is considered a peak time; if $false it means that it is considered off-peak.
        If fewer than 24 values are supplied, the final missing values are assumed to be 'false', and if more than 24 values are supplied, only the first 24 are used.
    .PARAMETER PoolSize
        Changes the requested pool size of running machines at the various hours of the day for the days covered by the time scheme. A 24-entry array of integer values is expected, where the zeroth entry of the array relates to the time period between midnight and 0:59, the first relates to 1am to 1:59 and so on, with the last array element relating to 11 PM to 11:59. The pool size array entry values are either absolute numbers of machines that should be running or are a percentage of the machines in the desktop group that should be running during the associated hour of the day. A value of -1 in the array signifies that no management of the number of running machines should be attempted during the associated hour of the day.
        If fewer than 24 values are supplied, the final missing values are assumed to be -1, and if more than 24 values are supplied, only the first 24 are used.
    .PARAMETER PoolUsingPercentage
        Changes whether pool size values from the 'PoolSize' array are evaluated as absolute numbers of running machines or as a percentage of machines in the desktop group that are to be maintained as running.
        A value of $true indicates that the pool size array values are percentages of total machines in the desktop group and a value of $false indicates that the pool size array values are absolute numbers of machines to maintain as running.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.PowerTimeScheme])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PowerTimeScheme[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.TimeSchemeDays]
        ${DaysOfWeek},
        
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DisplayName},
        
        [bool[]]
        ${PeakHours},
        
        [int[]]
        ${PoolSize},
        
        [System.Nullable[bool]]
        ${PoolUsingPercentage},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerPowerTimeSchemeMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for PowerTimeScheme
    .PARAMETER PowerTimeSchemeId
        Specifies the PowerTimeScheme object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the PowerTimeScheme objects whose Metadata is to be created/updated.
    .PARAMETER PowerTimeSchemeName
        Specifies the PowerTimeScheme object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.PowerTimeScheme])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${PowerTimeSchemeId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PowerTimeScheme[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${PowerTimeSchemeName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerPrivateDesktop {
    <#
    .SYNOPSIS
        Change the settings of a private desktop.
    .PARAMETER InputObject
        Specifies the desktop or array of desktops to modify. You can also use an integer Uid of the desktop instead.
    .PARAMETER MachineName
        Specifies the desktop to modify using its machine name (in the form 'domain\machine').
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AssignedClientName
        Changes the client name assignment of the desktop. Set this to $null to remove the assignment. Desktops can be assigned to multiple users, a single IP address, or a single client name, but only to one of these categories at one time.
    .PARAMETER AssignedIPAddress
        Changes the IP address assignment of the desktop. Set this to $null to remove the assignment. Desktops can be assigned to multiple users, a single IP address, or a single client name, but only to one of these categories at one time.
    .PARAMETER ColorDepth
        Changes the color depth connections to this desktop should use.
        Valid values are $null, FourBit, EightBit, SixteenBit, and TwentyFourBit. A value of $null results in the desktop group value being used instead.
    .PARAMETER Description
        Changes the description of the desktop. This is seen only by Citrix Administrators and is not visible to users.
    .PARAMETER IconUid
        Changes the icon displayed for this desktop. When this setting is $null, the icon displayed is determined by the desktop group.
    .PARAMETER InMaintenanceMode
        Changes the maintenance mode setting of a desktop. When a desktop is in maintenance mode, it is not included as a candidate when brokering new sessions, and it does not participate in automatic power management (idle pool); however, it still responds to explicit power operations.
    .PARAMETER PublishedName
        Changes the name displayed to the user for this desktop. When this setting is $null, the name displayed is determined by the PublishedName of the desktop group.
    .PARAMETER SecureIcaRequired
        Changes whether or not SecureICA is required for connections to this desktop. When this setting is $null, the SecureIcaRequired setting from the desktop group is used.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.PrivateDesktop])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.PrivateDesktop[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [switch]
        ${PassThru},
        
        [string]
        ${AssignedClientName},
        
        [string]
        ${AssignedIPAddress},
        
        [System.Nullable[Citrix.Broker.Admin.SDK.ColorDepth]]
        ${ColorDepth},
        
        [string]
        ${Description},
        
        [System.Nullable[int]]
        ${IconUid},
        
        [bool]
        ${InMaintenanceMode},
        
        [string]
        ${PublishedName},
        
        [System.Nullable[bool]]
        ${SecureIcaRequired},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerRebootCycleMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for RebootCycle
    .PARAMETER RebootCycleId
        Specifies the RebootCycle object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the RebootCycle objects whose Metadata is to be created/updated.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootCycle])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${RebootCycleId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootCycle[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerRebootSchedule {
    <#
    .SYNOPSIS
        Updates the values of one or more desktop group reboot schedules.
    .PARAMETER InputObject
        The reboot schedule to be modified.
    .PARAMETER DesktopGroupName
        The name of the desktop group whose reboot schedule is to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Day
        For weekly schedules, the day of the week on which the scheduled reboot-cycle starts (one of Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
    .PARAMETER Enabled
        Boolean that indicates if the reboot schedule is to be enabled or disabled.
    .PARAMETER Frequency
        Frequency with which this schedule runs (either Weekly or Daily).
    .PARAMETER RebootDuration
        Approximate maximum number of minutes over which the scheduled reboot cycle runs.
    .PARAMETER StartTime
        Time of day at which the scheduled reboot cycle starts (HH:MM).
    .PARAMETER WarningDuration
        Time prior to the initiation of a machine reboot at which warning message is displayed in all user sessions on that machine. If the warning duration is zero then no message is displayed. In some cases the time required to process a reboot schedule may exceed the RebootDuration time by up to the WarningDuration value; Citrix recommends that the WarningDuration is kept small relative to the RebootDuration value.
    .PARAMETER WarningMessage
        Warning message displayed in user sessions on a machine scheduled for reboot. If the message is blank then no message is displayed. The optional pattern '%m%' is replaced by the number of minutes until the reboot.
    .PARAMETER WarningRepeatInterval
        Time to wait after the previous reboot warning before displaying the warning message in all user sessions on that machine again. If the warning repeat interval is zero then the warning message is not displayed after the initial warning.
    .PARAMETER WarningTitle
        The window title used when showing the warning message in user sessions on a machine scheduled for reboot.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootSchedule])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootSchedule[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.RebootScheduleDays]
        ${Day},
        
        [bool]
        ${Enabled},
        
        [Citrix.Broker.Admin.SDK.RebootScheduleFrequency]
        ${Frequency},
        
        [int]
        ${RebootDuration},
        
        [timespan]
        ${StartTime},
        
        [int]
        ${WarningDuration},
        
        [string]
        ${WarningMessage},
        
        [int]
        ${WarningRepeatInterval},
        
        [string]
        ${WarningTitle},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerRebootScheduleV2 {
    <#
    .SYNOPSIS
        Updates the values of one or more desktop group reboot schedules.
    .PARAMETER InputObject
        The reboot schedule to be modified.
    .PARAMETER Name
        The name of the reboot schedule
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Day
        For weekly schedules, the day of the week on which the scheduled reboot-cycle starts (one of Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
    .PARAMETER Description
        An optional description for the reboot schedule.
    .PARAMETER Enabled
        Boolean that indicates if the reboot schedule is to be enabled or disabled.
    .PARAMETER Frequency
        Frequency with which this schedule runs (either Weekly or Daily).
    .PARAMETER RebootDuration
        Approximate maximum number of minutes over which the scheduled reboot cycle runs.
    .PARAMETER RestrictToTag
        If specified, restricts the reboot schedule to only those machines in the desktop group with the specified tag. Specify $null to remove any tag restriction.
    .PARAMETER StartTime
        Time of day at which the scheduled reboot cycle starts (HH:MM).
    .PARAMETER WarningDuration
        Time prior to the initiation of a machine reboot at which warning message is displayed in all user sessions on that machine. If the warning duration is zero then no message is displayed. In some cases the time required to process a reboot schedule may exceed the RebootDuration time by up to the WarningDuration value; Citrix recommends that the WarningDuration is kept small relative to the RebootDuration value.
    .PARAMETER WarningMessage
        Warning message displayed in user sessions on a machine scheduled for reboot. If the message is blank then no message is displayed. The optional pattern '%m%' is replaced by the number of minutes until the reboot.
    .PARAMETER WarningRepeatInterval
        Time to wait after the previous reboot warning before displaying the warning message in all user sessions on that machine again. If the warning repeat interval is zero then the warning message is not displayed after the initial warning.
    .PARAMETER WarningTitle
        The window title used when showing the warning message in user sessions on a machine scheduled for reboot.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootScheduleV2])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleV2[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [Citrix.Broker.Admin.SDK.RebootScheduleDays]
        ${Day},
        
        [string]
        ${Description},
        
        [bool]
        ${Enabled},
        
        [Citrix.Broker.Admin.SDK.RebootScheduleFrequency]
        ${Frequency},
        
        [int]
        ${RebootDuration},
        
        [string]
        ${RestrictToTag},
        
        [timespan]
        ${StartTime},
        
        [int]
        ${WarningDuration},
        
        [string]
        ${WarningMessage},
        
        [int]
        ${WarningRepeatInterval},
        
        [string]
        ${WarningTitle},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerRebootScheduleV2Metadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for RebootScheduleV2
    .PARAMETER RebootScheduleV2Id
        Specifies the RebootScheduleV2 object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the RebootScheduleV2 objects whose Metadata is to be created/updated.
    .PARAMETER RebootScheduleV2Name
        Specifies the RebootScheduleV2 object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RebootScheduleV2])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [int]
        ${RebootScheduleV2Id},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootScheduleV2[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${RebootScheduleV2Name},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerRemotePCAccount {
    <#
    .SYNOPSIS
        Modify one or more RemotePCAccounts.
    .PARAMETER InputObject
        Specifies the RemotePCAccounts to modify.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER AllowSubfolderMatches
        When true a machine matches this RemotePCAccount if the AD computer is in the container specified by the OU property, or within a child container of the OU.
        When false the AD computer object only matches if it is directly in the AD container specified by the OU property.
        This property is not meaningful when OU has the special value 'any'.
    .PARAMETER MachinesExcluded
        MachinesExcluded specifies a set of strings that can include asterisk wildcards. If a machine name matches any entries in MachinesExcluded then it cannot match with this RemotePCAccount regardless of whether there is a MachinesIncluded match.
        Matches are performed against the domain name joined with the machine name by a backslash (DOMAIN\MACHINE), e.g.:
        DOMAIN1\M*
        DOMAIN*\M*
        *\M*
    .PARAMETER MachinesIncluded
        MachinesIncluded specifies a set of strings that can include asterisk wildcards. A machine may only match with this RemotePCAccount if it matches a MachinesIncluded entry and does not match any MachinesExcluded entries.
        Matches are performed against the domain name joined with the machine name by a backslash (DOMAIN\MACHINE), e.g.:
        DOMAIN1\M*
        DOMAIN*\M*
        *\M*
    .PARAMETER OU
        Specifies the DN of an AD container, or has the special value 'any'.
        When an AD container is specified a machine may only match with the RemotePCAccount when the AD computer object is located relative to the OU.
        When 'any' is specified the location of the AD computer object is ignored for purposes of matching this RemotePCAccount. The machine must still meet the MachinesIncluded and MachinesExcluded filters for a match to occur.
        In the event that a machine matches with multiple RemotePCAccounts then the RemotePCAccount OU with the longest canonical name takes precedence. The special 'any' OU is treated as lowest priority.
        Note that the OU value of every RemotePCAccount must be unique, and this includes only one 'any' entry being permitted.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.RemotePCAccount])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RemotePCAccount[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [bool]
        ${AllowSubfolderMatches},
        
        [string[]]
        ${MachinesExcluded},
        
        [string[]]
        ${MachinesIncluded},
        
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 196)]
        [string]
        ${OU},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSession {
    <#
    .SYNOPSIS
        Sets properties of a session.
    .PARAMETER InputObject
        The session instances whose properties you want to set.
    .PARAMETER SessionKey
        The session key (Guid) of the session whose properties you want to set.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Hidden
        Changes whether the session is hidden or not. Hidden sessions are treated as though they do not exist when brokering sessions; a hidden session cannot be reconnected to, but a new session may be launched using the same entitlement.
        A session may be hidden automatically by the system when an attempt is made to reconnect to a session that is unreachable due to, for example, the failure of a VM's hypervisor. This allows a new session to be brokered provided that other machines in the same desktop group are still available. If the original session still exists after the hypervisor is restored then it must be unhidden to allow the user to reconnect to it.
        Only sessions for shared desktops or applications can be hidden or unhidden. Private desktop or application sessions can never be hidden.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Session])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Session[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${SessionKey},
        
        [switch]
        ${PassThru},
        
        [bool]
        ${Hidden},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSessionLinger {
    <#
    .SYNOPSIS
        Updates the values of one or more desktop group session linger settings.
    .PARAMETER InputObject
        The session linger to be modified.
    .PARAMETER DesktopGroupName
        The name of the desktop group whose session linger setting is to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Enabled
        Boolean that indicates if the session linger setting is to be enabled or disabled.
    .PARAMETER MaxAverageLoadThreshold
        Specifies the average load threshold across the desktop group. When the threshold hits, lingering sessions across the group be terminated to reduce load. Sessions that have been lingering the longest will be chosen first.
    .PARAMETER MaxLoadPerMachineThreshold
        Specifies the maximum load threshold per machine in the desktop group. When the threshold hits, lingering sessions on each loaded machine will be terminated to reduce load. Sessions that have been lingering the longest will be chosen first.
    .PARAMETER MaxTimeBeforeDisconnect
        Specifies the time by which a lingering session will be disconnected. The disconnect time cannot be greater than the terminate timer (if enabled). When the disconnect and terminate times are the same, the terminate time takes precedence.
    .PARAMETER MaxTimeBeforeTerminate
        Specifies the time by which a lingering session will be terminated. When the disconnect and terminate times are the same, the terminate time takes precedence.
    .PARAMETER UserFilterEnabled
        Specifies whether the session linger's user filter is enabled or disabled. Where the user filter is enabled, lingering is enabled only to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.SessionLinger])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionLinger[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [switch]
        ${PassThru},
        
        [bool]
        ${Enabled},
        
        [int]
        ${MaxAverageLoadThreshold},
        
        [int]
        ${MaxLoadPerMachineThreshold},
        
        [timespan]
        ${MaxTimeBeforeDisconnect},
        
        [timespan]
        ${MaxTimeBeforeTerminate},
        
        [bool]
        ${UserFilterEnabled},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSessionMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Session
    .PARAMETER SessionId
        Specifies the Session object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Session objects whose Metadata is to be created/updated.
    .PARAMETER SessionName
        Specifies the Session object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Session])]
    param (
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [long]
        ${SessionId},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Session[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [guid]
        ${SessionName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSessionPreLaunch {
    <#
    .SYNOPSIS
        Updates the values of one or more desktop group session pre-launch settings.
    .PARAMETER InputObject
        The session pre-launch to be modified.
    .PARAMETER DesktopGroupName
        The name of the desktop group whose session pre-launch setting is to be modified.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Enabled
        Boolean that indicates if the session pre-launch setting is to be enabled or disabled.
    .PARAMETER MaxAverageLoadThreshold
        Specifies the average load threshold across the desktop group. When the threshold hits, pre-launched sessions across the group be terminated to reduce load. Sessions that have been pre-launched the longest will be chosen first.
    .PARAMETER MaxLoadPerMachineThreshold
        Specifies the maximum load threshold per machine in the desktop group. When the threshold hits, pre-launched sessions on each loaded machine will be terminated to reduce load. Sessions that have been pre-launched the longest will be chosen first.
    .PARAMETER MaxTimeBeforeDisconnect
        Specifies the time by which a pre-launched session will be disconnected. The disconnect time cannot be greater than the terminate timer (if enabled). When the disconnect and terminate times are the same, the terminate time takes precedence.
    .PARAMETER MaxTimeBeforeTerminate
        Specifies the time by which a pre-launched session will be terminated. When the disconnect and terminate times are the same, the terminate time takes precedence.
    .PARAMETER UserFilterEnabled
        Specifies whether the session pre-launch's user filter is enabled or disabled. Where the user filter is enabled, pre-launch is enabled only to users who appear in the filter (either explicitly or by virtue of group membership).
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.SessionPreLaunch])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SessionPreLaunch[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${DesktopGroupName},
        
        [switch]
        ${PassThru},
        
        [bool]
        ${Enabled},
        
        [int]
        ${MaxAverageLoadThreshold},
        
        [int]
        ${MaxLoadPerMachineThreshold},
        
        [timespan]
        ${MaxTimeBeforeDisconnect},
        
        [timespan]
        ${MaxTimeBeforeTerminate},
        
        [bool]
        ${UserFilterEnabled},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSharedDesktop {
    <#
    .SYNOPSIS
        Change the settings of a shared desktop.
    .PARAMETER InputObject
        Specifies the desktop or array of desktops to modify. You can also use an integer Uid of the desktop instead.
    .PARAMETER MachineName
        Specifies the desktop to modify using its machine name (in the form 'domain\machine').
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER InMaintenanceMode
        Changes the maintenance mode setting of a desktop. When a desktop is in maintenance mode, it is not included as a candidate when brokering new sessions, and it does not participate in automatic power management (idle pool); however, it still responds to explicit power operations.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.SharedDesktop])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.SharedDesktop[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${MachineName},
        
        [switch]
        ${PassThru},
        
        [bool]
        ${InMaintenanceMode},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSite {
    <#
    .SYNOPSIS
        Changes the overall settings of the current XenDesktop broker site.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER BaseOU
        Changes the objectGUID property identifying the base OU in Active Directory used for desktop registrations. For sites using only registry-based discovery (the default) this value is $null.
        Any desktop attempting to register through a different OU from the one specified here is rejected. Note that desktops configured for registry-based discovery can register with the site, even if a BaseOU value is specified.
        Information held in Active Directory is not modified by changing this value.
        Typically, this property is changed only by using the Set-ADControllerDiscovery.ps1 script.
    .PARAMETER ColorDepth
        Changes the default color depth for new desktop groups, if no color depth is specified explicitly when a group is created. Changing this default has no impact on the color depths used already by existing groups.
        Valid values are FourBit, EightBit, SixteenBit, and TwentyFourBit.
    .PARAMETER ConnectionLeasingEnabled
        Enabled or disable connection leasing on the site.
    .PARAMETER DefaultMinimumFunctionalLevel
        Changes the default minimum functional level used for new catalogs and desktop groups when no explicit value is provided.
    .PARAMETER DesktopGroupIconUid
        Changes the default desktop icon used for new desktop groups if no icon is specified explicitly when a group is created. Changing this default has no impact on the icons used already by existing groups.
        The specified icon must already have been added to the site using New-BrokerIcon.
    .PARAMETER DnsResolutionEnabled
        Changes whether ICA files returned by a broker service to a user device contain the numeric IP address or the DNS name of the desktop machine to which a session should be established.
        With the default value ($false), ICA files will always contain a numeric IP address. To have DNS names appear in the ICA files, set the value to $true.
        Even when DNS resolution is enabled ($true), IP addresses may still appear in ICA files. The reasons for this include, for example, that the broker service is unable to obtain a DNS name for the target machine, or that Storefront is configured to always use numeric IP addresses in this context.
    .PARAMETER LocalHostCacheEnabled
        If the Local Host Cache feature is available, this property enables or disables it at run-time.
    .PARAMETER ReuseMachinesWithoutShutdownInOutageAllowed
        Allows the ReuseMachinesWithoutShutdownInOutage setting on individual DesktopGroups to be enabled. Because these settings have potential security implications, only the site administrator can enable use of this feature.  Disabling this setting will clear corresponding field on all delivery groups.
    .PARAMETER SecureIcaRequired
        Changes the default SecureICA usage requirements for new desktop groups if no SecureICA setting is specified explicitly when a group is created. Changing this default has no impact on the SecureICA usage requirements of existing groups.
    .PARAMETER TrustManagedAnonymousXmlServiceRequests
        Changes whether the XML Service (as used by Storefront) implicitly trusts managed anonymous launch requests.
        With the default value ($false), any attempt to use the XML service for managed anonymous sessions is rejected.
        If this setting is enabled, anyone with access to the XML service will be able to utilize the managed anonymous functionality to leave disconnected prelaunched anonymous sessions available for reconnection. You must ensure that controllers running the brokering services are securely firewalled.
    .PARAMETER TrustRequestsSentToTheXmlServicePort
        Changes whether the XML Service (as used by Storefront) implicitly trusts the originator of requests it receives, or whether it fully authenticates them.
        With the default value ($false), full authentication checks are performed. However, you must enable this setting ($true) to allow support for "Pass-through" authentication, and/or connections routed through Access Gateway.
        If this setting is enabled, you must ensure that controllers running the brokering services are securely firewalled.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Site])]
    param (
        [switch]
        ${PassThru},
        
        [System.Nullable[guid]]
        ${BaseOU},
        
        [Citrix.Broker.Admin.SDK.ColorDepth]
        ${ColorDepth},
        
        [System.Nullable[bool]]
        ${ConnectionLeasingEnabled},
        
        [System.Nullable[Citrix.Broker.Admin.SDK.FunctionalLevel]]
        ${DefaultMinimumFunctionalLevel},
        
        [int]
        ${DesktopGroupIconUid},
        
        [bool]
        ${DnsResolutionEnabled},
        
        [bool]
        ${LocalHostCacheEnabled},
        
        [bool]
        ${ReuseMachinesWithoutShutdownInOutageAllowed},
        
        [bool]
        ${SecureIcaRequired},
        
        [bool]
        ${TrustManagedAnonymousXmlServiceRequests},
        
        [bool]
        ${TrustRequestsSentToTheXmlServicePort},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerSiteMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Site
    .PARAMETER InputObject
        Specifies the Site objects whose Metadata is to be created/updated.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Site])]
    param (
        [Parameter(ParameterSetName='ByInputObject', Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Site[]]
        ${InputObject},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerTag {
    <#
    .SYNOPSIS
        Sets the properties of a tag.
    .PARAMETER InputObject
        Specifies the tag objects to modify.
    .PARAMETER Name
        Identifies the tag to modify.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Description
        Supplies the new value of the Description property.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Tag])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [string]
        ${Description},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerTagMetadata {
    <#
    .SYNOPSIS
        Creates/Updates metadata key-value pairs for Tag
    .PARAMETER TagId
        Specifies the Tag object whose Metadata is to be created/updated by ID.
    .PARAMETER InputObject
        Specifies the Tag objects whose Metadata is to be created/updated.
    .PARAMETER TagName
        Specifies the Tag object whose Metadata is to be created/updated by name.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER Name
        Specifies the name of the Metadata member to be created/updated
    .PARAMETER Value
        Specifies the value of the Metadata member to be created/updated
    .PARAMETER Map
        Specifies a hashtable containing name/value pairs to be used to create or update Metadata members
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.Tag])]
    param (
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [int]
        ${TagId},
        
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Tag[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${TagName},
        
        [switch]
        ${PassThru},
        
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 64)]
        [string]
        ${Name},
        
        [Parameter(ParameterSetName='ByUidProperty', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(0, 1000)]
        [string]
        ${Value},
        
        [Parameter(ParameterSetName='ByNameMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByUidMap', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByInputObjectMap', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${Map},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Set-BrokerUserZonePreference {
    <#
    .SYNOPSIS
        Changes the zone preference associated with a user/group account in this site
    .PARAMETER InputObject
        The account zone preference to be modified.
    .PARAMETER Name
        The name of the user/group account whose home zone preference is to be changed.
    .PARAMETER PassThru
        This cmdlet does not generate any output, unless you use the PassThru parameter, in which case it returns the affected record.
    .PARAMETER HomeZoneUid
        The home zone preference to be associated with the user/group account for this site.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding(DefaultParameterSetName='ByUid')]
    [OutputType([Citrix.Broker.Admin.SDK.UserZonePreference])]
    param (
        [Parameter(ParameterSetName='ByUid', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.UserZonePreference[]]
        ${InputObject},
        
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
        [string]
        ${Name},
        
        [switch]
        ${PassThru},
        
        [guid]
        ${HomeZoneUid},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerCatalogAnalysis {
    <#
    .SYNOPSIS
        Performs a AppDNA analysis on catalog
    .PARAMETER InputObject
        Specifies the catalog to perform the analysis on.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerCatalogPvdImagePrepare {
    <#
    .SYNOPSIS
        Start the PVD Image prepare process in the Broker for the machines in the specified catalog(s).
    .PARAMETER InputObject
        The catalog(s) holding the machines on which to start the PVD Image Preparation process.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerDesktopGroupRebootCycle {
    <#
    .SYNOPSIS
        Creates and starts a reboot cycle for each specified desktop group.
    .PARAMETER InputObject
        Creates a reboot cycle for the specified desktop groups. Groups can be specified using UID values, name values (including wildcards) or desktop group SDK objects.
    .PARAMETER RebootDuration
        Approximate maximum duration in minutes over which the reboot cycle runs.
    .PARAMETER WarningDuration
        Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. If the warning duration value is zero then no message is displayed.
    .PARAMETER WarningTitle
        The window title used when showing the warning message in user sessions on a machine scheduled for reboot.
    .PARAMETER WarningMessage
        Warning message displayed in user sessions on a machine scheduled for reboot. If the message is blank then no message is displayed.
    .PARAMETER WarningRepeatInterval
        Number of minutes to wait before showing the reboot warning message again.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.RebootCycle])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [int]
        ${RebootDuration},
        
        [System.Nullable[int]]
        ${WarningDuration},
        
        [ValidateLength(1, 64)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WarningTitle},
        
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 512)]
        [string]
        ${WarningMessage},
        
        [System.Nullable[int]]
        ${WarningRepeatInterval},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerMachinePvdImagePrepare {
    <#
    .SYNOPSIS
        Start the PVD Image prepare process in the Broker for the specified machine(s).
    .PARAMETER InputObject
        The machine(s) to start the PVD Image Preparation process on.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Machine[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerNaturalDesktopGroupRebootCycle {
    <#
    .SYNOPSIS
        Reboots all machines from the specified desktop group when they are not in use.
    .PARAMETER InputObject
        Reboots all machines from this input desktop group. The desktop groups can be specified using UID values, name values (including wildcards) or desktop group objects.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.DesktopGroup[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerNaturalRebootCycle {
    <#
    .SYNOPSIS
        Reboots all machines from the specified catalog when they are not in use.
    .PARAMETER InputObject
        Reboots all machines from this input catalog. The catalogs can be specified using UID values, name values (including wildcards) or catalog objects.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Start-BrokerRebootCycle {
    <#
    .SYNOPSIS
        Creates and starts a reboot cycle for each desktop group that contains machines from the specified catalog.
    .PARAMETER InputObject
        Creates a reboot cycle for each desktop group that contains machines from this input catalog SDK object. The catalogs can be specified using UID values, name values (including wildcards) or catalog objects.
    .PARAMETER RebootDuration
        Approximate maximum duration in minutes over which the reboot cycle runs.
    .PARAMETER WarningDuration
        Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. If the warning duration value is zero then no message is displayed. In some cases the time required to process a reboot cycle may exceed the RebootDuration time by up to the WarningDuration value; Citrix recommends that the WarningDuration is kept small relative to the RebootDuration value.
    .PARAMETER WarningTitle
        The window title used when showing the warning message in user sessions on a machine scheduled for reboot.
    .PARAMETER WarningMessage
        Warning message displayed in user sessions on a machine scheduled for reboot. If the message is blank then no message is displayed. The optional pattern '%m%' is replaced by the number of minutes until the reboot.
    .PARAMETER WarningRepeatInterval
        Number of minutes to wait before showing the reboot warning message again.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.RebootCycle])]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Catalog[]]
        ${InputObject},
        
        [Parameter(Mandatory=$true)]
        [int]
        ${RebootDuration},
        
        [System.Nullable[int]]
        ${WarningDuration},
        
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${WarningTitle},
        
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 512)]
        [string]
        ${WarningMessage},
        
        [System.Nullable[int]]
        ${WarningRepeatInterval},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Stop-BrokerRebootCycle {
    <#
    .SYNOPSIS
        Cancels the specified reboot cycle.
    .PARAMETER InputObject
        Cancels this reboot cycle.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.RebootCycle[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Stop-BrokerSession {
    <#
    .SYNOPSIS
        Stop or log off a session.
    .PARAMETER InputObject
        Identifies the session(s) to terminate. This can be expressed as either a session Uid or a session object.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
        [Citrix.Broker.Admin.SDK.Session[]]
        ${InputObject},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerAccessPolicyRuleNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed AccessPolicyRule Name is available for use.
    .PARAMETER Name
        The AccessPolicyRule Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerAppAssignmentPolicyRuleNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed AppAssignmentPolicyRule Name is available for use.
    .PARAMETER Name
        The AppAssignmentPolicyRule Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerAppEntitlementPolicyRuleNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed AppEntitlementPolicyRule Name is available for use.
    .PARAMETER Name
        The AppEntitlementPolicyRule Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerApplicationGroupNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed ApplicationGroup Name is available for use.
    .PARAMETER Name
        The ApplicationGroup Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerApplicationNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed Application Name is available for use.
    .PARAMETER Name
        The Application Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 389)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerAssignmentPolicyRuleNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed AssignmentPolicyRule Name is available for use.
    .PARAMETER Name
        The AssignmentPolicyRule Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerCatalogNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed Catalog Name is available for use.
    .PARAMETER Name
        The Catalog Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerDBConnection {
    <#
    .SYNOPSIS
        Tests whether a database is suitable for use by the Citrix Broker Service.
    .PARAMETER DBConnection
        Specifies the database connection string to be tested by the currently selected Citrix Broker Service instance.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Fma.Sdk.Utilities.Service.ServiceStatusInfo])]
    param (
        [Parameter(Mandatory=$true, Position=1)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DBConnection},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerDesktopGroupNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed DesktopGroup Name is available for use.
    .PARAMETER Name
        The DesktopGroup Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerEntitlementPolicyRuleNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed EntitlementPolicyRule Name is available for use.
    .PARAMETER Name
        The EntitlementPolicyRule Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerLicenseServer {
    <#
    .SYNOPSIS
        Tests whether or not a license server can be used by the broker.
    .PARAMETER ComputerName
        The name of the license server to test (machine.domain).
    .PARAMETER Port
        The port number to use on the server.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([System.String])]
    param (
        [Parameter(Mandatory=$true, Position=1)]
        [string]
        ${ComputerName},
        
        [Parameter(Position=2)]
        [int]
        ${Port},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerMachineNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed Machine MachineName is available for use.
    .PARAMETER MachineName
        The Machine MachineName to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string[]]
        ${MachineName},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerPowerTimeSchemeNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed PowerTimeScheme Name is available for use.
    .PARAMETER Name
        The PowerTimeScheme Name to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 64)]
        [string[]]
        ${Name},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Test-BrokerRemotePCAccountNameAvailable {
    <#
    .SYNOPSIS
        Determine whether the proposed RemotePCAccount OU is available for use.
    .PARAMETER OU
        The RemotePCAccount OU to be tested.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    [OutputType([Citrix.Broker.Admin.SDK.NameAvailability])]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateLength(1, 196)]
        [string[]]
        ${OU},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Update-BrokerImportedFTA {
    <#
    .SYNOPSIS
        Imports or updates all of the file type associations for the specified worker.
    .PARAMETER DesktopUids
        Imports or updates the file type associations from the specified desktop. The desktop must belong to a desktop group of the Private or Shared desktop kind.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [int[]]
        ${DesktopUids},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Update-BrokerLocalLeaseCache {
    <#
    .SYNOPSIS
        Flushes the local lease cache.
    .PARAMETER Workers
        Removes all locally cached workers on the controller. The worker cache will be repopulated from the current site database contents after a short delay.
    .PARAMETER Applications
        Removes all locally cached applications on the controller. The application cache will be repopulated from the current site database contents after a short delay.
    .PARAMETER Icons
        Removes all locally cached icons on the controller. The icon cache will be repopulated from the current site database contents after a short delay.
    .PARAMETER Desktops
        Removes all locally cached desktops on the controller. The desktop cache will be repopulated from the current site database contents after a short delay.
    .PARAMETER Leases
        Removes all locally cached leases on the controller. The lease cache will be repopulated from the current site database contents after a short delay.
    .PARAMETER LoggingId
        Specifies the identifier of the high level operation that this cmdlet call forms a part of. Desktop Studio and Desktop Director typically create High Level Operations. PowerShell scripts can also wrap a series of cmdlet calls in a High Level Operation by way of the Start-LogHighLevelOperation and Stop-LogHighLevelOperation cmdlets.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [switch]
        ${Workers},
        
        [switch]
        ${Applications},
        
        [switch]
        ${Icons},
        
        [switch]
        ${Desktops},
        
        [switch]
        ${Leases},
        
        [System.Nullable[guid]]
        ${LoggingId},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

function Update-BrokerNameCache {
    <#
    .SYNOPSIS
        Performs administrative operations on the user and machine name cache.
    .PARAMETER Machines
        Triggers an asynchronous refresh of all cached machine name information.
    .PARAMETER Users
        Triggers an asynchronous refresh of all cached user name information.
    .PARAMETER AdminAddress
        Specifies the address of a XenDesktop controller that the PowerShell snapin will connect to. This can be provided as a host name or an IP address.
    .PARAMETER BearerToken
        Specifies the bearer token assigned to the calling user
    #>
    
    [CmdletBinding()]
    param (
        [switch]
        ${Machines},
        
        [switch]
        ${Users},
        
        [string]
        ${AdminAddress},
        
        [string]
        ${BearerToken}
    )
}

